
arm_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022fc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002580  08002580  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002580  08002580  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  080025f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080025f8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090e4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001706  00000000  00000000  0002917d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a51a  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bd5  00000000  00000000  00045e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989b1  00000000  00000000  0004fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000e8460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080024c8 	.word	0x080024c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080024c8 	.word	0x080024c8

08000224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000228:	f000 fae8 	bl	80007fc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800022c:	f000 f80c 	bl	8000248 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000230:	f000 f8b0 	bl	8000394 <MX_GPIO_Init>
    MX_SPI2_Init();
 8000234:	f000 f84e 	bl	80002d4 <MX_SPI2_Init>
    MX_USART1_UART_Init();
 8000238:	f000 f882 	bl	8000340 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    printf("Hello world\r\n");
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <main+0x20>)
 800023e:	f001 fcbb 	bl	8001bb8 <puts>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000242:	e7fe      	b.n	8000242 <main+0x1e>
 8000244:	080024e0 	.word	0x080024e0

08000248 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fc38 	bl	8001acc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fd8d 	bl	8000db0 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
    {
        Error_Handler();
 800029c:	f000 f8ec 	bl	8000478 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fffa 	bl	80012b4 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
    {
        Error_Handler();
 80002c6:	f000 f8d7 	bl	8000478 <Error_Handler>
    }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_SPI2_Init+0x64>)
 80002da:	4a18      	ldr	r2, [pc, #96]	; (800033c <MX_SPI2_Init+0x68>)
 80002dc:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <MX_SPI2_Init+0x64>)
 80002e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002e4:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_SPI2_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_SPI2_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_SPI2_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_SPI2_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_SPI2_Init+0x64>)
 8000300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000304:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_SPI2_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <MX_SPI2_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_SPI2_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <MX_SPI2_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_SPI2_Init+0x64>)
 8000320:	220a      	movs	r2, #10
 8000322:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_SPI2_Init+0x64>)
 8000326:	f001 f953 	bl	80015d0 <HAL_SPI_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8000330:	f000 f8a2 	bl	8000478 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000008c 	.word	0x2000008c
 800033c:	40003800 	.word	0x40003800

08000340 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_USART1_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART1_UART_Init+0x4c>)
 8000378:	f001 f9ae 	bl	80016d8 <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8000382:	f000 f879 	bl	8000478 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000e4 	.word	0x200000e4
 8000390:	40013800 	.word	0x40013800

08000394 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a25      	ldr	r2, [pc, #148]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0310 	and.w	r3, r3, #16
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1f      	ldr	r2, [pc, #124]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a19      	ldr	r2, [pc, #100]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_GPIO_Init+0xb0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : SW_IN1_Pin */
    GPIO_InitStruct.Pin = SW_IN1_Pin;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000410:	2301      	movs	r3, #1
 8000412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SW_IN1_GPIO_Port, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480b      	ldr	r0, [pc, #44]	; (8000448 <MX_GPIO_Init+0xb4>)
 800041c:	f000 fb34 	bl	8000a88 <HAL_GPIO_Init>

    /*Configure GPIO pin : ETH_INT_Pin */
    GPIO_InitStruct.Pin = ETH_INT_Pin;
 8000420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_GPIO_Init+0xb8>)
 8000428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_GPIO_Init+0xbc>)
 8000436:	f000 fb27 	bl	8000a88 <HAL_GPIO_Init>
}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40011000 	.word	0x40011000
 800044c:	10110000 	.word	0x10110000
 8000450:	40011400 	.word	0x40011400

08000454 <__io_putchar>:
#define PUTCHAR_PROTOTYPE   int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE   int fputc(int ch, FILE *f)
#endif  /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800045c:	1d39      	adds	r1, r7, #4
 800045e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000462:	2201      	movs	r2, #1
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <__io_putchar+0x20>)
 8000466:	f001 f987 	bl	8001778 <HAL_UART_Transmit>
    return ch;
 800046a:	687b      	ldr	r3, [r7, #4]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000e4 	.word	0x200000e4

08000478 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <HAL_SPI_MspInit+0x8c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d131      	bne.n	800056c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <HAL_SPI_MspInit+0x90>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <HAL_SPI_MspInit+0x90>)
 800050e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000512:	61d3      	str	r3, [r2, #28]
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <HAL_SPI_MspInit+0x90>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_SPI_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_SPI_MspInit+0x90>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_SPI_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000538:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800053c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053e:	2302      	movs	r3, #2
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <HAL_SPI_MspInit+0x94>)
 800054e:	f000 fa9b 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <HAL_SPI_MspInit+0x94>)
 8000568:	f000 fa8e 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40003800 	.word	0x40003800
 8000578:	40021000 	.word	0x40021000
 800057c:	40010c00 	.word	0x40010c00

08000580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <HAL_UART_MspInit+0x8c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d131      	bne.n	8000604 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_UART_MspInit+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <HAL_UART_MspInit+0x94>)
 80005e6:	f000 fa4f 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_UART_MspInit+0x94>)
 8000600:	f000 fa42 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013800 	.word	0x40013800
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065e:	f000 f913 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}

08000666 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e00a      	b.n	800068e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000678:	f3af 8000 	nop.w
 800067c:	4601      	mov	r1, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	b2ca      	uxtb	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3301      	adds	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbf0      	blt.n	8000678 <_read+0x12>
	}

return len;
 8000696:	687b      	ldr	r3, [r7, #4]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e009      	b.n	80006c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	60ba      	str	r2, [r7, #8]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff feca 	bl	8000454 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dbf1      	blt.n	80006b2 <_write+0x12>
	}
	return len;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_close>:

int _close(int file)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	return -1;
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <_isatty>:

int _isatty(int file)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	return 0;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f001 f986 	bl	8001a78 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20018000 	.word	0x20018000
 8000798:	00000400 	.word	0x00000400
 800079c:	2000012c 	.word	0x2000012c
 80007a0:	20000148 	.word	0x20000148

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff fff8 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b6:	490c      	ldr	r1, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007cc:	4c09      	ldr	r4, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f001 f953 	bl	8001a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fd21 	bl	8000224 <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007ec:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 80007f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007f4:	20000144 	.word	0x20000144

080007f8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f907 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe34 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f911 	bl	8000a6e <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f8e7 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000130 	.word	0x20000130

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000130 	.word	0x20000130

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff49 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e179      	b.n	8000d90 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8168 	bne.w	8000d8a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a96      	ldr	r2, [pc, #600]	; (8000d18 <HAL_GPIO_Init+0x290>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a94      	ldr	r2, [pc, #592]	; (8000d18 <HAL_GPIO_Init+0x290>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a94      	ldr	r2, [pc, #592]	; (8000d1c <HAL_GPIO_Init+0x294>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a92      	ldr	r2, [pc, #584]	; (8000d1c <HAL_GPIO_Init+0x294>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a90      	ldr	r2, [pc, #576]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a90      	ldr	r2, [pc, #576]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a8e      	ldr	r2, [pc, #568]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a8e      	ldr	r2, [pc, #568]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a8c      	ldr	r2, [pc, #560]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a75      	ldr	r2, [pc, #468]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80c1 	beq.w	8000d8a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d01f      	beq.n	8000c8c <HAL_GPIO_Init+0x204>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d019      	beq.n	8000c88 <HAL_GPIO_Init+0x200>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <HAL_GPIO_Init+0x1fc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a38      	ldr	r2, [pc, #224]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1f4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1f0>
 8000c74:	2305      	movs	r3, #5
 8000c76:	e00a      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c78:	2306      	movs	r3, #6
 8000c7a:	e008      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	4925      	ldr	r1, [pc, #148]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	4924      	ldr	r1, [pc, #144]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4920      	ldr	r1, [pc, #128]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	491a      	ldr	r1, [pc, #104]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4916      	ldr	r1, [pc, #88]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d025      	beq.n	8000d54 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4910      	ldr	r1, [pc, #64]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	e025      	b.n	8000d62 <HAL_GPIO_Init+0x2da>
 8000d16:	bf00      	nop
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10310000 	.word	0x10310000
 8000d20:	10220000 	.word	0x10220000
 8000d24:	10210000 	.word	0x10210000
 8000d28:	10120000 	.word	0x10120000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40011800 	.word	0x40011800
 8000d4c:	40011c00 	.word	0x40011c00
 8000d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4913      	ldr	r1, [pc, #76]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4909      	ldr	r1, [pc, #36]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f47f ae7e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	372c      	adds	r7, #44	; 0x2c
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e272      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8087 	beq.w	8000ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd0:	4b92      	ldr	r3, [pc, #584]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d00c      	beq.n	8000df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ddc:	4b8f      	ldr	r3, [pc, #572]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d112      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5e>
 8000de8:	4b8c      	ldr	r3, [pc, #560]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df4:	d10b      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df6:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d06c      	beq.n	8000edc <HAL_RCC_OscConfig+0x12c>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d168      	bne.n	8000edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e24c      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e16:	d106      	bne.n	8000e26 <HAL_RCC_OscConfig+0x76>
 8000e18:	4b80      	ldr	r3, [pc, #512]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a7f      	ldr	r2, [pc, #508]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e02e      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x98>
 8000e2e:	4b7b      	ldr	r3, [pc, #492]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a7a      	ldr	r2, [pc, #488]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b78      	ldr	r3, [pc, #480]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a77      	ldr	r2, [pc, #476]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e01d      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0xbc>
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a71      	ldr	r2, [pc, #452]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a6e      	ldr	r2, [pc, #440]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e00b      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e6c:	4b6b      	ldr	r3, [pc, #428]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a6a      	ldr	r2, [pc, #424]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b68      	ldr	r3, [pc, #416]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a67      	ldr	r2, [pc, #412]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fd0e 	bl	80008ac <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fd0a 	bl	80008ac <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e200      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0xe4>
 8000eb2:	e014      	b.n	8000ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fcfa 	bl	80008ac <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fcf6 	bl	80008ac <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e1ec      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ece:	4b53      	ldr	r3, [pc, #332]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x10c>
 8000eda:	e000      	b.n	8000ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d063      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eea:	4b4c      	ldr	r3, [pc, #304]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00b      	beq.n	8000f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ef6:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d11c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x18c>
 8000f02:	4b46      	ldr	r3, [pc, #280]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d116      	bne.n	8000f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0e:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <HAL_RCC_OscConfig+0x176>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d001      	beq.n	8000f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e1c0      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4939      	ldr	r1, [pc, #228]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	e03a      	b.n	8000fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d020      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fcaf 	bl	80008ac <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f52:	f7ff fcab 	bl	80008ac <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e1a1      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4927      	ldr	r1, [pc, #156]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <HAL_RCC_OscConfig+0x270>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fc8e 	bl	80008ac <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f94:	f7ff fc8a 	bl	80008ac <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e180      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d03a      	beq.n	8001034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d019      	beq.n	8000ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_RCC_OscConfig+0x274>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fc6e 	bl	80008ac <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fc6a 	bl	80008ac <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e160      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f0      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f000 face 	bl	8001594 <RCC_Delay>
 8000ff8:	e01c      	b.n	8001034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_RCC_OscConfig+0x274>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fc54 	bl	80008ac <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001006:	e00f      	b.n	8001028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fc50 	bl	80008ac <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d908      	bls.n	8001028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e146      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	42420000 	.word	0x42420000
 8001024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001028:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e9      	bne.n	8001008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a6 	beq.w	800118e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001046:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10d      	bne.n	800106e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b88      	ldr	r3, [pc, #544]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a87      	ldr	r2, [pc, #540]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b85      	ldr	r3, [pc, #532]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800106a:	2301      	movs	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <HAL_RCC_OscConfig+0x4c8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107a:	4b7f      	ldr	r3, [pc, #508]	; (8001278 <HAL_RCC_OscConfig+0x4c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <HAL_RCC_OscConfig+0x4c8>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001086:	f7ff fc11 	bl	80008ac <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108e:	f7ff fc0d 	bl	80008ac <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b64      	cmp	r3, #100	; 0x64
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e103      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	4b75      	ldr	r3, [pc, #468]	; (8001278 <HAL_RCC_OscConfig+0x4c8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x312>
 80010b4:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a6e      	ldr	r2, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6213      	str	r3, [r2, #32]
 80010c0:	e02d      	b.n	800111e <HAL_RCC_OscConfig+0x36e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x334>
 80010ca:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	6213      	str	r3, [r2, #32]
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f023 0304 	bic.w	r3, r3, #4
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	e01c      	b.n	800111e <HAL_RCC_OscConfig+0x36e>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d10c      	bne.n	8001106 <HAL_RCC_OscConfig+0x356>
 80010ec:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4a60      	ldr	r2, [pc, #384]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6213      	str	r3, [r2, #32]
 80010f8:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a5d      	ldr	r2, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	e00b      	b.n	800111e <HAL_RCC_OscConfig+0x36e>
 8001106:	4b5b      	ldr	r3, [pc, #364]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4a5a      	ldr	r2, [pc, #360]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6213      	str	r3, [r2, #32]
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d015      	beq.n	8001152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff fbc1 	bl	80008ac <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	e00a      	b.n	8001144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f7ff fbbd 	bl	80008ac <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f241 3288 	movw	r2, #5000	; 0x1388
 800113c:	4293      	cmp	r3, r2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0b1      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0ee      	beq.n	800112e <HAL_RCC_OscConfig+0x37e>
 8001150:	e014      	b.n	800117c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fbab 	bl	80008ac <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fba7 	bl	80008ac <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	; 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e09b      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1ee      	bne.n	800115a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d105      	bne.n	800118e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8087 	beq.w	80012a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d061      	beq.n	8001268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d146      	bne.n	800123a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb7b 	bl	80008ac <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fb77 	bl	80008ac <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e06d      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f0      	bne.n	80011ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d108      	bne.n	80011f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4921      	ldr	r1, [pc, #132]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a19      	ldr	r1, [r3, #32]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	430b      	orrs	r3, r1
 8001206:	491b      	ldr	r1, [pc, #108]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_RCC_OscConfig+0x4cc>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fb4b 	bl	80008ac <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fb47 	bl	80008ac <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e03d      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x46a>
 8001238:	e035      	b.n	80012a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_RCC_OscConfig+0x4cc>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fb34 	bl	80008ac <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fb30 	bl	80008ac <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e026      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x498>
 8001266:	e01e      	b.n	80012a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e019      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
 8001274:	40021000 	.word	0x40021000
 8001278:	40007000 	.word	0x40007000
 800127c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x500>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	429a      	cmp	r2, r3
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0d0      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012c8:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d910      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0207 	bic.w	r2, r3, #7
 80012de:	4965      	ldr	r1, [pc, #404]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b63      	ldr	r3, [pc, #396]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b8      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800131a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	494d      	ldr	r1, [pc, #308]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d040      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d115      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e07f      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e073      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06b      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f023 0203 	bic.w	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4936      	ldr	r1, [pc, #216]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a4:	f7ff fa82 	bl	80008ac <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ac:	f7ff fa7e 	bl	80008ac <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e053      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 020c 	and.w	r2, r3, #12
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d1eb      	bne.n	80013ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d210      	bcs.n	8001404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4922      	ldr	r1, [pc, #136]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e032      	b.n	800146a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4916      	ldr	r1, [pc, #88]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001442:	f000 f821 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001446:	4602      	mov	r2, r0
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	5ccb      	ldrb	r3, [r1, r3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_RCC_ClockConfig+0x1cc>)
 800145c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_ClockConfig+0x1d0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f9e0 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000
 8001478:	40021000 	.word	0x40021000
 800147c:	080024f0 	.word	0x080024f0
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_GetSysClockFreq+0x94>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d002      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x30>
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d003      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x36>
 80014b6:	e027      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	e027      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_RCC_GetSysClockFreq+0x94>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0c5b      	lsrs	r3, r3, #17
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ea:	fb03 f202 	mul.w	r2, r3, r2
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e004      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	613b      	str	r3, [r7, #16]
      break;
 8001506:	e002      	b.n	800150e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetSysClockFreq+0x98>)
 800150a:	613b      	str	r3, [r7, #16]
      break;
 800150c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150e:	693b      	ldr	r3, [r7, #16]
}
 8001510:	4618      	mov	r0, r3
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	007a1200 	.word	0x007a1200
 8001524:	08002508 	.word	0x08002508
 8001528:	08002518 	.word	0x08002518
 800152c:	003d0900 	.word	0x003d0900

08001530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_RCC_GetHCLKFreq+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001548:	f7ff fff2 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	4903      	ldr	r1, [pc, #12]	; (8001568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	08002500 	.word	0x08002500

0800156c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001570:	f7ff ffde 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0adb      	lsrs	r3, r3, #11
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	4903      	ldr	r1, [pc, #12]	; (8001590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	08002500 	.word	0x08002500

08001594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <RCC_Delay+0x34>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <RCC_Delay+0x38>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0a5b      	lsrs	r3, r3, #9
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015b0:	bf00      	nop
  }
  while (Delay --);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	60fa      	str	r2, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f9      	bne.n	80015b0 <RCC_Delay+0x1c>
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000000 	.word	0x20000000
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e076      	b.n	80016d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015f2:	d009      	beq.n	8001608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
 80015fa:	e005      	b.n	8001608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff60 	bl	80004e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800163e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	ea42 0103 	orr.w	r1, r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	0c1a      	lsrs	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f002 0204 	and.w	r2, r2, #4
 80016ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e042      	b.n	8001770 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe ff3e 	bl	8000580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800171a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f91d 	bl	800195c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	d16d      	bne.n	8001874 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_UART_Transmit+0x2c>
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e066      	b.n	8001876 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2221      	movs	r2, #33	; 0x21
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017b6:	f7ff f879 	bl	80008ac <HAL_GetTick>
 80017ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d0:	d108      	bne.n	80017e4 <HAL_UART_Transmit+0x6c>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	e003      	b.n	80017ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017ec:	e02a      	b.n	8001844 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f840 	bl	800187e <UART_WaitOnFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e036      	b.n	8001876 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800181c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	3302      	adds	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	e007      	b.n	8001836 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1cf      	bne.n	80017ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f810 	bl	800187e <UART_WaitOnFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e006      	b.n	8001876 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b090      	sub	sp, #64	; 0x40
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800188e:	e050      	b.n	8001932 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001896:	d04c      	beq.n	8001932 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <UART_WaitOnFlagUntilTimeout+0x30>
 800189e:	f7ff f805 	bl	80008ac <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d241      	bcs.n	8001932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	330c      	adds	r3, #12
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	e853 3f00 	ldrex	r3, [r3]
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	330c      	adds	r3, #12
 80018cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ce:	637a      	str	r2, [r7, #52]	; 0x34
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d6:	e841 2300 	strex	r3, r2, [r1]
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e5      	bne.n	80018ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3314      	adds	r3, #20
 80018e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	e853 3f00 	ldrex	r3, [r3]
 80018f0:	613b      	str	r3, [r7, #16]
   return(result);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3314      	adds	r3, #20
 8001900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001902:	623a      	str	r2, [r7, #32]
 8001904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001906:	69f9      	ldr	r1, [r7, #28]
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	e841 2300 	strex	r3, r2, [r1]
 800190e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e5      	bne.n	80018e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e00f      	b.n	8001952 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4013      	ands	r3, r2
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	429a      	cmp	r2, r3
 800194e:	d09f      	beq.n	8001890 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3740      	adds	r7, #64	; 0x40
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001996:	f023 030c 	bic.w	r3, r3, #12
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <UART_SetConfig+0x114>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d103      	bne.n	80019cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019c4:	f7ff fdd2 	bl	800156c <HAL_RCC_GetPCLK2Freq>
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019cc:	f7ff fdba 	bl	8001544 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009a      	lsls	r2, r3, #2
 80019dc:	441a      	add	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <UART_SetConfig+0x118>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	0119      	lsls	r1, r3, #4
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <UART_SetConfig+0x118>)
 8001a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	fb00 f303 	mul.w	r3, r0, r3
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	3332      	adds	r3, #50	; 0x32
 8001a1c:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <UART_SetConfig+0x118>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a28:	4419      	add	r1, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <UART_SetConfig+0x118>)
 8001a42:	fba3 0302 	umull	r0, r3, r3, r2
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	fb00 f303 	mul.w	r3, r0, r3
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	3332      	adds	r3, #50	; 0x32
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <UART_SetConfig+0x118>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	440a      	add	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013800 	.word	0x40013800
 8001a74:	51eb851f 	.word	0x51eb851f

08001a78 <__errno>:
 8001a78:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <__errno+0x8>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <__libc_init_array>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	2600      	movs	r6, #0
 8001a88:	4d0c      	ldr	r5, [pc, #48]	; (8001abc <__libc_init_array+0x38>)
 8001a8a:	4c0d      	ldr	r4, [pc, #52]	; (8001ac0 <__libc_init_array+0x3c>)
 8001a8c:	1b64      	subs	r4, r4, r5
 8001a8e:	10a4      	asrs	r4, r4, #2
 8001a90:	42a6      	cmp	r6, r4
 8001a92:	d109      	bne.n	8001aa8 <__libc_init_array+0x24>
 8001a94:	f000 fd18 	bl	80024c8 <_init>
 8001a98:	2600      	movs	r6, #0
 8001a9a:	4d0a      	ldr	r5, [pc, #40]	; (8001ac4 <__libc_init_array+0x40>)
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <__libc_init_array+0x44>)
 8001a9e:	1b64      	subs	r4, r4, r5
 8001aa0:	10a4      	asrs	r4, r4, #2
 8001aa2:	42a6      	cmp	r6, r4
 8001aa4:	d105      	bne.n	8001ab2 <__libc_init_array+0x2e>
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aac:	4798      	blx	r3
 8001aae:	3601      	adds	r6, #1
 8001ab0:	e7ee      	b.n	8001a90 <__libc_init_array+0xc>
 8001ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab6:	4798      	blx	r3
 8001ab8:	3601      	adds	r6, #1
 8001aba:	e7f2      	b.n	8001aa2 <__libc_init_array+0x1e>
 8001abc:	08002580 	.word	0x08002580
 8001ac0:	08002580 	.word	0x08002580
 8001ac4:	08002580 	.word	0x08002580
 8001ac8:	08002584 	.word	0x08002584

08001acc <memset>:
 8001acc:	4603      	mov	r3, r0
 8001ace:	4402      	add	r2, r0
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <memset+0xa>
 8001ad4:	4770      	bx	lr
 8001ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ada:	e7f9      	b.n	8001ad0 <memset+0x4>

08001adc <_puts_r>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	460e      	mov	r6, r1
 8001ae0:	4605      	mov	r5, r0
 8001ae2:	b118      	cbz	r0, 8001aec <_puts_r+0x10>
 8001ae4:	6983      	ldr	r3, [r0, #24]
 8001ae6:	b90b      	cbnz	r3, 8001aec <_puts_r+0x10>
 8001ae8:	f000 fa44 	bl	8001f74 <__sinit>
 8001aec:	69ab      	ldr	r3, [r5, #24]
 8001aee:	68ac      	ldr	r4, [r5, #8]
 8001af0:	b913      	cbnz	r3, 8001af8 <_puts_r+0x1c>
 8001af2:	4628      	mov	r0, r5
 8001af4:	f000 fa3e 	bl	8001f74 <__sinit>
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <_puts_r+0xd0>)
 8001afa:	429c      	cmp	r4, r3
 8001afc:	d120      	bne.n	8001b40 <_puts_r+0x64>
 8001afe:	686c      	ldr	r4, [r5, #4]
 8001b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b02:	07db      	lsls	r3, r3, #31
 8001b04:	d405      	bmi.n	8001b12 <_puts_r+0x36>
 8001b06:	89a3      	ldrh	r3, [r4, #12]
 8001b08:	0598      	lsls	r0, r3, #22
 8001b0a:	d402      	bmi.n	8001b12 <_puts_r+0x36>
 8001b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0e:	f000 facf 	bl	80020b0 <__retarget_lock_acquire_recursive>
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	0719      	lsls	r1, r3, #28
 8001b16:	d51d      	bpl.n	8001b54 <_puts_r+0x78>
 8001b18:	6923      	ldr	r3, [r4, #16]
 8001b1a:	b1db      	cbz	r3, 8001b54 <_puts_r+0x78>
 8001b1c:	3e01      	subs	r6, #1
 8001b1e:	68a3      	ldr	r3, [r4, #8]
 8001b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60a3      	str	r3, [r4, #8]
 8001b28:	bb39      	cbnz	r1, 8001b7a <_puts_r+0x9e>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da38      	bge.n	8001ba0 <_puts_r+0xc4>
 8001b2e:	4622      	mov	r2, r4
 8001b30:	210a      	movs	r1, #10
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 f848 	bl	8001bc8 <__swbuf_r>
 8001b38:	3001      	adds	r0, #1
 8001b3a:	d011      	beq.n	8001b60 <_puts_r+0x84>
 8001b3c:	250a      	movs	r5, #10
 8001b3e:	e011      	b.n	8001b64 <_puts_r+0x88>
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <_puts_r+0xd4>)
 8001b42:	429c      	cmp	r4, r3
 8001b44:	d101      	bne.n	8001b4a <_puts_r+0x6e>
 8001b46:	68ac      	ldr	r4, [r5, #8]
 8001b48:	e7da      	b.n	8001b00 <_puts_r+0x24>
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <_puts_r+0xd8>)
 8001b4c:	429c      	cmp	r4, r3
 8001b4e:	bf08      	it	eq
 8001b50:	68ec      	ldreq	r4, [r5, #12]
 8001b52:	e7d5      	b.n	8001b00 <_puts_r+0x24>
 8001b54:	4621      	mov	r1, r4
 8001b56:	4628      	mov	r0, r5
 8001b58:	f000 f888 	bl	8001c6c <__swsetup_r>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d0dd      	beq.n	8001b1c <_puts_r+0x40>
 8001b60:	f04f 35ff 	mov.w	r5, #4294967295
 8001b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b66:	07da      	lsls	r2, r3, #31
 8001b68:	d405      	bmi.n	8001b76 <_puts_r+0x9a>
 8001b6a:	89a3      	ldrh	r3, [r4, #12]
 8001b6c:	059b      	lsls	r3, r3, #22
 8001b6e:	d402      	bmi.n	8001b76 <_puts_r+0x9a>
 8001b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b72:	f000 fa9e 	bl	80020b2 <__retarget_lock_release_recursive>
 8001b76:	4628      	mov	r0, r5
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da04      	bge.n	8001b88 <_puts_r+0xac>
 8001b7e:	69a2      	ldr	r2, [r4, #24]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dc06      	bgt.n	8001b92 <_puts_r+0xb6>
 8001b84:	290a      	cmp	r1, #10
 8001b86:	d004      	beq.n	8001b92 <_puts_r+0xb6>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	6022      	str	r2, [r4, #0]
 8001b8e:	7019      	strb	r1, [r3, #0]
 8001b90:	e7c5      	b.n	8001b1e <_puts_r+0x42>
 8001b92:	4622      	mov	r2, r4
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 f817 	bl	8001bc8 <__swbuf_r>
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	d1bf      	bne.n	8001b1e <_puts_r+0x42>
 8001b9e:	e7df      	b.n	8001b60 <_puts_r+0x84>
 8001ba0:	250a      	movs	r5, #10
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	6022      	str	r2, [r4, #0]
 8001ba8:	701d      	strb	r5, [r3, #0]
 8001baa:	e7db      	b.n	8001b64 <_puts_r+0x88>
 8001bac:	08002540 	.word	0x08002540
 8001bb0:	08002560 	.word	0x08002560
 8001bb4:	08002520 	.word	0x08002520

08001bb8 <puts>:
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <puts+0xc>)
 8001bba:	4601      	mov	r1, r0
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f7ff bf8d 	b.w	8001adc <_puts_r>
 8001bc2:	bf00      	nop
 8001bc4:	2000000c 	.word	0x2000000c

08001bc8 <__swbuf_r>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	460e      	mov	r6, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	4605      	mov	r5, r0
 8001bd0:	b118      	cbz	r0, 8001bda <__swbuf_r+0x12>
 8001bd2:	6983      	ldr	r3, [r0, #24]
 8001bd4:	b90b      	cbnz	r3, 8001bda <__swbuf_r+0x12>
 8001bd6:	f000 f9cd 	bl	8001f74 <__sinit>
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <__swbuf_r+0x98>)
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	d12b      	bne.n	8001c38 <__swbuf_r+0x70>
 8001be0:	686c      	ldr	r4, [r5, #4]
 8001be2:	69a3      	ldr	r3, [r4, #24]
 8001be4:	60a3      	str	r3, [r4, #8]
 8001be6:	89a3      	ldrh	r3, [r4, #12]
 8001be8:	071a      	lsls	r2, r3, #28
 8001bea:	d52f      	bpl.n	8001c4c <__swbuf_r+0x84>
 8001bec:	6923      	ldr	r3, [r4, #16]
 8001bee:	b36b      	cbz	r3, 8001c4c <__swbuf_r+0x84>
 8001bf0:	6923      	ldr	r3, [r4, #16]
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	b2f6      	uxtb	r6, r6
 8001bf6:	1ac0      	subs	r0, r0, r3
 8001bf8:	6963      	ldr	r3, [r4, #20]
 8001bfa:	4637      	mov	r7, r6
 8001bfc:	4283      	cmp	r3, r0
 8001bfe:	dc04      	bgt.n	8001c0a <__swbuf_r+0x42>
 8001c00:	4621      	mov	r1, r4
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 f922 	bl	8001e4c <_fflush_r>
 8001c08:	bb30      	cbnz	r0, 8001c58 <__swbuf_r+0x90>
 8001c0a:	68a3      	ldr	r3, [r4, #8]
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60a3      	str	r3, [r4, #8]
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	6022      	str	r2, [r4, #0]
 8001c18:	701e      	strb	r6, [r3, #0]
 8001c1a:	6963      	ldr	r3, [r4, #20]
 8001c1c:	4283      	cmp	r3, r0
 8001c1e:	d004      	beq.n	8001c2a <__swbuf_r+0x62>
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	07db      	lsls	r3, r3, #31
 8001c24:	d506      	bpl.n	8001c34 <__swbuf_r+0x6c>
 8001c26:	2e0a      	cmp	r6, #10
 8001c28:	d104      	bne.n	8001c34 <__swbuf_r+0x6c>
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f000 f90d 	bl	8001e4c <_fflush_r>
 8001c32:	b988      	cbnz	r0, 8001c58 <__swbuf_r+0x90>
 8001c34:	4638      	mov	r0, r7
 8001c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <__swbuf_r+0x9c>)
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	d101      	bne.n	8001c42 <__swbuf_r+0x7a>
 8001c3e:	68ac      	ldr	r4, [r5, #8]
 8001c40:	e7cf      	b.n	8001be2 <__swbuf_r+0x1a>
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <__swbuf_r+0xa0>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	bf08      	it	eq
 8001c48:	68ec      	ldreq	r4, [r5, #12]
 8001c4a:	e7ca      	b.n	8001be2 <__swbuf_r+0x1a>
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f000 f80c 	bl	8001c6c <__swsetup_r>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d0cb      	beq.n	8001bf0 <__swbuf_r+0x28>
 8001c58:	f04f 37ff 	mov.w	r7, #4294967295
 8001c5c:	e7ea      	b.n	8001c34 <__swbuf_r+0x6c>
 8001c5e:	bf00      	nop
 8001c60:	08002540 	.word	0x08002540
 8001c64:	08002560 	.word	0x08002560
 8001c68:	08002520 	.word	0x08002520

08001c6c <__swsetup_r>:
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <__swsetup_r+0xcc>)
 8001c6e:	b570      	push	{r4, r5, r6, lr}
 8001c70:	681d      	ldr	r5, [r3, #0]
 8001c72:	4606      	mov	r6, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	b125      	cbz	r5, 8001c82 <__swsetup_r+0x16>
 8001c78:	69ab      	ldr	r3, [r5, #24]
 8001c7a:	b913      	cbnz	r3, 8001c82 <__swsetup_r+0x16>
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f000 f979 	bl	8001f74 <__sinit>
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <__swsetup_r+0xd0>)
 8001c84:	429c      	cmp	r4, r3
 8001c86:	d10f      	bne.n	8001ca8 <__swsetup_r+0x3c>
 8001c88:	686c      	ldr	r4, [r5, #4]
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c90:	0719      	lsls	r1, r3, #28
 8001c92:	d42c      	bmi.n	8001cee <__swsetup_r+0x82>
 8001c94:	06dd      	lsls	r5, r3, #27
 8001c96:	d411      	bmi.n	8001cbc <__swsetup_r+0x50>
 8001c98:	2309      	movs	r3, #9
 8001c9a:	6033      	str	r3, [r6, #0]
 8001c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	e03e      	b.n	8001d26 <__swsetup_r+0xba>
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <__swsetup_r+0xd4>)
 8001caa:	429c      	cmp	r4, r3
 8001cac:	d101      	bne.n	8001cb2 <__swsetup_r+0x46>
 8001cae:	68ac      	ldr	r4, [r5, #8]
 8001cb0:	e7eb      	b.n	8001c8a <__swsetup_r+0x1e>
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <__swsetup_r+0xd8>)
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	bf08      	it	eq
 8001cb8:	68ec      	ldreq	r4, [r5, #12]
 8001cba:	e7e6      	b.n	8001c8a <__swsetup_r+0x1e>
 8001cbc:	0758      	lsls	r0, r3, #29
 8001cbe:	d512      	bpl.n	8001ce6 <__swsetup_r+0x7a>
 8001cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cc2:	b141      	cbz	r1, 8001cd6 <__swsetup_r+0x6a>
 8001cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cc8:	4299      	cmp	r1, r3
 8001cca:	d002      	beq.n	8001cd2 <__swsetup_r+0x66>
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f000 fa57 	bl	8002180 <_free_r>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cdc:	81a3      	strh	r3, [r4, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6063      	str	r3, [r4, #4]
 8001ce2:	6923      	ldr	r3, [r4, #16]
 8001ce4:	6023      	str	r3, [r4, #0]
 8001ce6:	89a3      	ldrh	r3, [r4, #12]
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	81a3      	strh	r3, [r4, #12]
 8001cee:	6923      	ldr	r3, [r4, #16]
 8001cf0:	b94b      	cbnz	r3, 8001d06 <__swsetup_r+0x9a>
 8001cf2:	89a3      	ldrh	r3, [r4, #12]
 8001cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfc:	d003      	beq.n	8001d06 <__swsetup_r+0x9a>
 8001cfe:	4621      	mov	r1, r4
 8001d00:	4630      	mov	r0, r6
 8001d02:	f000 f9fd 	bl	8002100 <__smakebuf_r>
 8001d06:	89a0      	ldrh	r0, [r4, #12]
 8001d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d0c:	f010 0301 	ands.w	r3, r0, #1
 8001d10:	d00a      	beq.n	8001d28 <__swsetup_r+0xbc>
 8001d12:	2300      	movs	r3, #0
 8001d14:	60a3      	str	r3, [r4, #8]
 8001d16:	6963      	ldr	r3, [r4, #20]
 8001d18:	425b      	negs	r3, r3
 8001d1a:	61a3      	str	r3, [r4, #24]
 8001d1c:	6923      	ldr	r3, [r4, #16]
 8001d1e:	b943      	cbnz	r3, 8001d32 <__swsetup_r+0xc6>
 8001d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d24:	d1ba      	bne.n	8001c9c <__swsetup_r+0x30>
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	0781      	lsls	r1, r0, #30
 8001d2a:	bf58      	it	pl
 8001d2c:	6963      	ldrpl	r3, [r4, #20]
 8001d2e:	60a3      	str	r3, [r4, #8]
 8001d30:	e7f4      	b.n	8001d1c <__swsetup_r+0xb0>
 8001d32:	2000      	movs	r0, #0
 8001d34:	e7f7      	b.n	8001d26 <__swsetup_r+0xba>
 8001d36:	bf00      	nop
 8001d38:	2000000c 	.word	0x2000000c
 8001d3c:	08002540 	.word	0x08002540
 8001d40:	08002560 	.word	0x08002560
 8001d44:	08002520 	.word	0x08002520

08001d48 <__sflush_r>:
 8001d48:	898a      	ldrh	r2, [r1, #12]
 8001d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	0710      	lsls	r0, r2, #28
 8001d50:	460c      	mov	r4, r1
 8001d52:	d457      	bmi.n	8001e04 <__sflush_r+0xbc>
 8001d54:	684b      	ldr	r3, [r1, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dc04      	bgt.n	8001d64 <__sflush_r+0x1c>
 8001d5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dc01      	bgt.n	8001d64 <__sflush_r+0x1c>
 8001d60:	2000      	movs	r0, #0
 8001d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d66:	2e00      	cmp	r6, #0
 8001d68:	d0fa      	beq.n	8001d60 <__sflush_r+0x18>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d70:	682f      	ldr	r7, [r5, #0]
 8001d72:	602b      	str	r3, [r5, #0]
 8001d74:	d032      	beq.n	8001ddc <__sflush_r+0x94>
 8001d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d78:	89a3      	ldrh	r3, [r4, #12]
 8001d7a:	075a      	lsls	r2, r3, #29
 8001d7c:	d505      	bpl.n	8001d8a <__sflush_r+0x42>
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	1ac0      	subs	r0, r0, r3
 8001d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d84:	b10b      	cbz	r3, 8001d8a <__sflush_r+0x42>
 8001d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d88:	1ac0      	subs	r0, r0, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d90:	4628      	mov	r0, r5
 8001d92:	6a21      	ldr	r1, [r4, #32]
 8001d94:	47b0      	blx	r6
 8001d96:	1c43      	adds	r3, r0, #1
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	d106      	bne.n	8001daa <__sflush_r+0x62>
 8001d9c:	6829      	ldr	r1, [r5, #0]
 8001d9e:	291d      	cmp	r1, #29
 8001da0:	d82c      	bhi.n	8001dfc <__sflush_r+0xb4>
 8001da2:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <__sflush_r+0x100>)
 8001da4:	40ca      	lsrs	r2, r1
 8001da6:	07d6      	lsls	r6, r2, #31
 8001da8:	d528      	bpl.n	8001dfc <__sflush_r+0xb4>
 8001daa:	2200      	movs	r2, #0
 8001dac:	6062      	str	r2, [r4, #4]
 8001dae:	6922      	ldr	r2, [r4, #16]
 8001db0:	04d9      	lsls	r1, r3, #19
 8001db2:	6022      	str	r2, [r4, #0]
 8001db4:	d504      	bpl.n	8001dc0 <__sflush_r+0x78>
 8001db6:	1c42      	adds	r2, r0, #1
 8001db8:	d101      	bne.n	8001dbe <__sflush_r+0x76>
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	b903      	cbnz	r3, 8001dc0 <__sflush_r+0x78>
 8001dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8001dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dc2:	602f      	str	r7, [r5, #0]
 8001dc4:	2900      	cmp	r1, #0
 8001dc6:	d0cb      	beq.n	8001d60 <__sflush_r+0x18>
 8001dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dcc:	4299      	cmp	r1, r3
 8001dce:	d002      	beq.n	8001dd6 <__sflush_r+0x8e>
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f000 f9d5 	bl	8002180 <_free_r>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8001dda:	e7c2      	b.n	8001d62 <__sflush_r+0x1a>
 8001ddc:	6a21      	ldr	r1, [r4, #32]
 8001dde:	2301      	movs	r3, #1
 8001de0:	4628      	mov	r0, r5
 8001de2:	47b0      	blx	r6
 8001de4:	1c41      	adds	r1, r0, #1
 8001de6:	d1c7      	bne.n	8001d78 <__sflush_r+0x30>
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0c4      	beq.n	8001d78 <__sflush_r+0x30>
 8001dee:	2b1d      	cmp	r3, #29
 8001df0:	d001      	beq.n	8001df6 <__sflush_r+0xae>
 8001df2:	2b16      	cmp	r3, #22
 8001df4:	d101      	bne.n	8001dfa <__sflush_r+0xb2>
 8001df6:	602f      	str	r7, [r5, #0]
 8001df8:	e7b2      	b.n	8001d60 <__sflush_r+0x18>
 8001dfa:	89a3      	ldrh	r3, [r4, #12]
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	e7ae      	b.n	8001d62 <__sflush_r+0x1a>
 8001e04:	690f      	ldr	r7, [r1, #16]
 8001e06:	2f00      	cmp	r7, #0
 8001e08:	d0aa      	beq.n	8001d60 <__sflush_r+0x18>
 8001e0a:	0793      	lsls	r3, r2, #30
 8001e0c:	bf18      	it	ne
 8001e0e:	2300      	movne	r3, #0
 8001e10:	680e      	ldr	r6, [r1, #0]
 8001e12:	bf08      	it	eq
 8001e14:	694b      	ldreq	r3, [r1, #20]
 8001e16:	1bf6      	subs	r6, r6, r7
 8001e18:	600f      	str	r7, [r1, #0]
 8001e1a:	608b      	str	r3, [r1, #8]
 8001e1c:	2e00      	cmp	r6, #0
 8001e1e:	dd9f      	ble.n	8001d60 <__sflush_r+0x18>
 8001e20:	4633      	mov	r3, r6
 8001e22:	463a      	mov	r2, r7
 8001e24:	4628      	mov	r0, r5
 8001e26:	6a21      	ldr	r1, [r4, #32]
 8001e28:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e2c:	47e0      	blx	ip
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	dc06      	bgt.n	8001e40 <__sflush_r+0xf8>
 8001e32:	89a3      	ldrh	r3, [r4, #12]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3c:	81a3      	strh	r3, [r4, #12]
 8001e3e:	e790      	b.n	8001d62 <__sflush_r+0x1a>
 8001e40:	4407      	add	r7, r0
 8001e42:	1a36      	subs	r6, r6, r0
 8001e44:	e7ea      	b.n	8001e1c <__sflush_r+0xd4>
 8001e46:	bf00      	nop
 8001e48:	20400001 	.word	0x20400001

08001e4c <_fflush_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	690b      	ldr	r3, [r1, #16]
 8001e50:	4605      	mov	r5, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	b913      	cbnz	r3, 8001e5c <_fflush_r+0x10>
 8001e56:	2500      	movs	r5, #0
 8001e58:	4628      	mov	r0, r5
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	b118      	cbz	r0, 8001e66 <_fflush_r+0x1a>
 8001e5e:	6983      	ldr	r3, [r0, #24]
 8001e60:	b90b      	cbnz	r3, 8001e66 <_fflush_r+0x1a>
 8001e62:	f000 f887 	bl	8001f74 <__sinit>
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <_fflush_r+0x6c>)
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	d11b      	bne.n	8001ea4 <_fflush_r+0x58>
 8001e6c:	686c      	ldr	r4, [r5, #4]
 8001e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ef      	beq.n	8001e56 <_fflush_r+0xa>
 8001e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e78:	07d0      	lsls	r0, r2, #31
 8001e7a:	d404      	bmi.n	8001e86 <_fflush_r+0x3a>
 8001e7c:	0599      	lsls	r1, r3, #22
 8001e7e:	d402      	bmi.n	8001e86 <_fflush_r+0x3a>
 8001e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e82:	f000 f915 	bl	80020b0 <__retarget_lock_acquire_recursive>
 8001e86:	4628      	mov	r0, r5
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7ff ff5d 	bl	8001d48 <__sflush_r>
 8001e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e90:	4605      	mov	r5, r0
 8001e92:	07da      	lsls	r2, r3, #31
 8001e94:	d4e0      	bmi.n	8001e58 <_fflush_r+0xc>
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	059b      	lsls	r3, r3, #22
 8001e9a:	d4dd      	bmi.n	8001e58 <_fflush_r+0xc>
 8001e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e9e:	f000 f908 	bl	80020b2 <__retarget_lock_release_recursive>
 8001ea2:	e7d9      	b.n	8001e58 <_fflush_r+0xc>
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <_fflush_r+0x70>)
 8001ea6:	429c      	cmp	r4, r3
 8001ea8:	d101      	bne.n	8001eae <_fflush_r+0x62>
 8001eaa:	68ac      	ldr	r4, [r5, #8]
 8001eac:	e7df      	b.n	8001e6e <_fflush_r+0x22>
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <_fflush_r+0x74>)
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	bf08      	it	eq
 8001eb4:	68ec      	ldreq	r4, [r5, #12]
 8001eb6:	e7da      	b.n	8001e6e <_fflush_r+0x22>
 8001eb8:	08002540 	.word	0x08002540
 8001ebc:	08002560 	.word	0x08002560
 8001ec0:	08002520 	.word	0x08002520

08001ec4 <std>:
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	4604      	mov	r4, r0
 8001eca:	e9c0 3300 	strd	r3, r3, [r0]
 8001ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ed2:	6083      	str	r3, [r0, #8]
 8001ed4:	8181      	strh	r1, [r0, #12]
 8001ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ed8:	81c2      	strh	r2, [r0, #14]
 8001eda:	6183      	str	r3, [r0, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	2208      	movs	r2, #8
 8001ee0:	305c      	adds	r0, #92	; 0x5c
 8001ee2:	f7ff fdf3 	bl	8001acc <memset>
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <std+0x38>)
 8001ee8:	6224      	str	r4, [r4, #32]
 8001eea:	6263      	str	r3, [r4, #36]	; 0x24
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <std+0x3c>)
 8001eee:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <std+0x40>)
 8001ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <std+0x44>)
 8001ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	bf00      	nop
 8001efc:	08002359 	.word	0x08002359
 8001f00:	0800237b 	.word	0x0800237b
 8001f04:	080023b3 	.word	0x080023b3
 8001f08:	080023d7 	.word	0x080023d7

08001f0c <_cleanup_r>:
 8001f0c:	4901      	ldr	r1, [pc, #4]	; (8001f14 <_cleanup_r+0x8>)
 8001f0e:	f000 b8af 	b.w	8002070 <_fwalk_reent>
 8001f12:	bf00      	nop
 8001f14:	08001e4d 	.word	0x08001e4d

08001f18 <__sfmoreglue>:
 8001f18:	2268      	movs	r2, #104	; 0x68
 8001f1a:	b570      	push	{r4, r5, r6, lr}
 8001f1c:	1e4d      	subs	r5, r1, #1
 8001f1e:	4355      	muls	r5, r2
 8001f20:	460e      	mov	r6, r1
 8001f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f26:	f000 f993 	bl	8002250 <_malloc_r>
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	b140      	cbz	r0, 8001f40 <__sfmoreglue+0x28>
 8001f2e:	2100      	movs	r1, #0
 8001f30:	e9c0 1600 	strd	r1, r6, [r0]
 8001f34:	300c      	adds	r0, #12
 8001f36:	60a0      	str	r0, [r4, #8]
 8001f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f3c:	f7ff fdc6 	bl	8001acc <memset>
 8001f40:	4620      	mov	r0, r4
 8001f42:	bd70      	pop	{r4, r5, r6, pc}

08001f44 <__sfp_lock_acquire>:
 8001f44:	4801      	ldr	r0, [pc, #4]	; (8001f4c <__sfp_lock_acquire+0x8>)
 8001f46:	f000 b8b3 	b.w	80020b0 <__retarget_lock_acquire_recursive>
 8001f4a:	bf00      	nop
 8001f4c:	20000135 	.word	0x20000135

08001f50 <__sfp_lock_release>:
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <__sfp_lock_release+0x8>)
 8001f52:	f000 b8ae 	b.w	80020b2 <__retarget_lock_release_recursive>
 8001f56:	bf00      	nop
 8001f58:	20000135 	.word	0x20000135

08001f5c <__sinit_lock_acquire>:
 8001f5c:	4801      	ldr	r0, [pc, #4]	; (8001f64 <__sinit_lock_acquire+0x8>)
 8001f5e:	f000 b8a7 	b.w	80020b0 <__retarget_lock_acquire_recursive>
 8001f62:	bf00      	nop
 8001f64:	20000136 	.word	0x20000136

08001f68 <__sinit_lock_release>:
 8001f68:	4801      	ldr	r0, [pc, #4]	; (8001f70 <__sinit_lock_release+0x8>)
 8001f6a:	f000 b8a2 	b.w	80020b2 <__retarget_lock_release_recursive>
 8001f6e:	bf00      	nop
 8001f70:	20000136 	.word	0x20000136

08001f74 <__sinit>:
 8001f74:	b510      	push	{r4, lr}
 8001f76:	4604      	mov	r4, r0
 8001f78:	f7ff fff0 	bl	8001f5c <__sinit_lock_acquire>
 8001f7c:	69a3      	ldr	r3, [r4, #24]
 8001f7e:	b11b      	cbz	r3, 8001f88 <__sinit+0x14>
 8001f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f84:	f7ff bff0 	b.w	8001f68 <__sinit_lock_release>
 8001f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <__sinit+0x68>)
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <__sinit+0x6c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	bf08      	it	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	bf08      	it	eq
 8001fa0:	61a3      	streq	r3, [r4, #24]
 8001fa2:	f000 f81f 	bl	8001fe4 <__sfp>
 8001fa6:	6060      	str	r0, [r4, #4]
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 f81b 	bl	8001fe4 <__sfp>
 8001fae:	60a0      	str	r0, [r4, #8]
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f000 f817 	bl	8001fe4 <__sfp>
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2104      	movs	r1, #4
 8001fba:	60e0      	str	r0, [r4, #12]
 8001fbc:	6860      	ldr	r0, [r4, #4]
 8001fbe:	f7ff ff81 	bl	8001ec4 <std>
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2109      	movs	r1, #9
 8001fc6:	68a0      	ldr	r0, [r4, #8]
 8001fc8:	f7ff ff7c 	bl	8001ec4 <std>
 8001fcc:	2202      	movs	r2, #2
 8001fce:	2112      	movs	r1, #18
 8001fd0:	68e0      	ldr	r0, [r4, #12]
 8001fd2:	f7ff ff77 	bl	8001ec4 <std>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61a3      	str	r3, [r4, #24]
 8001fda:	e7d1      	b.n	8001f80 <__sinit+0xc>
 8001fdc:	0800251c 	.word	0x0800251c
 8001fe0:	08001f0d 	.word	0x08001f0d

08001fe4 <__sfp>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	4607      	mov	r7, r0
 8001fe8:	f7ff ffac 	bl	8001f44 <__sfp_lock_acquire>
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <__sfp+0x84>)
 8001fee:	681e      	ldr	r6, [r3, #0]
 8001ff0:	69b3      	ldr	r3, [r6, #24]
 8001ff2:	b913      	cbnz	r3, 8001ffa <__sfp+0x16>
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f7ff ffbd 	bl	8001f74 <__sinit>
 8001ffa:	3648      	adds	r6, #72	; 0x48
 8001ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002000:	3b01      	subs	r3, #1
 8002002:	d503      	bpl.n	800200c <__sfp+0x28>
 8002004:	6833      	ldr	r3, [r6, #0]
 8002006:	b30b      	cbz	r3, 800204c <__sfp+0x68>
 8002008:	6836      	ldr	r6, [r6, #0]
 800200a:	e7f7      	b.n	8001ffc <__sfp+0x18>
 800200c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002010:	b9d5      	cbnz	r5, 8002048 <__sfp+0x64>
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <__sfp+0x88>)
 8002014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002018:	60e3      	str	r3, [r4, #12]
 800201a:	6665      	str	r5, [r4, #100]	; 0x64
 800201c:	f000 f847 	bl	80020ae <__retarget_lock_init_recursive>
 8002020:	f7ff ff96 	bl	8001f50 <__sfp_lock_release>
 8002024:	2208      	movs	r2, #8
 8002026:	4629      	mov	r1, r5
 8002028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800202c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002030:	6025      	str	r5, [r4, #0]
 8002032:	61a5      	str	r5, [r4, #24]
 8002034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002038:	f7ff fd48 	bl	8001acc <memset>
 800203c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002044:	4620      	mov	r0, r4
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002048:	3468      	adds	r4, #104	; 0x68
 800204a:	e7d9      	b.n	8002000 <__sfp+0x1c>
 800204c:	2104      	movs	r1, #4
 800204e:	4638      	mov	r0, r7
 8002050:	f7ff ff62 	bl	8001f18 <__sfmoreglue>
 8002054:	4604      	mov	r4, r0
 8002056:	6030      	str	r0, [r6, #0]
 8002058:	2800      	cmp	r0, #0
 800205a:	d1d5      	bne.n	8002008 <__sfp+0x24>
 800205c:	f7ff ff78 	bl	8001f50 <__sfp_lock_release>
 8002060:	230c      	movs	r3, #12
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	e7ee      	b.n	8002044 <__sfp+0x60>
 8002066:	bf00      	nop
 8002068:	0800251c 	.word	0x0800251c
 800206c:	ffff0001 	.word	0xffff0001

08002070 <_fwalk_reent>:
 8002070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002074:	4606      	mov	r6, r0
 8002076:	4688      	mov	r8, r1
 8002078:	2700      	movs	r7, #0
 800207a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800207e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002082:	f1b9 0901 	subs.w	r9, r9, #1
 8002086:	d505      	bpl.n	8002094 <_fwalk_reent+0x24>
 8002088:	6824      	ldr	r4, [r4, #0]
 800208a:	2c00      	cmp	r4, #0
 800208c:	d1f7      	bne.n	800207e <_fwalk_reent+0xe>
 800208e:	4638      	mov	r0, r7
 8002090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002094:	89ab      	ldrh	r3, [r5, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d907      	bls.n	80020aa <_fwalk_reent+0x3a>
 800209a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800209e:	3301      	adds	r3, #1
 80020a0:	d003      	beq.n	80020aa <_fwalk_reent+0x3a>
 80020a2:	4629      	mov	r1, r5
 80020a4:	4630      	mov	r0, r6
 80020a6:	47c0      	blx	r8
 80020a8:	4307      	orrs	r7, r0
 80020aa:	3568      	adds	r5, #104	; 0x68
 80020ac:	e7e9      	b.n	8002082 <_fwalk_reent+0x12>

080020ae <__retarget_lock_init_recursive>:
 80020ae:	4770      	bx	lr

080020b0 <__retarget_lock_acquire_recursive>:
 80020b0:	4770      	bx	lr

080020b2 <__retarget_lock_release_recursive>:
 80020b2:	4770      	bx	lr

080020b4 <__swhatbuf_r>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	460e      	mov	r6, r1
 80020b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020bc:	4614      	mov	r4, r2
 80020be:	2900      	cmp	r1, #0
 80020c0:	461d      	mov	r5, r3
 80020c2:	b096      	sub	sp, #88	; 0x58
 80020c4:	da08      	bge.n	80020d8 <__swhatbuf_r+0x24>
 80020c6:	2200      	movs	r2, #0
 80020c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020cc:	602a      	str	r2, [r5, #0]
 80020ce:	061a      	lsls	r2, r3, #24
 80020d0:	d410      	bmi.n	80020f4 <__swhatbuf_r+0x40>
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	e00e      	b.n	80020f6 <__swhatbuf_r+0x42>
 80020d8:	466a      	mov	r2, sp
 80020da:	f000 f9a3 	bl	8002424 <_fstat_r>
 80020de:	2800      	cmp	r0, #0
 80020e0:	dbf1      	blt.n	80020c6 <__swhatbuf_r+0x12>
 80020e2:	9a01      	ldr	r2, [sp, #4]
 80020e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020ec:	425a      	negs	r2, r3
 80020ee:	415a      	adcs	r2, r3
 80020f0:	602a      	str	r2, [r5, #0]
 80020f2:	e7ee      	b.n	80020d2 <__swhatbuf_r+0x1e>
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	2000      	movs	r0, #0
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	b016      	add	sp, #88	; 0x58
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002100 <__smakebuf_r>:
 8002100:	898b      	ldrh	r3, [r1, #12]
 8002102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002104:	079d      	lsls	r5, r3, #30
 8002106:	4606      	mov	r6, r0
 8002108:	460c      	mov	r4, r1
 800210a:	d507      	bpl.n	800211c <__smakebuf_r+0x1c>
 800210c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	6123      	str	r3, [r4, #16]
 8002114:	2301      	movs	r3, #1
 8002116:	6163      	str	r3, [r4, #20]
 8002118:	b002      	add	sp, #8
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	466a      	mov	r2, sp
 800211e:	ab01      	add	r3, sp, #4
 8002120:	f7ff ffc8 	bl	80020b4 <__swhatbuf_r>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	4605      	mov	r5, r0
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f891 	bl	8002250 <_malloc_r>
 800212e:	b948      	cbnz	r0, 8002144 <__smakebuf_r+0x44>
 8002130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002134:	059a      	lsls	r2, r3, #22
 8002136:	d4ef      	bmi.n	8002118 <__smakebuf_r+0x18>
 8002138:	f023 0303 	bic.w	r3, r3, #3
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	81a3      	strh	r3, [r4, #12]
 8002142:	e7e3      	b.n	800210c <__smakebuf_r+0xc>
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <__smakebuf_r+0x7c>)
 8002146:	62b3      	str	r3, [r6, #40]	; 0x28
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	6020      	str	r0, [r4, #0]
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	9b00      	ldr	r3, [sp, #0]
 8002154:	6120      	str	r0, [r4, #16]
 8002156:	6163      	str	r3, [r4, #20]
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	b15b      	cbz	r3, 8002174 <__smakebuf_r+0x74>
 800215c:	4630      	mov	r0, r6
 800215e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002162:	f000 f971 	bl	8002448 <_isatty_r>
 8002166:	b128      	cbz	r0, 8002174 <__smakebuf_r+0x74>
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	89a0      	ldrh	r0, [r4, #12]
 8002176:	4305      	orrs	r5, r0
 8002178:	81a5      	strh	r5, [r4, #12]
 800217a:	e7cd      	b.n	8002118 <__smakebuf_r+0x18>
 800217c:	08001f0d 	.word	0x08001f0d

08002180 <_free_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4605      	mov	r5, r0
 8002184:	2900      	cmp	r1, #0
 8002186:	d040      	beq.n	800220a <_free_r+0x8a>
 8002188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800218c:	1f0c      	subs	r4, r1, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfb8      	it	lt
 8002192:	18e4      	addlt	r4, r4, r3
 8002194:	f000 f97a 	bl	800248c <__malloc_lock>
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <_free_r+0x8c>)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	b933      	cbnz	r3, 80021ac <_free_r+0x2c>
 800219e:	6063      	str	r3, [r4, #4]
 80021a0:	6014      	str	r4, [r2, #0]
 80021a2:	4628      	mov	r0, r5
 80021a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021a8:	f000 b976 	b.w	8002498 <__malloc_unlock>
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	d908      	bls.n	80021c2 <_free_r+0x42>
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	1821      	adds	r1, r4, r0
 80021b4:	428b      	cmp	r3, r1
 80021b6:	bf01      	itttt	eq
 80021b8:	6819      	ldreq	r1, [r3, #0]
 80021ba:	685b      	ldreq	r3, [r3, #4]
 80021bc:	1809      	addeq	r1, r1, r0
 80021be:	6021      	streq	r1, [r4, #0]
 80021c0:	e7ed      	b.n	800219e <_free_r+0x1e>
 80021c2:	461a      	mov	r2, r3
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	b10b      	cbz	r3, 80021cc <_free_r+0x4c>
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	d9fa      	bls.n	80021c2 <_free_r+0x42>
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	1850      	adds	r0, r2, r1
 80021d0:	42a0      	cmp	r0, r4
 80021d2:	d10b      	bne.n	80021ec <_free_r+0x6c>
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	4401      	add	r1, r0
 80021d8:	1850      	adds	r0, r2, r1
 80021da:	4283      	cmp	r3, r0
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	d1e0      	bne.n	80021a2 <_free_r+0x22>
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4401      	add	r1, r0
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	e7da      	b.n	80021a2 <_free_r+0x22>
 80021ec:	d902      	bls.n	80021f4 <_free_r+0x74>
 80021ee:	230c      	movs	r3, #12
 80021f0:	602b      	str	r3, [r5, #0]
 80021f2:	e7d6      	b.n	80021a2 <_free_r+0x22>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	1821      	adds	r1, r4, r0
 80021f8:	428b      	cmp	r3, r1
 80021fa:	bf01      	itttt	eq
 80021fc:	6819      	ldreq	r1, [r3, #0]
 80021fe:	685b      	ldreq	r3, [r3, #4]
 8002200:	1809      	addeq	r1, r1, r0
 8002202:	6021      	streq	r1, [r4, #0]
 8002204:	6063      	str	r3, [r4, #4]
 8002206:	6054      	str	r4, [r2, #4]
 8002208:	e7cb      	b.n	80021a2 <_free_r+0x22>
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	20000138 	.word	0x20000138

08002210 <sbrk_aligned>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	4e0e      	ldr	r6, [pc, #56]	; (800224c <sbrk_aligned+0x3c>)
 8002214:	460c      	mov	r4, r1
 8002216:	6831      	ldr	r1, [r6, #0]
 8002218:	4605      	mov	r5, r0
 800221a:	b911      	cbnz	r1, 8002222 <sbrk_aligned+0x12>
 800221c:	f000 f88c 	bl	8002338 <_sbrk_r>
 8002220:	6030      	str	r0, [r6, #0]
 8002222:	4621      	mov	r1, r4
 8002224:	4628      	mov	r0, r5
 8002226:	f000 f887 	bl	8002338 <_sbrk_r>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d00a      	beq.n	8002244 <sbrk_aligned+0x34>
 800222e:	1cc4      	adds	r4, r0, #3
 8002230:	f024 0403 	bic.w	r4, r4, #3
 8002234:	42a0      	cmp	r0, r4
 8002236:	d007      	beq.n	8002248 <sbrk_aligned+0x38>
 8002238:	1a21      	subs	r1, r4, r0
 800223a:	4628      	mov	r0, r5
 800223c:	f000 f87c 	bl	8002338 <_sbrk_r>
 8002240:	3001      	adds	r0, #1
 8002242:	d101      	bne.n	8002248 <sbrk_aligned+0x38>
 8002244:	f04f 34ff 	mov.w	r4, #4294967295
 8002248:	4620      	mov	r0, r4
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	2000013c 	.word	0x2000013c

08002250 <_malloc_r>:
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	1ccd      	adds	r5, r1, #3
 8002256:	f025 0503 	bic.w	r5, r5, #3
 800225a:	3508      	adds	r5, #8
 800225c:	2d0c      	cmp	r5, #12
 800225e:	bf38      	it	cc
 8002260:	250c      	movcc	r5, #12
 8002262:	2d00      	cmp	r5, #0
 8002264:	4607      	mov	r7, r0
 8002266:	db01      	blt.n	800226c <_malloc_r+0x1c>
 8002268:	42a9      	cmp	r1, r5
 800226a:	d905      	bls.n	8002278 <_malloc_r+0x28>
 800226c:	230c      	movs	r3, #12
 800226e:	2600      	movs	r6, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4630      	mov	r0, r6
 8002274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002278:	4e2e      	ldr	r6, [pc, #184]	; (8002334 <_malloc_r+0xe4>)
 800227a:	f000 f907 	bl	800248c <__malloc_lock>
 800227e:	6833      	ldr	r3, [r6, #0]
 8002280:	461c      	mov	r4, r3
 8002282:	bb34      	cbnz	r4, 80022d2 <_malloc_r+0x82>
 8002284:	4629      	mov	r1, r5
 8002286:	4638      	mov	r0, r7
 8002288:	f7ff ffc2 	bl	8002210 <sbrk_aligned>
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	4604      	mov	r4, r0
 8002290:	d14d      	bne.n	800232e <_malloc_r+0xde>
 8002292:	6834      	ldr	r4, [r6, #0]
 8002294:	4626      	mov	r6, r4
 8002296:	2e00      	cmp	r6, #0
 8002298:	d140      	bne.n	800231c <_malloc_r+0xcc>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	4631      	mov	r1, r6
 800229e:	4638      	mov	r0, r7
 80022a0:	eb04 0803 	add.w	r8, r4, r3
 80022a4:	f000 f848 	bl	8002338 <_sbrk_r>
 80022a8:	4580      	cmp	r8, r0
 80022aa:	d13a      	bne.n	8002322 <_malloc_r+0xd2>
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	3503      	adds	r5, #3
 80022b0:	1a6d      	subs	r5, r5, r1
 80022b2:	f025 0503 	bic.w	r5, r5, #3
 80022b6:	3508      	adds	r5, #8
 80022b8:	2d0c      	cmp	r5, #12
 80022ba:	bf38      	it	cc
 80022bc:	250c      	movcc	r5, #12
 80022be:	4638      	mov	r0, r7
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7ff ffa5 	bl	8002210 <sbrk_aligned>
 80022c6:	3001      	adds	r0, #1
 80022c8:	d02b      	beq.n	8002322 <_malloc_r+0xd2>
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	442b      	add	r3, r5
 80022ce:	6023      	str	r3, [r4, #0]
 80022d0:	e00e      	b.n	80022f0 <_malloc_r+0xa0>
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	1b52      	subs	r2, r2, r5
 80022d6:	d41e      	bmi.n	8002316 <_malloc_r+0xc6>
 80022d8:	2a0b      	cmp	r2, #11
 80022da:	d916      	bls.n	800230a <_malloc_r+0xba>
 80022dc:	1961      	adds	r1, r4, r5
 80022de:	42a3      	cmp	r3, r4
 80022e0:	6025      	str	r5, [r4, #0]
 80022e2:	bf18      	it	ne
 80022e4:	6059      	strne	r1, [r3, #4]
 80022e6:	6863      	ldr	r3, [r4, #4]
 80022e8:	bf08      	it	eq
 80022ea:	6031      	streq	r1, [r6, #0]
 80022ec:	5162      	str	r2, [r4, r5]
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	4638      	mov	r0, r7
 80022f2:	f104 060b 	add.w	r6, r4, #11
 80022f6:	f000 f8cf 	bl	8002498 <__malloc_unlock>
 80022fa:	f026 0607 	bic.w	r6, r6, #7
 80022fe:	1d23      	adds	r3, r4, #4
 8002300:	1af2      	subs	r2, r6, r3
 8002302:	d0b6      	beq.n	8002272 <_malloc_r+0x22>
 8002304:	1b9b      	subs	r3, r3, r6
 8002306:	50a3      	str	r3, [r4, r2]
 8002308:	e7b3      	b.n	8002272 <_malloc_r+0x22>
 800230a:	6862      	ldr	r2, [r4, #4]
 800230c:	42a3      	cmp	r3, r4
 800230e:	bf0c      	ite	eq
 8002310:	6032      	streq	r2, [r6, #0]
 8002312:	605a      	strne	r2, [r3, #4]
 8002314:	e7ec      	b.n	80022f0 <_malloc_r+0xa0>
 8002316:	4623      	mov	r3, r4
 8002318:	6864      	ldr	r4, [r4, #4]
 800231a:	e7b2      	b.n	8002282 <_malloc_r+0x32>
 800231c:	4634      	mov	r4, r6
 800231e:	6876      	ldr	r6, [r6, #4]
 8002320:	e7b9      	b.n	8002296 <_malloc_r+0x46>
 8002322:	230c      	movs	r3, #12
 8002324:	4638      	mov	r0, r7
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	f000 f8b6 	bl	8002498 <__malloc_unlock>
 800232c:	e7a1      	b.n	8002272 <_malloc_r+0x22>
 800232e:	6025      	str	r5, [r4, #0]
 8002330:	e7de      	b.n	80022f0 <_malloc_r+0xa0>
 8002332:	bf00      	nop
 8002334:	20000138 	.word	0x20000138

08002338 <_sbrk_r>:
 8002338:	b538      	push	{r3, r4, r5, lr}
 800233a:	2300      	movs	r3, #0
 800233c:	4d05      	ldr	r5, [pc, #20]	; (8002354 <_sbrk_r+0x1c>)
 800233e:	4604      	mov	r4, r0
 8002340:	4608      	mov	r0, r1
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	f7fe f9f8 	bl	8000738 <_sbrk>
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	d102      	bne.n	8002352 <_sbrk_r+0x1a>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	b103      	cbz	r3, 8002352 <_sbrk_r+0x1a>
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	20000140 	.word	0x20000140

08002358 <__sread>:
 8002358:	b510      	push	{r4, lr}
 800235a:	460c      	mov	r4, r1
 800235c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002360:	f000 f8a0 	bl	80024a4 <_read_r>
 8002364:	2800      	cmp	r0, #0
 8002366:	bfab      	itete	ge
 8002368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800236a:	89a3      	ldrhlt	r3, [r4, #12]
 800236c:	181b      	addge	r3, r3, r0
 800236e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002372:	bfac      	ite	ge
 8002374:	6563      	strge	r3, [r4, #84]	; 0x54
 8002376:	81a3      	strhlt	r3, [r4, #12]
 8002378:	bd10      	pop	{r4, pc}

0800237a <__swrite>:
 800237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800237e:	461f      	mov	r7, r3
 8002380:	898b      	ldrh	r3, [r1, #12]
 8002382:	4605      	mov	r5, r0
 8002384:	05db      	lsls	r3, r3, #23
 8002386:	460c      	mov	r4, r1
 8002388:	4616      	mov	r6, r2
 800238a:	d505      	bpl.n	8002398 <__swrite+0x1e>
 800238c:	2302      	movs	r3, #2
 800238e:	2200      	movs	r2, #0
 8002390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002394:	f000 f868 	bl	8002468 <_lseek_r>
 8002398:	89a3      	ldrh	r3, [r4, #12]
 800239a:	4632      	mov	r2, r6
 800239c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a0:	81a3      	strh	r3, [r4, #12]
 80023a2:	4628      	mov	r0, r5
 80023a4:	463b      	mov	r3, r7
 80023a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023ae:	f000 b817 	b.w	80023e0 <_write_r>

080023b2 <__sseek>:
 80023b2:	b510      	push	{r4, lr}
 80023b4:	460c      	mov	r4, r1
 80023b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ba:	f000 f855 	bl	8002468 <_lseek_r>
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	bf15      	itete	ne
 80023c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80023c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023ce:	81a3      	strheq	r3, [r4, #12]
 80023d0:	bf18      	it	ne
 80023d2:	81a3      	strhne	r3, [r4, #12]
 80023d4:	bd10      	pop	{r4, pc}

080023d6 <__sclose>:
 80023d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023da:	f000 b813 	b.w	8002404 <_close_r>
	...

080023e0 <_write_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	2200      	movs	r2, #0
 80023ea:	4d05      	ldr	r5, [pc, #20]	; (8002400 <_write_r+0x20>)
 80023ec:	602a      	str	r2, [r5, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f7fe f956 	bl	80006a0 <_write>
 80023f4:	1c43      	adds	r3, r0, #1
 80023f6:	d102      	bne.n	80023fe <_write_r+0x1e>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	b103      	cbz	r3, 80023fe <_write_r+0x1e>
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	20000140 	.word	0x20000140

08002404 <_close_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	2300      	movs	r3, #0
 8002408:	4d05      	ldr	r5, [pc, #20]	; (8002420 <_close_r+0x1c>)
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	602b      	str	r3, [r5, #0]
 8002410:	f7fe f962 	bl	80006d8 <_close>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_close_r+0x1a>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_close_r+0x1a>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	20000140 	.word	0x20000140

08002424 <_fstat_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	2300      	movs	r3, #0
 8002428:	4d06      	ldr	r5, [pc, #24]	; (8002444 <_fstat_r+0x20>)
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	602b      	str	r3, [r5, #0]
 8002432:	f7fe f95c 	bl	80006ee <_fstat>
 8002436:	1c43      	adds	r3, r0, #1
 8002438:	d102      	bne.n	8002440 <_fstat_r+0x1c>
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	b103      	cbz	r3, 8002440 <_fstat_r+0x1c>
 800243e:	6023      	str	r3, [r4, #0]
 8002440:	bd38      	pop	{r3, r4, r5, pc}
 8002442:	bf00      	nop
 8002444:	20000140 	.word	0x20000140

08002448 <_isatty_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	2300      	movs	r3, #0
 800244c:	4d05      	ldr	r5, [pc, #20]	; (8002464 <_isatty_r+0x1c>)
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	f7fe f95a 	bl	800070c <_isatty>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_isatty_r+0x1a>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_isatty_r+0x1a>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	20000140 	.word	0x20000140

08002468 <_lseek_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	2200      	movs	r2, #0
 8002472:	4d05      	ldr	r5, [pc, #20]	; (8002488 <_lseek_r+0x20>)
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f7fe f952 	bl	8000720 <_lseek>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_lseek_r+0x1e>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	b103      	cbz	r3, 8002486 <_lseek_r+0x1e>
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	20000140 	.word	0x20000140

0800248c <__malloc_lock>:
 800248c:	4801      	ldr	r0, [pc, #4]	; (8002494 <__malloc_lock+0x8>)
 800248e:	f7ff be0f 	b.w	80020b0 <__retarget_lock_acquire_recursive>
 8002492:	bf00      	nop
 8002494:	20000134 	.word	0x20000134

08002498 <__malloc_unlock>:
 8002498:	4801      	ldr	r0, [pc, #4]	; (80024a0 <__malloc_unlock+0x8>)
 800249a:	f7ff be0a 	b.w	80020b2 <__retarget_lock_release_recursive>
 800249e:	bf00      	nop
 80024a0:	20000134 	.word	0x20000134

080024a4 <_read_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	4d05      	ldr	r5, [pc, #20]	; (80024c4 <_read_r+0x20>)
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fe f8d7 	bl	8000666 <_read>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_read_r+0x1e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_read_r+0x1e>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	20000140 	.word	0x20000140

080024c8 <_init>:
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ca:	bf00      	nop
 80024cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ce:	bc08      	pop	{r3}
 80024d0:	469e      	mov	lr, r3
 80024d2:	4770      	bx	lr

080024d4 <_fini>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr
