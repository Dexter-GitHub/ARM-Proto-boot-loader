
arm_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a5c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022960  08011c48  08011c48  00021c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080345a8  080345a8  00050228  2**0
                  CONTENTS
  4 .ARM          00000000  080345a8  080345a8  00050228  2**0
                  CONTENTS
  5 .preinit_array 00000000  080345a8  080345a8  00050228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080345a8  080345a8  000445a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080345ac  080345ac  000445ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  080345b0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b4  20000228  080347d8  00050228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200045dc  080347d8  000545dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193bb  00000000  00000000  00050251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424a  00000000  00000000  0006960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0006d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0006ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002069f  00000000  00000000  00070288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b77  00000000  00000000  00090927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8911  00000000  00000000  000b149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159daf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007168  00000000  00000000  00159e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000228 	.word	0x20000228
 8000204:	00000000 	.word	0x00000000
 8000208:	08011c2c 	.word	0x08011c2c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000022c 	.word	0x2000022c
 8000224:	08011c2c 	.word	0x08011c2c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <SWITCH_GetStatus>:
#include "main.h"
#include "bsp.h"

const GPIO_PinState SWITCH_GetStatus(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW_IN1_GPIO_Port, SW_IN1_Pin);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <SWITCH_GetStatus+0x14>)
 8000cb8:	f004 fd74 	bl	80057a4 <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <Get_MacAddress>:
 * @brief  24AA02E48 Internal MAC Address Get
 * @param  MAC Buffer pointer
 * @return ok = 0, error : -1
 */
int32_t Get_MacAddress(uint8_t *mac)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	6078      	str	r0, [r7, #4]
    uint8_t wBuf = EUI48_NODE_ADDRES;
 8000cd0:	23fa      	movs	r3, #250	; 0xfa
 8000cd2:	74fb      	strb	r3, [r7, #19]
    uint8_t rBuf[MAC_ADDR_LEN] = {0,};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	823b      	strh	r3, [r7, #16]
    int32_t ret = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    
    if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c2, DEV_24AA02E48_ADDR, (uint8_t *)&wBuf, sizeof(wBuf), 1000)) {
 8000ce0:	f107 0213 	add.w	r2, r7, #19
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	21a0      	movs	r1, #160	; 0xa0
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <Get_MacAddress+0x78>)
 8000cf0:	f004 fecc 	bl	8005a8c <HAL_I2C_Master_Transmit>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <Get_MacAddress+0x3a>
        ret = -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e018      	b.n	8000d34 <Get_MacAddress+0x6c>
    }
    else {
        if (HAL_OK != HAL_I2C_Master_Receive(&hi2c2, DEV_24AA02E48_ADDR | CTRL_BYTE_RW_BIT, rBuf, MAC_ADDR_LEN, 1000)) {
 8000d02:	f107 020c 	add.w	r2, r7, #12
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	21a1      	movs	r1, #161	; 0xa1
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <Get_MacAddress+0x78>)
 8000d12:	f004 ffb9 	bl	8005c88 <HAL_I2C_Master_Receive>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <Get_MacAddress+0x5c>
            ret = -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e007      	b.n	8000d34 <Get_MacAddress+0x6c>
        }
        else {
            memcpy(mac, rBuf, MAC_ADDR_LEN);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	6010      	str	r0, [r2, #0]
 8000d30:	889b      	ldrh	r3, [r3, #4]
 8000d32:	8093      	strh	r3, [r2, #4]
        }
    }
    
    return ret;
 8000d34:	697b      	ldr	r3, [r7, #20]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200033d8 	.word	0x200033d8

08000d44 <ftpc_init>:

struct ftpc ftpc;
struct Command Command;

void ftpc_init(uint8_t * src_ip)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	ftpc.dsock_mode = FTPC_ACTIVE_MODE;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <ftpc_init+0x54>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	711a      	strb	r2, [r3, #4]

	ftpc_local_ip.cVal[0] = src_ip[0];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <ftpc_init+0x58>)
 8000d58:	701a      	strb	r2, [r3, #0]
	ftpc_local_ip.cVal[1] = src_ip[1];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <ftpc_init+0x58>)
 8000d60:	705a      	strb	r2, [r3, #1]
	ftpc_local_ip.cVal[2] = src_ip[2];
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	789a      	ldrb	r2, [r3, #2]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <ftpc_init+0x58>)
 8000d68:	709a      	strb	r2, [r3, #2]
	ftpc_local_ip.cVal[3] = src_ip[3];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	78da      	ldrb	r2, [r3, #3]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <ftpc_init+0x58>)
 8000d70:	70da      	strb	r2, [r3, #3]
	ftpc_local_port = 35000;	// 35000
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <ftpc_init+0x5c>)
 8000d74:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000d78:	801a      	strh	r2, [r3, #0]
    
	strcpy(ftpc.workingdir, "/");
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <ftpc_init+0x60>)
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <ftpc_init+0x64>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	8013      	strh	r3, [r2, #0]
	socket(CTRL_SOCK, Sn_MR_TCP, FTP_destport, 0x00); 
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <ftpc_init+0x68>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f001 fb7a 	bl	8002484 <socket>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000025c 	.word	0x2000025c
 8000d9c:	20000250 	.word	0x20000250
 8000da0:	20000254 	.word	0x20000254
 8000da4:	20000261 	.word	0x20000261
 8000da8:	08011c48 	.word	0x08011c48
 8000dac:	20000000 	.word	0x20000000

08000db0 <ftpc_proc>:

uint8_t ftpc_proc(uint8_t * dbuf, uint8_t *user, uint8_t *pw, uint8_t *destIp)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b09d      	sub	sp, #116	; 0x74
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
    uint8_t dat[50] = {0,};
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	222e      	movs	r2, #46	; 0x2e
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00c f9ac 	bl	800d128 <memset>
    uint16_t size = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint32_t send_byte, recv_byte;
	uint32_t blocklen;
	uint32_t remain_filesize;
	uint32_t remain_datasize;
    long ret = SOCK_OK;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* CONTROL SOCKET */		
    switch (getSn_SR(CTRL_SOCK)) {
 8000dda:	f44f 7052 	mov.w	r0, #840	; 0x348
 8000dde:	f000 fed7 	bl	8001b90 <WIZCHIP_READ>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b1c      	cmp	r3, #28
 8000de6:	f200 829c 	bhi.w	8001322 <ftpc_proc+0x572>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <ftpc_proc+0x40>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	080012f5 	.word	0x080012f5
 8000df4:	08001323 	.word	0x08001323
 8000df8:	08001323 	.word	0x08001323
 8000dfc:	08001323 	.word	0x08001323
 8000e00:	08001323 	.word	0x08001323
 8000e04:	08001323 	.word	0x08001323
 8000e08:	08001323 	.word	0x08001323
 8000e0c:	08001323 	.word	0x08001323
 8000e10:	08001323 	.word	0x08001323
 8000e14:	08001323 	.word	0x08001323
 8000e18:	08001323 	.word	0x08001323
 8000e1c:	08001323 	.word	0x08001323
 8000e20:	08001323 	.word	0x08001323
 8000e24:	08001323 	.word	0x08001323
 8000e28:	08001323 	.word	0x08001323
 8000e2c:	08001323 	.word	0x08001323
 8000e30:	08001323 	.word	0x08001323
 8000e34:	08001323 	.word	0x08001323
 8000e38:	08001323 	.word	0x08001323
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	08001323 	.word	0x08001323
 8000e44:	08001323 	.word	0x08001323
 8000e48:	08001323 	.word	0x08001323
 8000e4c:	08000ea1 	.word	0x08000ea1
 8000e50:	08001323 	.word	0x08001323
 8000e54:	08001323 	.word	0x08001323
 8000e58:	08001323 	.word	0x08001323
 8000e5c:	08001323 	.word	0x08001323
 8000e60:	080012cd 	.word	0x080012cd
        case SOCK_INIT: 
            printf("\r\nFTP: Connected Wating...\r\n");
 8000e64:	48aa      	ldr	r0, [pc, #680]	; (8001110 <ftpc_proc+0x360>)
 8000e66:	f00d f86f 	bl	800df48 <puts>
			if ((ret = connect(CTRL_SOCK, destIp, FTP_destport)) != SOCK_OK) {
 8000e6a:	4baa      	ldr	r3, [pc, #680]	; (8001114 <ftpc_proc+0x364>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	2002      	movs	r0, #2
 8000e74:	f001 fce4 	bl	8002840 <connect>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d006      	beq.n	8000e90 <ftpc_proc+0xe0>
				printf("FTP: Connect error.(%d)\r\n", CTRL_SOCK);
 8000e82:	2102      	movs	r1, #2
 8000e84:	48a4      	ldr	r0, [pc, #656]	; (8001118 <ftpc_proc+0x368>)
 8000e86:	f00c ffc5 	bl	800de14 <iprintf>
				return ret;
 8000e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e3d4      	b.n	800163a <ftpc_proc+0x88a>
			}            
			connect_state_control_ftpc = 0;
 8000e90:	4ba2      	ldr	r3, [pc, #648]	; (800111c <ftpc_proc+0x36c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
			printf("FTP:Connectting...(%d)\r\n", CTRL_SOCK);
 8000e96:	2102      	movs	r1, #2
 8000e98:	48a1      	ldr	r0, [pc, #644]	; (8001120 <ftpc_proc+0x370>)
 8000e9a:	f00c ffbb 	bl	800de14 <iprintf>
			break;
 8000e9e:	e243      	b.n	8001328 <ftpc_proc+0x578>
        
        case SOCK_ESTABLISHED:
            if (!connect_state_control_ftpc) {
 8000ea0:	4b9e      	ldr	r3, [pc, #632]	; (800111c <ftpc_proc+0x36c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <ftpc_proc+0x10e>
    			printf("FTP:Connected(%d)\r\n", CTRL_SOCK);
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	489e      	ldr	r0, [pc, #632]	; (8001124 <ftpc_proc+0x374>)
 8000eac:	f00c ffb2 	bl	800de14 <iprintf>
    			strcpy(ftpc.workingdir, "/");
 8000eb0:	4a9d      	ldr	r2, [pc, #628]	; (8001128 <ftpc_proc+0x378>)
 8000eb2:	4b9e      	ldr	r3, [pc, #632]	; (800112c <ftpc_proc+0x37c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	8013      	strh	r3, [r2, #0]
    			connect_state_control_ftpc = 1;
 8000eb8:	4b98      	ldr	r3, [pc, #608]	; (800111c <ftpc_proc+0x36c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
    		}           
			
            /* SOCKET DATA RECEIVE */
            if ((size = getSn_RX_RSR(CTRL_SOCK)) > 0) {
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f001 f80b 	bl	8001eda <getSn_RX_RSR>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8000eca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 81f6 	beq.w	80012c0 <ftpc_proc+0x510>
				memset(dbuf, 0, _MAX_SS);
 8000ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed8:	2100      	movs	r1, #0
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f00c f924 	bl	800d128 <memset>
                if (size > _MAX_SS) 
 8000ee0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ee8:	d903      	bls.n	8000ef2 <ftpc_proc+0x142>
                   size = _MAX_SS - 1;
 8000eea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    			ret = recv(CTRL_SOCK, dbuf, size);
 8000ef2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68f9      	ldr	r1, [r7, #12]
 8000efa:	2002      	movs	r0, #2
 8000efc:	f001 feec 	bl	8002cd8 <recv>
 8000f00:	64f8      	str	r0, [r7, #76]	; 0x4c
                
    			dbuf[ret] = '\0';
 8000f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    			if (ret != size) {
 8000f0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d012      	beq.n	8000f3c <ftpc_proc+0x18c>
    				if (ret == SOCK_BUSY) return 0;
 8000f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <ftpc_proc+0x170>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e38c      	b.n	800163a <ftpc_proc+0x88a>
                    
    				if (ret < 0) {
 8000f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da0a      	bge.n	8000f3c <ftpc_proc+0x18c>
    					printf("%d:recv() error:%ld\r\n", CTRL_SOCK, ret);
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4881      	ldr	r0, [pc, #516]	; (8001130 <ftpc_proc+0x380>)
 8000f2c:	f00c ff72 	bl	800de14 <iprintf>
    					close(CTRL_SOCK);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f001 fbbd 	bl	80026b0 <close>
    					return ret;
 8000f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	e37e      	b.n	800163a <ftpc_proc+0x88a>
    				}
    			}

    			for (int i = 0; i < strlen((char *)dbuf); i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8000f40:	e01c      	b.n	8000f7c <ftpc_proc+0x1cc>
                    if (dbuf[i] == '\r' && (strlen((char *)dbuf)-2) != i && dbuf[i+1] != '\n')
 8000f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b0d      	cmp	r3, #13
 8000f4c:	d113      	bne.n	8000f76 <ftpc_proc+0x1c6>
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff f96a 	bl	8000228 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	1e9a      	subs	r2, r3, #2
 8000f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d00b      	beq.n	8000f76 <ftpc_proc+0x1c6>
 8000f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f60:	3301      	adds	r3, #1
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	d004      	beq.n	8000f76 <ftpc_proc+0x1c6>
                        dbuf[i] = ' ';                    
 8000f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	2220      	movs	r2, #32
 8000f74:	701a      	strb	r2, [r3, #0]
    			for (int i = 0; i < strlen((char *)dbuf); i++) {
 8000f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f78:	3301      	adds	r3, #1
 8000f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff f953 	bl	8000228 <strlen>
 8000f82:	4602      	mov	r2, r0
 8000f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d8db      	bhi.n	8000f42 <ftpc_proc+0x192>
    			}
 
	            // printf("Rcvd Command : %s", dbuf);
                ftpc_parser(dbuf, user, pw);
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 fcd0 	bl	8001934 <ftpc_parser>
				if (gDataPutGetStart) {                
 8000f94:	4b67      	ldr	r3, [pc, #412]	; (8001134 <ftpc_proc+0x384>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 8191 	beq.w	80012c0 <ftpc_proc+0x510>
					switch (Command.Second) {
 8000f9e:	4b66      	ldr	r3, [pc, #408]	; (8001138 <ftpc_proc+0x388>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d052      	beq.n	800104c <ftpc_proc+0x29c>
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	f300 818c 	bgt.w	80012c4 <ftpc_proc+0x514>
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d003      	beq.n	8000fb8 <ftpc_proc+0x208>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	f000 8101 	beq.w	80011b8 <ftpc_proc+0x408>
							gDataPutGetStart = 0;
							Command.Second = s_nocmd;
							disconnect(DATA_SOCK);
							break;

						default: break;                        
 8000fb6:	e185      	b.n	80012c4 <ftpc_proc+0x514>
							if ((size = getSn_RX_RSR(DATA_SOCK)) > 0) {   // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 ff8e 	bl	8001eda <getSn_RX_RSR>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8000fc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 817d 	beq.w	80012c8 <ftpc_proc+0x518>
								memset(dbuf, 0, _MAX_SS);
 8000fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f00c f8a7 	bl	800d128 <memset>
								if (size > _MAX_SS) size = _MAX_SS - 1;
 8000fda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fe2:	d903      	bls.n	8000fec <ftpc_proc+0x23c>
 8000fe4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fe8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
								ret = recv(DATA_SOCK, dbuf, size);
 8000fec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68f9      	ldr	r1, [r7, #12]
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f001 fe6f 	bl	8002cd8 <recv>
 8000ffa:	64f8      	str	r0, [r7, #76]	; 0x4c
								dbuf[ret] = '\0';
 8000ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
								if (ret != size) {
 8001006:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800100a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800100c:	429a      	cmp	r2, r3
 800100e:	d012      	beq.n	8001036 <ftpc_proc+0x286>
									if (ret == SOCK_BUSY) return 0;
 8001010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <ftpc_proc+0x26a>
 8001016:	2300      	movs	r3, #0
 8001018:	e30f      	b.n	800163a <ftpc_proc+0x88a>
									if (ret < 0) {
 800101a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101c:	2b00      	cmp	r3, #0
 800101e:	da0a      	bge.n	8001036 <ftpc_proc+0x286>
										printf("%d:recv() error:%ld\r\n", CTRL_SOCK, ret);
 8001020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001022:	2102      	movs	r1, #2
 8001024:	4842      	ldr	r0, [pc, #264]	; (8001130 <ftpc_proc+0x380>)
 8001026:	f00c fef5 	bl	800de14 <iprintf>
										close(DATA_SOCK);
 800102a:	2003      	movs	r0, #3
 800102c:	f001 fb40 	bl	80026b0 <close>
										return ret;
 8001030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001032:	b2db      	uxtb	r3, r3
 8001034:	e301      	b.n	800163a <ftpc_proc+0x88a>
								printf("Recv Data: \n\r%s\r\n", dbuf);
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	4840      	ldr	r0, [pc, #256]	; (800113c <ftpc_proc+0x38c>)
 800103a:	f00c feeb 	bl	800de14 <iprintf>
								gDataPutGetStart = 0;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <ftpc_proc+0x384>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
								Command.Second = s_nocmd;											
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <ftpc_proc+0x388>)
 8001046:	2200      	movs	r2, #0
 8001048:	705a      	strb	r2, [r3, #1]
							break;
 800104a:	e13d      	b.n	80012c8 <ftpc_proc+0x518>
							printf("get waiting...\r\n");
 800104c:	483c      	ldr	r0, [pc, #240]	; (8001140 <ftpc_proc+0x390>)
 800104e:	f00c ff7b 	bl	800df48 <puts>
							if (strlen(ftpc.workingdir) == 1)
 8001052:	4835      	ldr	r0, [pc, #212]	; (8001128 <ftpc_proc+0x378>)
 8001054:	f7ff f8e8 	bl	8000228 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <ftpc_proc+0x2c0>
								sprintf(ftpc.filename, "%s", ftpc_getDestFileName());
 800105e:	f000 fb33 	bl	80016c8 <ftpc_getDestFileName>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4937      	ldr	r1, [pc, #220]	; (8001144 <ftpc_proc+0x394>)
 8001068:	4837      	ldr	r0, [pc, #220]	; (8001148 <ftpc_proc+0x398>)
 800106a:	f00c ff79 	bl	800df60 <siprintf>
 800106e:	e007      	b.n	8001080 <ftpc_proc+0x2d0>
								sprintf(ftpc.filename, "%s/%s", ftpc.workingdir, ftpc_getDestFileName());
 8001070:	f000 fb2a 	bl	80016c8 <ftpc_getDestFileName>
 8001074:	4603      	mov	r3, r0
 8001076:	4a2c      	ldr	r2, [pc, #176]	; (8001128 <ftpc_proc+0x378>)
 8001078:	4934      	ldr	r1, [pc, #208]	; (800114c <ftpc_proc+0x39c>)
 800107a:	4833      	ldr	r0, [pc, #204]	; (8001148 <ftpc_proc+0x398>)
 800107c:	f00c ff70 	bl	800df60 <siprintf>
							ftpc.fr = f_open(&(ftpc.fil), (const char *)ftpc.filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001080:	220a      	movs	r2, #10
 8001082:	4931      	ldr	r1, [pc, #196]	; (8001148 <ftpc_proc+0x398>)
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <ftpc_proc+0x3a0>)
 8001086:	f00a f94b 	bl	800b320 <f_open>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <ftpc_proc+0x3a4>)
 8001090:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
							if (ftpc.fr == FR_OK) {								
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <ftpc_proc+0x3a4>)
 8001096:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 8084 	bne.w	80011a8 <ftpc_proc+0x3f8>
									if ((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0) {
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 ff1a 	bl	8001eda <getSn_RX_RSR>
 80010a6:	4603      	mov	r3, r0
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
 80010aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d063      	beq.n	8001178 <ftpc_proc+0x3c8>
											if (remain_datasize > _MAX_SS)	
 80010b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010b6:	d903      	bls.n	80010c0 <ftpc_proc+0x310>
												recv_byte = _MAX_SS;
 80010b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010be:	e001      	b.n	80010c4 <ftpc_proc+0x314>
												recv_byte = remain_datasize;
 80010c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c2:	65fb      	str	r3, [r7, #92]	; 0x5c
											ret = recv(DATA_SOCK, dbuf, recv_byte);											
 80010c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	2003      	movs	r0, #3
 80010ce:	f001 fe03 	bl	8002cd8 <recv>
 80010d2:	64f8      	str	r0, [r7, #76]	; 0x4c
											ftpc.fr = f_write(&(ftpc.fil), (const void *)dbuf, (UINT)ret, (UINT *)&blocklen);
 80010d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	481c      	ldr	r0, [pc, #112]	; (8001150 <ftpc_proc+0x3a0>)
 80010de:	f00a fd0b 	bl	800baf8 <f_write>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <ftpc_proc+0x3a4>)
 80010e8:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
											remain_datasize -= blocklen;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
											if (ftpc.fr != FR_OK) {
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <ftpc_proc+0x3a4>)
 80010f6:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <ftpc_proc+0x356>
												printf("f_write failed\r\n");
 80010fe:	4816      	ldr	r0, [pc, #88]	; (8001158 <ftpc_proc+0x3a8>)
 8001100:	f00c ff22 	bl	800df48 <puts>
												break;
 8001104:	e02b      	b.n	800115e <ftpc_proc+0x3ae>
											if (remain_datasize <= 0) break;
 8001106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001108:	2b00      	cmp	r3, #0
 800110a:	d027      	beq.n	800115c <ftpc_proc+0x3ac>
											if (remain_datasize > _MAX_SS)	
 800110c:	e7d0      	b.n	80010b0 <ftpc_proc+0x300>
 800110e:	bf00      	nop
 8001110:	08011c4c 	.word	0x08011c4c
 8001114:	20000000 	.word	0x20000000
 8001118:	08011c68 	.word	0x08011c68
 800111c:	20000256 	.word	0x20000256
 8001120:	08011c84 	.word	0x08011c84
 8001124:	08011ca0 	.word	0x08011ca0
 8001128:	20000261 	.word	0x20000261
 800112c:	08011c48 	.word	0x08011c48
 8001130:	08011cb4 	.word	0x08011cb4
 8001134:	2000025a 	.word	0x2000025a
 8001138:	20000b5c 	.word	0x20000b5c
 800113c:	08011ccc 	.word	0x08011ccc
 8001140:	08011ce0 	.word	0x08011ce0
 8001144:	08011cf0 	.word	0x08011cf0
 8001148:	200002c5 	.word	0x200002c5
 800114c:	08011cf4 	.word	0x08011cf4
 8001150:	2000032c 	.word	0x2000032c
 8001154:	2000025c 	.word	0x2000025c
 8001158:	08011cfc 	.word	0x08011cfc
											if (remain_datasize <= 0) break;
 800115c:	bf00      	nop
										if (ftpc.fr != FR_OK) {
 800115e:	4b9d      	ldr	r3, [pc, #628]	; (80013d4 <ftpc_proc+0x624>)
 8001160:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <ftpc_proc+0x3c0>
											printf("f_write failed\r\n");
 8001168:	489b      	ldr	r0, [pc, #620]	; (80013d8 <ftpc_proc+0x628>)
 800116a:	f00c feed 	bl	800df48 <puts>
											break;
 800116e:	e00c      	b.n	800118a <ftpc_proc+0x3da>
										printf("#");
 8001170:	2023      	movs	r0, #35	; 0x23
 8001172:	f00c fe67 	bl	800de44 <putchar>
 8001176:	e793      	b.n	80010a0 <ftpc_proc+0x2f0>
										if (getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED) break;
 8001178:	f44f 705a 	mov.w	r0, #872	; 0x368
 800117c:	f000 fd08 	bl	8001b90 <WIZCHIP_READ>
 8001180:	4603      	mov	r3, r0
 8001182:	2b17      	cmp	r3, #23
 8001184:	d100      	bne.n	8001188 <ftpc_proc+0x3d8>
									if ((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0) {
 8001186:	e78b      	b.n	80010a0 <ftpc_proc+0x2f0>
										if (getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED) break;
 8001188:	bf00      	nop
								printf("\r\nFile write finished\r\n");
 800118a:	4894      	ldr	r0, [pc, #592]	; (80013dc <ftpc_proc+0x62c>)
 800118c:	f00c fedc 	bl	800df48 <puts>
								ftpc.fr = f_close(&(ftpc.fil));
 8001190:	4893      	ldr	r0, [pc, #588]	; (80013e0 <ftpc_proc+0x630>)
 8001192:	f00a ff18 	bl	800bfc6 <f_close>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b8e      	ldr	r3, [pc, #568]	; (80013d4 <ftpc_proc+0x624>)
 800119c:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
								gDataPutGetStart = 0;
 80011a0:	4b90      	ldr	r3, [pc, #576]	; (80013e4 <ftpc_proc+0x634>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
							break;
 80011a6:	e090      	b.n	80012ca <ftpc_proc+0x51a>
								printf("File Open Error: %d\r\n", ftpc.fr);    												
 80011a8:	4b8a      	ldr	r3, [pc, #552]	; (80013d4 <ftpc_proc+0x624>)
 80011aa:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 80011ae:	4619      	mov	r1, r3
 80011b0:	488d      	ldr	r0, [pc, #564]	; (80013e8 <ftpc_proc+0x638>)
 80011b2:	f00c fe2f 	bl	800de14 <iprintf>
							break;
 80011b6:	e088      	b.n	80012ca <ftpc_proc+0x51a>
							printf("file name = %s\r\n", ftpc_getSouceFileName());
 80011b8:	f000 fa7c 	bl	80016b4 <ftpc_getSouceFileName>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	488a      	ldr	r0, [pc, #552]	; (80013ec <ftpc_proc+0x63c>)
 80011c2:	f00c fe27 	bl	800de14 <iprintf>
							if (strlen(ftpc.workingdir) == 1)
 80011c6:	488a      	ldr	r0, [pc, #552]	; (80013f0 <ftpc_proc+0x640>)
 80011c8:	f7ff f82e 	bl	8000228 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <ftpc_proc+0x434>
								sprintf(ftpc.filename, "%s", (uint8_t *)ftpc_getSouceFileName());
 80011d2:	f000 fa6f 	bl	80016b4 <ftpc_getSouceFileName>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4986      	ldr	r1, [pc, #536]	; (80013f4 <ftpc_proc+0x644>)
 80011dc:	4886      	ldr	r0, [pc, #536]	; (80013f8 <ftpc_proc+0x648>)
 80011de:	f00c febf 	bl	800df60 <siprintf>
 80011e2:	e007      	b.n	80011f4 <ftpc_proc+0x444>
								sprintf(ftpc.filename, "%s/%s", ftpc.workingdir, (uint8_t *)ftpc_getSouceFileName());
 80011e4:	f000 fa66 	bl	80016b4 <ftpc_getSouceFileName>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a81      	ldr	r2, [pc, #516]	; (80013f0 <ftpc_proc+0x640>)
 80011ec:	4983      	ldr	r1, [pc, #524]	; (80013fc <ftpc_proc+0x64c>)
 80011ee:	4882      	ldr	r0, [pc, #520]	; (80013f8 <ftpc_proc+0x648>)
 80011f0:	f00c feb6 	bl	800df60 <siprintf>
							ftpc.fr = f_open(&(ftpc.fil), (const char *)ftpc.filename, FA_READ);
 80011f4:	2201      	movs	r2, #1
 80011f6:	4980      	ldr	r1, [pc, #512]	; (80013f8 <ftpc_proc+0x648>)
 80011f8:	4879      	ldr	r0, [pc, #484]	; (80013e0 <ftpc_proc+0x630>)
 80011fa:	f00a f891 	bl	800b320 <f_open>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <ftpc_proc+0x624>)
 8001204:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
							if (ftpc.fr == FR_OK) {
 8001208:	4b72      	ldr	r3, [pc, #456]	; (80013d4 <ftpc_proc+0x624>)
 800120a:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 800120e:	2b00      	cmp	r3, #0
 8001210:	d13d      	bne.n	800128e <ftpc_proc+0x4de>
								remain_filesize = f_size(&(ftpc.fil));
 8001212:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <ftpc_proc+0x624>)
 8001214:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
 8001218:	65bb      	str	r3, [r7, #88]	; 0x58
									memset(dbuf, 0, _MAX_SS);
 800121a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121e:	2100      	movs	r1, #0
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f00b ff81 	bl	800d128 <memset>
									if (remain_filesize > _MAX_SS)
 8001226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800122c:	d903      	bls.n	8001236 <ftpc_proc+0x486>
										send_byte = _MAX_SS;
 800122e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
 8001234:	e001      	b.n	800123a <ftpc_proc+0x48a>
										send_byte = remain_filesize;
 8001236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001238:	663b      	str	r3, [r7, #96]	; 0x60
									ftpc.fr = f_read(&(ftpc.fil), (void *)dbuf, send_byte , (UINT *)&blocklen);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	4867      	ldr	r0, [pc, #412]	; (80013e0 <ftpc_proc+0x630>)
 8001244:	f00a faed 	bl	800b822 <f_read>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <ftpc_proc+0x624>)
 800124e:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
									if (ftpc.fr != FR_OK) break;
 8001252:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <ftpc_proc+0x624>)
 8001254:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10e      	bne.n	800127a <ftpc_proc+0x4ca>
									send(DATA_SOCK, dbuf, blocklen);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2003      	movs	r0, #3
 8001266:	f001 fc3d 	bl	8002ae4 <send>
									remain_filesize -= blocklen;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	65bb      	str	r3, [r7, #88]	; 0x58
								} while (remain_filesize != 0);
 8001272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1d0      	bne.n	800121a <ftpc_proc+0x46a>
 8001278:	e000      	b.n	800127c <ftpc_proc+0x4cc>
									if (ftpc.fr != FR_OK) break;
 800127a:	bf00      	nop
								ftpc.fr = f_close(&(ftpc.fil));
 800127c:	4858      	ldr	r0, [pc, #352]	; (80013e0 <ftpc_proc+0x630>)
 800127e:	f00a fea2 	bl	800bfc6 <f_close>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <ftpc_proc+0x624>)
 8001288:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 800128c:	e00e      	b.n	80012ac <ftpc_proc+0x4fc>
								printf("File Open Error: %d\r\n", ftpc.fr);
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <ftpc_proc+0x624>)
 8001290:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 8001294:	4619      	mov	r1, r3
 8001296:	4854      	ldr	r0, [pc, #336]	; (80013e8 <ftpc_proc+0x638>)
 8001298:	f00c fdbc 	bl	800de14 <iprintf>
								ftpc.fr = f_close(&(ftpc.fil));
 800129c:	4850      	ldr	r0, [pc, #320]	; (80013e0 <ftpc_proc+0x630>)
 800129e:	f00a fe92 	bl	800bfc6 <f_close>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <ftpc_proc+0x624>)
 80012a8:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
							gDataPutGetStart = 0;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <ftpc_proc+0x634>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
							Command.Second = s_nocmd;
 80012b2:	4b53      	ldr	r3, [pc, #332]	; (8001400 <ftpc_proc+0x650>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
							disconnect(DATA_SOCK);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 fb9d 	bl	80029f8 <disconnect>
							break;
 80012be:	e004      	b.n	80012ca <ftpc_proc+0x51a>
					}
            	}  
 80012c0:	bf00      	nop
 80012c2:	e031      	b.n	8001328 <ftpc_proc+0x578>
						default: break;                        
 80012c4:	bf00      	nop
 80012c6:	e02f      	b.n	8001328 <ftpc_proc+0x578>
							break;
 80012c8:	bf00      	nop
            }
            break;
 80012ca:	e02d      	b.n	8001328 <ftpc_proc+0x578>

        case SOCK_CLOSE_WAIT:
            printf("FTP:CloseWait(%d)\r\n", CTRL_SOCK);
 80012cc:	2102      	movs	r1, #2
 80012ce:	484d      	ldr	r0, [pc, #308]	; (8001404 <ftpc_proc+0x654>)
 80012d0:	f00c fda0 	bl	800de14 <iprintf>
    		if ((ret = disconnect(CTRL_SOCK)) != SOCK_OK) return ret;            
 80012d4:	2002      	movs	r0, #2
 80012d6:	f001 fb8f 	bl	80029f8 <disconnect>
 80012da:	4603      	mov	r3, r0
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d002      	beq.n	80012ea <ftpc_proc+0x53a>
 80012e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	e1a7      	b.n	800163a <ftpc_proc+0x88a>
    		printf("FTP:Closed(%d)\r\n", CTRL_SOCK);    		         
 80012ea:	2102      	movs	r1, #2
 80012ec:	4846      	ldr	r0, [pc, #280]	; (8001408 <ftpc_proc+0x658>)
 80012ee:	f00c fd91 	bl	800de14 <iprintf>
    		break;
 80012f2:	e019      	b.n	8001328 <ftpc_proc+0x578>
            
    	case SOCK_CLOSED:
    		if ((ret = socket(CTRL_SOCK, Sn_MR_TCP, FTP_destport, SF_IO_NONBLOCK)) != CTRL_SOCK) {
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <ftpc_proc+0x65c>)
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2101      	movs	r1, #1
 80012fc:	2002      	movs	r0, #2
 80012fe:	f001 f8c1 	bl	8002484 <socket>
 8001302:	4603      	mov	r3, r0
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001308:	2b02      	cmp	r3, #2
 800130a:	d00c      	beq.n	8001326 <ftpc_proc+0x576>
    			printf("%d:socket() error:%ld\r\n", CTRL_SOCK, ret);
 800130c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800130e:	2102      	movs	r1, #2
 8001310:	483f      	ldr	r0, [pc, #252]	; (8001410 <ftpc_proc+0x660>)
 8001312:	f00c fd7f 	bl	800de14 <iprintf>
    			close(CTRL_SOCK);
 8001316:	2002      	movs	r0, #2
 8001318:	f001 f9ca 	bl	80026b0 <close>
    			return ret;
 800131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131e:	b2db      	uxtb	r3, r3
 8001320:	e18b      	b.n	800163a <ftpc_proc+0x88a>
    		}
    		break;          
            
    	default: break;
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <ftpc_proc+0x578>
    		break;          
 8001326:	bf00      	nop
    }

	if (gDataSockReady) {    
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <ftpc_proc+0x664>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d04f      	beq.n	80013d0 <ftpc_proc+0x620>
		gDataSockReady = 0;
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <ftpc_proc+0x664>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
		switch (Command.First) {
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <ftpc_proc+0x650>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d031      	beq.n	80013a2 <ftpc_proc+0x5f2>
 800133e:	2b03      	cmp	r3, #3
 8001340:	dc70      	bgt.n	8001424 <ftpc_proc+0x674>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d002      	beq.n	800134c <ftpc_proc+0x59c>
 8001346:	2b02      	cmp	r3, #2
 8001348:	d014      	beq.n	8001374 <ftpc_proc+0x5c4>
			case f_get:				
				sprintf((char *)dat, "RETR %s\r\n", ftpc_getSouceFileName());				
				send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
				break;
				
			default: break;
 800134a:	e06b      	b.n	8001424 <ftpc_proc+0x674>
				sprintf((char *)dat, "LIST\r\n");
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4931      	ldr	r1, [pc, #196]	; (8001418 <ftpc_proc+0x668>)
 8001352:	4618      	mov	r0, r3
 8001354:	f00c fe04 	bl	800df60 <siprintf>
				send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f7fe ff63 	bl	8000228 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	2002      	movs	r0, #2
 800136e:	f001 fbb9 	bl	8002ae4 <send>
				break;
 8001372:	e058      	b.n	8001426 <ftpc_proc+0x676>
				sprintf((char *)dat, "STOR %s\r\n", ftpc_getDestFileName());				
 8001374:	f000 f9a8 	bl	80016c8 <ftpc_getDestFileName>
 8001378:	4602      	mov	r2, r0
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <ftpc_proc+0x66c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f00c fded 	bl	800df60 <siprintf>
				send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff4c 	bl	8000228 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4619      	mov	r1, r3
 800139a:	2002      	movs	r0, #2
 800139c:	f001 fba2 	bl	8002ae4 <send>
				break;
 80013a0:	e041      	b.n	8001426 <ftpc_proc+0x676>
				sprintf((char *)dat, "RETR %s\r\n", ftpc_getSouceFileName());				
 80013a2:	f000 f987 	bl	80016b4 <ftpc_getSouceFileName>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	491c      	ldr	r1, [pc, #112]	; (8001420 <ftpc_proc+0x670>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00c fdd6 	bl	800df60 <siprintf>
				send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff35 	bl	8000228 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4619      	mov	r1, r3
 80013c8:	2002      	movs	r0, #2
 80013ca:	f001 fb8b 	bl	8002ae4 <send>
				break;
 80013ce:	e02a      	b.n	8001426 <ftpc_proc+0x676>
		}
	}    
 80013d0:	bf00      	nop
 80013d2:	e028      	b.n	8001426 <ftpc_proc+0x676>
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	08011cfc 	.word	0x08011cfc
 80013dc:	08011d0c 	.word	0x08011d0c
 80013e0:	2000032c 	.word	0x2000032c
 80013e4:	2000025a 	.word	0x2000025a
 80013e8:	08011d24 	.word	0x08011d24
 80013ec:	08011d3c 	.word	0x08011d3c
 80013f0:	20000261 	.word	0x20000261
 80013f4:	08011cf0 	.word	0x08011cf0
 80013f8:	200002c5 	.word	0x200002c5
 80013fc:	08011cf4 	.word	0x08011cf4
 8001400:	20000b5c 	.word	0x20000b5c
 8001404:	08011d50 	.word	0x08011d50
 8001408:	08011d64 	.word	0x08011d64
 800140c:	20000000 	.word	0x20000000
 8001410:	08011d78 	.word	0x08011d78
 8001414:	20000259 	.word	0x20000259
 8001418:	08011d90 	.word	0x08011d90
 800141c:	08011d98 	.word	0x08011d98
 8001420:	08011da4 	.word	0x08011da4
			default: break;
 8001424:	bf00      	nop

    /* DATA SOCKET */
    switch (getSn_SR(DATA_SOCK)) {        
 8001426:	f44f 705a 	mov.w	r0, #872	; 0x368
 800142a:	f000 fbb1 	bl	8001b90 <WIZCHIP_READ>
 800142e:	4603      	mov	r3, r0
 8001430:	2b1c      	cmp	r3, #28
 8001432:	f200 80fa 	bhi.w	800162a <ftpc_proc+0x87a>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <ftpc_proc+0x68c>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	0800156d 	.word	0x0800156d
 8001440:	0800162b 	.word	0x0800162b
 8001444:	0800162b 	.word	0x0800162b
 8001448:	0800162b 	.word	0x0800162b
 800144c:	0800162b 	.word	0x0800162b
 8001450:	0800162b 	.word	0x0800162b
 8001454:	0800162b 	.word	0x0800162b
 8001458:	0800162b 	.word	0x0800162b
 800145c:	0800162b 	.word	0x0800162b
 8001460:	0800162b 	.word	0x0800162b
 8001464:	0800162b 	.word	0x0800162b
 8001468:	0800162b 	.word	0x0800162b
 800146c:	0800162b 	.word	0x0800162b
 8001470:	0800162b 	.word	0x0800162b
 8001474:	0800162b 	.word	0x0800162b
 8001478:	0800162b 	.word	0x0800162b
 800147c:	0800162b 	.word	0x0800162b
 8001480:	0800162b 	.word	0x0800162b
 8001484:	0800162b 	.word	0x0800162b
 8001488:	080014cb 	.word	0x080014cb
 800148c:	0800162b 	.word	0x0800162b
 8001490:	0800162b 	.word	0x0800162b
 8001494:	0800162b 	.word	0x0800162b
 8001498:	080014b1 	.word	0x080014b1
 800149c:	0800162b 	.word	0x0800162b
 80014a0:	0800162b 	.word	0x0800162b
 80014a4:	0800162b 	.word	0x0800162b
 80014a8:	0800162b 	.word	0x0800162b
 80014ac:	08001557 	.word	0x08001557
        case SOCK_ESTABLISHED :            
            if (!connect_state_data_ftpc) {
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <ftpc_proc+0x894>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f040 80ba 	bne.w	800162e <ftpc_proc+0x87e>
                printf("%d: FTP Data socket Connected\r\n", DATA_SOCK);
 80014ba:	2103      	movs	r1, #3
 80014bc:	4862      	ldr	r0, [pc, #392]	; (8001648 <ftpc_proc+0x898>)
 80014be:	f00c fca9 	bl	800de14 <iprintf>
                connect_state_data_ftpc = 1;
 80014c2:	4b60      	ldr	r3, [pc, #384]	; (8001644 <ftpc_proc+0x894>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
            }     			          
            break;
 80014c8:	e0b1      	b.n	800162e <ftpc_proc+0x87e>
    
        case SOCK_INIT :
//	   		printf("%d:Opened\r\n", DATA_SOCK);
   			if (ftpc.dsock_mode == FTPC_ACTIVE_MODE) {
 80014ca:	4b60      	ldr	r3, [pc, #384]	; (800164c <ftpc_proc+0x89c>)
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d112      	bne.n	80014f8 <ftpc_proc+0x748>
   				if ((ret = listen(DATA_SOCK)) != SOCK_OK) {
 80014d2:	2003      	movs	r0, #3
 80014d4:	f001 f95a 	bl	800278c <listen>
 80014d8:	4603      	mov	r3, r0
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d006      	beq.n	80014f0 <ftpc_proc+0x740>
   					printf("%d:Listen error\r\n", DATA_SOCK);                   
 80014e2:	2103      	movs	r1, #3
 80014e4:	485a      	ldr	r0, [pc, #360]	; (8001650 <ftpc_proc+0x8a0>)
 80014e6:	f00c fc95 	bl	800de14 <iprintf>
   					return ret;
 80014ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	e0a4      	b.n	800163a <ftpc_proc+0x88a>
   				}
   				gDataSockReady = 1;
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <ftpc_proc+0x8a4>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e02a      	b.n	800154e <ftpc_proc+0x79e>
//	   			printf("%d:Listen ok\r\n", DATA_SOCK);
   			}
            else {
                printf("remote ip : %d.%d.%d.%d, port = %d\r\n", 
                       ftpc_remote_ip.cVal[0], ftpc_remote_ip.cVal[1], ftpc_remote_ip.cVal[2], 
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <ftpc_proc+0x8a8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
                printf("remote ip : %d.%d.%d.%d, port = %d\r\n", 
 80014fc:	4619      	mov	r1, r3
                       ftpc_remote_ip.cVal[0], ftpc_remote_ip.cVal[1], ftpc_remote_ip.cVal[2], 
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <ftpc_proc+0x8a8>)
 8001500:	785b      	ldrb	r3, [r3, #1]
                printf("remote ip : %d.%d.%d.%d, port = %d\r\n", 
 8001502:	4618      	mov	r0, r3
                       ftpc_remote_ip.cVal[0], ftpc_remote_ip.cVal[1], ftpc_remote_ip.cVal[2], 
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <ftpc_proc+0x8a8>)
 8001506:	789b      	ldrb	r3, [r3, #2]
                printf("remote ip : %d.%d.%d.%d, port = %d\r\n", 
 8001508:	461c      	mov	r4, r3
                       ftpc_remote_ip.cVal[3], ftpc_remote_port);
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <ftpc_proc+0x8a8>)
 800150c:	78db      	ldrb	r3, [r3, #3]
                printf("remote ip : %d.%d.%d.%d, port = %d\r\n", 
 800150e:	461a      	mov	r2, r3
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <ftpc_proc+0x8ac>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9200      	str	r2, [sp, #0]
 8001518:	4623      	mov	r3, r4
 800151a:	4602      	mov	r2, r0
 800151c:	4850      	ldr	r0, [pc, #320]	; (8001660 <ftpc_proc+0x8b0>)
 800151e:	f00c fc79 	bl	800de14 <iprintf>
                
   				if ((ret = connect(DATA_SOCK, ftpc_remote_ip.cVal, ftpc_remote_port)) != SOCK_OK) {
 8001522:	4b4e      	ldr	r3, [pc, #312]	; (800165c <ftpc_proc+0x8ac>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	494b      	ldr	r1, [pc, #300]	; (8001658 <ftpc_proc+0x8a8>)
 800152a:	2003      	movs	r0, #3
 800152c:	f001 f988 	bl	8002840 <connect>
 8001530:	4603      	mov	r3, r0
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	2b01      	cmp	r3, #1
 8001538:	d006      	beq.n	8001548 <ftpc_proc+0x798>
   					printf("%d:Connect error\r\n", DATA_SOCK);
 800153a:	2103      	movs	r1, #3
 800153c:	4849      	ldr	r0, [pc, #292]	; (8001664 <ftpc_proc+0x8b4>)
 800153e:	f00c fc69 	bl	800de14 <iprintf>
   					return ret;
 8001542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001544:	b2db      	uxtb	r3, r3
 8001546:	e078      	b.n	800163a <ftpc_proc+0x88a>
   				}
   				gDataSockReady = 1;
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <ftpc_proc+0x8a4>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
   			}
   			connect_state_data_ftpc = 0;
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <ftpc_proc+0x894>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
   			break;   
 8001554:	e070      	b.n	8001638 <ftpc_proc+0x888>
    	
        case SOCK_CLOSE_WAIT :
//	        printf("%d:CloseWait\r\n", DATA_SOCK);
			if ((ret = disconnect(DATA_SOCK)) != SOCK_OK)
 8001556:	2003      	movs	r0, #3
 8001558:	f001 fa4e 	bl	80029f8 <disconnect>
 800155c:	4603      	mov	r3, r0
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001562:	2b01      	cmp	r3, #1
 8001564:	d065      	beq.n	8001632 <ftpc_proc+0x882>
                return ret;
 8001566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001568:	b2db      	uxtb	r3, r3
 800156a:	e066      	b.n	800163a <ftpc_proc+0x88a>
//			printf("%d:Closed\r\n", DATA_SOCK);
            break;
            
   		case SOCK_CLOSED :
            if (ftpc.dsock_state == FTPC_DATASOCK_READY) {
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <ftpc_proc+0x89c>)
 800156e:	78db      	ldrb	r3, [r3, #3]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d160      	bne.n	8001636 <ftpc_proc+0x886>
   				if (ftpc.dsock_mode == FTPC_PASSIVE_MODE) {
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <ftpc_proc+0x89c>)
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d12b      	bne.n	80015d4 <ftpc_proc+0x824>
//	   					printf("%d:FTPDataStart, port : %d\r\n", DATA_SOCK, ftpc_local_port);
   					if ((ret = socket(DATA_SOCK, Sn_MR_TCP, ftpc_local_port, 0x0)) != DATA_SOCK) {
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <ftpc_proc+0x8b8>)
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	2101      	movs	r1, #1
 8001584:	2003      	movs	r0, #3
 8001586:	f000 ff7d 	bl	8002484 <socket>
 800158a:	4603      	mov	r3, r0
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800158e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001590:	2b03      	cmp	r3, #3
 8001592:	d00e      	beq.n	80015b2 <ftpc_proc+0x802>
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 8001594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001596:	2103      	movs	r1, #3
 8001598:	4834      	ldr	r0, [pc, #208]	; (800166c <ftpc_proc+0x8bc>)
 800159a:	f00c fc3b 	bl	800de14 <iprintf>
   						close(DATA_SOCK);
 800159e:	2003      	movs	r0, #3
 80015a0:	f001 f886 	bl	80026b0 <close>
                        printf("9. ret = %ld\r\n", ret);
 80015a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80015a6:	4832      	ldr	r0, [pc, #200]	; (8001670 <ftpc_proc+0x8c0>)
 80015a8:	f00c fc34 	bl	800de14 <iprintf>
   						return ret;
 80015ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e043      	b.n	800163a <ftpc_proc+0x88a>
   					}
   					ftpc_local_port++;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <ftpc_proc+0x8b8>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <ftpc_proc+0x8b8>)
 80015bc:	801a      	strh	r2, [r3, #0]
   					if (ftpc_local_port > 50000)
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <ftpc_proc+0x8b8>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d92b      	bls.n	8001622 <ftpc_proc+0x872>
   						ftpc_local_port = 35000;
 80015ca:	4b27      	ldr	r3, [pc, #156]	; (8001668 <ftpc_proc+0x8b8>)
 80015cc:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	e026      	b.n	8001622 <ftpc_proc+0x872>
   				}
                else {
//	   					printf("%d:FTPDataStart, port : %d\r\n", DATA_SOCK, ftpc_local_port);
   					if ((ret = socket(DATA_SOCK, Sn_MR_TCP, ftpc_local_port, 0x0)) != DATA_SOCK) {
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <ftpc_proc+0x8b8>)
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	2300      	movs	r3, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 ff51 	bl	8002484 <socket>
 80015e2:	4603      	mov	r3, r0
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d00a      	beq.n	8001602 <ftpc_proc+0x852>
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 80015ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ee:	2103      	movs	r1, #3
 80015f0:	481e      	ldr	r0, [pc, #120]	; (800166c <ftpc_proc+0x8bc>)
 80015f2:	f00c fc0f 	bl	800de14 <iprintf>
   						close(DATA_SOCK);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f001 f85a 	bl	80026b0 <close>
   						return ret;
 80015fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	e01b      	b.n	800163a <ftpc_proc+0x88a>
   					}
   					ftpc_local_port++;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <ftpc_proc+0x8b8>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <ftpc_proc+0x8b8>)
 800160c:	801a      	strh	r2, [r3, #0]
   					if (ftpc_local_port > 50000)
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <ftpc_proc+0x8b8>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001616:	4293      	cmp	r3, r2
 8001618:	d903      	bls.n	8001622 <ftpc_proc+0x872>
   						ftpc_local_port = 35000;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <ftpc_proc+0x8b8>)
 800161c:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001620:	801a      	strh	r2, [r3, #0]
   				}
   				ftpc.dsock_state = FTPC_DATASOCK_START;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <ftpc_proc+0x89c>)
 8001624:	2202      	movs	r2, #2
 8001626:	70da      	strb	r2, [r3, #3]
   			}
            break;
 8001628:	e005      	b.n	8001636 <ftpc_proc+0x886>
            
        default: break;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <ftpc_proc+0x888>
            break;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <ftpc_proc+0x888>
            break;
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <ftpc_proc+0x888>
            break;
 8001636:	bf00      	nop
    }

    return SOCK_OK;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	376c      	adds	r7, #108	; 0x6c
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	bf00      	nop
 8001644:	20000257 	.word	0x20000257
 8001648:	08011db0 	.word	0x08011db0
 800164c:	2000025c 	.word	0x2000025c
 8001650:	08011dd0 	.word	0x08011dd0
 8001654:	20000259 	.word	0x20000259
 8001658:	20000248 	.word	0x20000248
 800165c:	2000024c 	.word	0x2000024c
 8001660:	08011de4 	.word	0x08011de4
 8001664:	08011e0c 	.word	0x08011e0c
 8001668:	20000254 	.word	0x20000254
 800166c:	08011d78 	.word	0x08011d78
 8001670:	08011e20 	.word	0x08011e20

08001674 <ftpc_status>:

uint8_t ftpc_status(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    return gFtpServiceStart;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <ftpc_status+0x10>)
 800167a:	781b      	ldrb	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000244 	.word	0x20000244

08001688 <ftpc_setFileName>:

static uint8_t sourcFile[_MAX_SS];
static uint8_t destFile[_MAX_SS];
void ftpc_setFileName(uint8_t *sorce, uint8_t *dest)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    strcpy((char *)sourcFile, (char *)sorce);
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <ftpc_setFileName+0x24>)
 8001696:	f00c fc83 	bl	800dfa0 <strcpy>
    strcpy((char *)destFile, (char *)dest);    
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <ftpc_setFileName+0x28>)
 800169e:	f00c fc7f 	bl	800dfa0 <strcpy>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000b60 	.word	0x20000b60
 80016b0:	20001360 	.word	0x20001360

080016b4 <ftpc_getSouceFileName>:

uint8_t *ftpc_getSouceFileName(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
    return sourcFile;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <ftpc_getSouceFileName+0x10>)
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000b60 	.word	0x20000b60

080016c8 <ftpc_getDestFileName>:

uint8_t *ftpc_getDestFileName(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
    return destFile;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <ftpc_getDestFileName+0x10>)
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20001360 	.word	0x20001360

080016dc <ftpc_service>:

void ftpc_service(COMMAND cmd)
{
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	b0a7      	sub	sp, #156	; 0x9c
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
    uint8_t dat[50] = {0,};
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	; 0x54
 80016ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ee:	222e      	movs	r2, #46	; 0x2e
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b fd18 	bl	800d128 <memset>

	gFtpServiceStart = 0;
 80016f8:	4b87      	ldr	r3, [pc, #540]	; (8001918 <ftpc_service+0x23c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    switch (cmd) {
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f000 80b2 	beq.w	800186a <ftpc_service+0x18e>
 8001706:	2b02      	cmp	r3, #2
 8001708:	f300 8100 	bgt.w	800190c <ftpc_service+0x230>
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <ftpc_service+0x3a>
 8001710:	2b01      	cmp	r3, #1
 8001712:	d055      	beq.n	80017c0 <ftpc_service+0xe4>

    			gModeActivePassiveflag = 1;
    		}
            break;

        default: break;
 8001714:	e0fa      	b.n	800190c <ftpc_service+0x230>
            if (ftpc.dsock_mode == FTPC_PASSIVE_MODE) {
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <ftpc_service+0x240>)
 8001718:	791b      	ldrb	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <ftpc_service+0x70>
                sprintf((char *)dat, "PASV\r\n");
 800171e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001722:	497f      	ldr	r1, [pc, #508]	; (8001920 <ftpc_service+0x244>)
 8001724:	4618      	mov	r0, r3
 8001726:	f00c fc1b 	bl	800df60 <siprintf>
                send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 800172a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd7a 	bl	8000228 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800173c:	4619      	mov	r1, r3
 800173e:	2002      	movs	r0, #2
 8001740:	f001 f9d0 	bl	8002ae4 <send>
                Command.First = f_dir;
 8001744:	4b77      	ldr	r3, [pc, #476]	; (8001924 <ftpc_service+0x248>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
            break;
 800174a:	e0e0      	b.n	800190e <ftpc_service+0x232>
                ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 800174c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001750:	4619      	mov	r1, r3
 8001752:	2001      	movs	r0, #1
 8001754:	f001 fce8 	bl	8003128 <ctlnetwork>
                sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 8001758:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800175c:	461d      	mov	r5, r3
 800175e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001762:	461e      	mov	r6, r3
 8001764:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001768:	461a      	mov	r2, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));               
 800176a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
                sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 800176e:	4619      	mov	r1, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));               
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <ftpc_service+0x24c>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2db      	uxtb	r3, r3
                sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 800177a:	461c      	mov	r4, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));               
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <ftpc_service+0x24c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
                sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 8001782:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001786:	9303      	str	r3, [sp, #12]
 8001788:	9402      	str	r4, [sp, #8]
 800178a:	9101      	str	r1, [sp, #4]
 800178c:	9200      	str	r2, [sp, #0]
 800178e:	4633      	mov	r3, r6
 8001790:	462a      	mov	r2, r5
 8001792:	4966      	ldr	r1, [pc, #408]	; (800192c <ftpc_service+0x250>)
 8001794:	f00c fbe4 	bl	800df60 <siprintf>
                send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd43 	bl	8000228 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017aa:	4619      	mov	r1, r3
 80017ac:	2002      	movs	r0, #2
 80017ae:	f001 f999 	bl	8002ae4 <send>
                Command.First = f_dir;
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <ftpc_service+0x248>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
                gModeActivePassiveflag = 1;
 80017b8:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <ftpc_service+0x254>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
            break;
 80017be:	e0a6      	b.n	800190e <ftpc_service+0x232>
            if (ftpc.dsock_mode == FTPC_PASSIVE_MODE) {
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <ftpc_service+0x240>)
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d116      	bne.n	80017f6 <ftpc_service+0x11a>
            	sprintf((char *)dat, "PASV\r\n");
 80017c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017cc:	4954      	ldr	r1, [pc, #336]	; (8001920 <ftpc_service+0x244>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00c fbc6 	bl	800df60 <siprintf>
            	send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 80017d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd25 	bl	8000228 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e6:	4619      	mov	r1, r3
 80017e8:	2002      	movs	r0, #2
 80017ea:	f001 f97b 	bl	8002ae4 <send>
            	Command.First = f_get;
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <ftpc_service+0x248>)
 80017f0:	2203      	movs	r2, #3
 80017f2:	701a      	strb	r2, [r3, #0]
            break;
 80017f4:	e08b      	b.n	800190e <ftpc_service+0x232>
            	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	2001      	movs	r0, #1
 80017fe:	f001 fc93 	bl	8003128 <ctlnetwork>
            	sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 8001802:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001806:	461d      	mov	r5, r3
 8001808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800180c:	461e      	mov	r6, r3
 800180e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001812:	461a      	mov	r2, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));
 8001814:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
            	sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 8001818:	4619      	mov	r1, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));
 800181a:	4b43      	ldr	r3, [pc, #268]	; (8001928 <ftpc_service+0x24c>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2db      	uxtb	r3, r3
            	sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 8001824:	461c      	mov	r4, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port & 0x00ff));
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <ftpc_service+0x24c>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
            	sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2],
 800182c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	9402      	str	r4, [sp, #8]
 8001834:	9101      	str	r1, [sp, #4]
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	4633      	mov	r3, r6
 800183a:	462a      	mov	r2, r5
 800183c:	493b      	ldr	r1, [pc, #236]	; (800192c <ftpc_service+0x250>)
 800183e:	f00c fb8f 	bl	800df60 <siprintf>
            	send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001842:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fcee 	bl	8000228 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001854:	4619      	mov	r1, r3
 8001856:	2002      	movs	r0, #2
 8001858:	f001 f944 	bl	8002ae4 <send>
            	Command.First = f_get;
 800185c:	4b31      	ldr	r3, [pc, #196]	; (8001924 <ftpc_service+0x248>)
 800185e:	2203      	movs	r2, #3
 8001860:	701a      	strb	r2, [r3, #0]
            	gModeActivePassiveflag = 1;
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <ftpc_service+0x254>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
            break;
 8001868:	e051      	b.n	800190e <ftpc_service+0x232>
            if (ftpc.dsock_mode == FTPC_PASSIVE_MODE) {
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <ftpc_service+0x240>)
 800186c:	791b      	ldrb	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <ftpc_service+0x1c4>
    			sprintf((char *)dat, "PASV\r\n");
 8001872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001876:	492a      	ldr	r1, [pc, #168]	; (8001920 <ftpc_service+0x244>)
 8001878:	4618      	mov	r0, r3
 800187a:	f00c fb71 	bl	800df60 <siprintf>
    			send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 800187e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fcd0 	bl	8000228 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001890:	4619      	mov	r1, r3
 8001892:	2002      	movs	r0, #2
 8001894:	f001 f926 	bl	8002ae4 <send>
    			Command.First = f_put;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <ftpc_service+0x248>)
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
            break;
 800189e:	e036      	b.n	800190e <ftpc_service+0x232>
    			ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4619      	mov	r1, r3
 80018a6:	2001      	movs	r0, #1
 80018a8:	f001 fc3e 	bl	8003128 <ctlnetwork>
    			sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], 
 80018ac:	7cbb      	ldrb	r3, [r7, #18]
 80018ae:	461d      	mov	r5, r3
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	461e      	mov	r6, r3
 80018b4:	7d3b      	ldrb	r3, [r7, #20]
 80018b6:	461a      	mov	r2, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port&0x00ff));
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
    			sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], 
 80018ba:	4619      	mov	r1, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port&0x00ff));
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <ftpc_service+0x24c>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
    			sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], 
 80018c6:	461c      	mov	r4, r3
                        gWIZNETINFO.ip[3], (uint8_t)(ftpc_local_port>>8), (uint8_t)(ftpc_local_port&0x00ff));
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <ftpc_service+0x24c>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
    			sprintf((char *)dat, "PORT %d,%d,%d,%d,%d,%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], 
 80018ce:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9402      	str	r4, [sp, #8]
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	462a      	mov	r2, r5
 80018de:	4913      	ldr	r1, [pc, #76]	; (800192c <ftpc_service+0x250>)
 80018e0:	f00c fb3e 	bl	800df60 <siprintf>
    			send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 80018e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc9d 	bl	8000228 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f6:	4619      	mov	r1, r3
 80018f8:	2002      	movs	r0, #2
 80018fa:	f001 f8f3 	bl	8002ae4 <send>
    			Command.First = f_put;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <ftpc_service+0x248>)
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
    			gModeActivePassiveflag = 1;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <ftpc_service+0x254>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
            break;
 800190a:	e000      	b.n	800190e <ftpc_service+0x232>
        default: break;
 800190c:	bf00      	nop
    }
}
 800190e:	bf00      	nop
 8001910:	378c      	adds	r7, #140	; 0x8c
 8001912:	46bd      	mov	sp, r7
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001916:	bf00      	nop
 8001918:	20000244 	.word	0x20000244
 800191c:	2000025c 	.word	0x2000025c
 8001920:	08011e30 	.word	0x08011e30
 8001924:	20000b5c 	.word	0x20000b5c
 8001928:	20000254 	.word	0x20000254
 800192c:	08011e38 	.word	0x08011e38
 8001930:	20000258 	.word	0x20000258

08001934 <ftpc_parser>:

static char ftpc_parser(uint8_t * buf, uint8_t *user, uint8_t *pw)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
    uint16_t Responses;
	uint8_t dat[30]={0,};
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	831a      	strh	r2, [r3, #24]

	Responses = (buf[0]-'0')*100+(buf[1]-'0')*10+(buf[2]-'0');
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3b30      	subs	r3, #48	; 0x30
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4413      	add	r3, r2
 8001966:	461a      	mov	r2, r3
 8001968:	0091      	lsls	r1, r2, #2
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	3b30      	subs	r3, #48	; 0x30
 800197c:	b29b      	uxth	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	0089      	lsls	r1, r1, #2
 8001982:	440b      	add	r3, r1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	b29b      	uxth	r3, r3
 8001988:	4413      	add	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3302      	adds	r3, #2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b30      	subs	r3, #48	; 0x30
 800199a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	switch (Responses) {
 800199c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800199e:	f240 124b 	movw	r2, #331	; 0x14b
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d069      	beq.n	8001a7a <ftpc_parser+0x146>
 80019a6:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 80019aa:	f280 80d8 	bge.w	8001b5e <ftpc_parser+0x22a>
 80019ae:	2b96      	cmp	r3, #150	; 0x96
 80019b0:	f000 80a3 	beq.w	8001afa <ftpc_parser+0x1c6>
 80019b4:	2b96      	cmp	r3, #150	; 0x96
 80019b6:	f2c0 80d2 	blt.w	8001b5e <ftpc_parser+0x22a>
 80019ba:	2be6      	cmp	r3, #230	; 0xe6
 80019bc:	f300 80cf 	bgt.w	8001b5e <ftpc_parser+0x22a>
 80019c0:	2bc8      	cmp	r3, #200	; 0xc8
 80019c2:	f2c0 80cc 	blt.w	8001b5e <ftpc_parser+0x22a>
 80019c6:	3bc8      	subs	r3, #200	; 0xc8
 80019c8:	2b1e      	cmp	r3, #30
 80019ca:	f200 80c8 	bhi.w	8001b5e <ftpc_parser+0x22a>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <ftpc_parser+0xa0>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	08001ad5 	.word	0x08001ad5
 80019d8:	08001b5f 	.word	0x08001b5f
 80019dc:	08001b5f 	.word	0x08001b5f
 80019e0:	08001b5f 	.word	0x08001b5f
 80019e4:	08001b5f 	.word	0x08001b5f
 80019e8:	08001b5f 	.word	0x08001b5f
 80019ec:	08001b5f 	.word	0x08001b5f
 80019f0:	08001b5f 	.word	0x08001b5f
 80019f4:	08001b5f 	.word	0x08001b5f
 80019f8:	08001b5f 	.word	0x08001b5f
 80019fc:	08001b5f 	.word	0x08001b5f
 8001a00:	08001b5f 	.word	0x08001b5f
 8001a04:	08001b5f 	.word	0x08001b5f
 8001a08:	08001b5f 	.word	0x08001b5f
 8001a0c:	08001b5f 	.word	0x08001b5f
 8001a10:	08001b5f 	.word	0x08001b5f
 8001a14:	08001b5f 	.word	0x08001b5f
 8001a18:	08001b5f 	.word	0x08001b5f
 8001a1c:	08001b5f 	.word	0x08001b5f
 8001a20:	08001b5f 	.word	0x08001b5f
 8001a24:	08001a51 	.word	0x08001a51
 8001a28:	08001b5f 	.word	0x08001b5f
 8001a2c:	08001b5f 	.word	0x08001b5f
 8001a30:	08001b5f 	.word	0x08001b5f
 8001a34:	08001b5f 	.word	0x08001b5f
 8001a38:	08001b5f 	.word	0x08001b5f
 8001a3c:	08001b57 	.word	0x08001b57
 8001a40:	08001b5f 	.word	0x08001b5f
 8001a44:	08001b5f 	.word	0x08001b5f
 8001a48:	08001b5f 	.word	0x08001b5f
 8001a4c:	08001aa5 	.word	0x08001aa5
		/* Service ready for new user. */
		case R_220:	    
			sprintf((char *)dat, "USER %s\r\n", user);
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	4945      	ldr	r1, [pc, #276]	; (8001b6c <ftpc_parser+0x238>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00c fa81 	bl	800df60 <siprintf>
//	            printf("Send Command : %s", dat);            
			send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fbe0 	bl	8000228 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	2002      	movs	r0, #2
 8001a74:	f001 f836 	bl	8002ae4 <send>
			break;
 8001a78:	e072      	b.n	8001b60 <ftpc_parser+0x22c>

        case R_331:	    /* User name okay, need password. */
			sprintf((char *)dat, "PASS %s\r\n", pw);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	493b      	ldr	r1, [pc, #236]	; (8001b70 <ftpc_parser+0x23c>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f00c fa6c 	bl	800df60 <siprintf>
//	            printf("Send Command : %s", dat);
			send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fbcb 	bl	8000228 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f001 f821 	bl	8002ae4 <send>
			break;
 8001aa2:	e05d      	b.n	8001b60 <ftpc_parser+0x22c>

        case R_230:	    /* User logged in, proceed */
			sprintf((char *)dat, "TYPE %c\r\n", TransferAscii);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	4932      	ldr	r1, [pc, #200]	; (8001b74 <ftpc_parser+0x240>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c fa57 	bl	800df60 <siprintf>
			ftpc.type = FTPC_ASCII_TYPE;
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <ftpc_parser+0x244>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	709a      	strb	r2, [r3, #2]
//	            printf("Send Command : %s", dat);
			send(CTRL_SOCK, (uint8_t *)dat, strlen((char *)dat));
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fbb3 	bl	8000228 <strlen>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	2002      	movs	r0, #2
 8001ace:	f001 f809 	bl	8002ae4 <send>
			break;
 8001ad2:	e045      	b.n	8001b60 <ftpc_parser+0x22c>

        case R_200:			
			if ((ftpc.dsock_mode == FTPC_ACTIVE_MODE) && gModeActivePassiveflag) {
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <ftpc_parser+0x244>)
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10a      	bne.n	8001af2 <ftpc_parser+0x1be>
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <ftpc_parser+0x248>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <ftpc_parser+0x1be>
				ftpc.dsock_state = FTPC_DATASOCK_READY;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <ftpc_parser+0x244>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	70da      	strb	r2, [r3, #3]
				gModeActivePassiveflag = 0;
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <ftpc_parser+0x248>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			}
			else {        				
				gFtpServiceStart = 1;
            }
			break;
 8001af0:	e036      	b.n	8001b60 <ftpc_parser+0x22c>
				gFtpServiceStart = 1;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <ftpc_parser+0x24c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
			break;
 8001af8:	e032      	b.n	8001b60 <ftpc_parser+0x22c>

        case R_150:							
			switch (Command.First) {
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <ftpc_parser+0x250>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d010      	beq.n	8001b24 <ftpc_parser+0x1f0>
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	dc22      	bgt.n	8001b4c <ftpc_parser+0x218>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d002      	beq.n	8001b10 <ftpc_parser+0x1dc>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d014      	beq.n	8001b38 <ftpc_parser+0x204>
 8001b0e:	e01d      	b.n	8001b4c <ftpc_parser+0x218>
    			case f_dir:
    				Command.First = f_nocmd;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <ftpc_parser+0x250>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
    				Command.Second = s_dir;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <ftpc_parser+0x250>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	705a      	strb	r2, [r3, #1]
    				gDataPutGetStart = 1;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <ftpc_parser+0x254>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
    				break;
 8001b22:	e017      	b.n	8001b54 <ftpc_parser+0x220>
                
    			case f_get:
    				Command.First = f_nocmd;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <ftpc_parser+0x250>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    				Command.Second = s_get;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <ftpc_parser+0x250>)
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	705a      	strb	r2, [r3, #1]
    				gDataPutGetStart = 1;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <ftpc_parser+0x254>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    				break;
 8001b36:	e00d      	b.n	8001b54 <ftpc_parser+0x220>
                    
    			case f_put:
    				Command.First = f_nocmd;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <ftpc_parser+0x250>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
    				Command.Second = s_put;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <ftpc_parser+0x250>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	705a      	strb	r2, [r3, #1]
    				gDataPutGetStart = 1;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <ftpc_parser+0x254>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
    				break;
 8001b4a:	e003      	b.n	8001b54 <ftpc_parser+0x220>
                
    			default :
    				printf("Command.First = default\r\n");
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <ftpc_parser+0x258>)
 8001b4e:	f00c f9fb 	bl	800df48 <puts>
    				break;
 8001b52:	bf00      	nop
			}
			break;
 8001b54:	e004      	b.n	8001b60 <ftpc_parser+0x22c>
            
		/* Closing data connection. File transfer/abort successful */
		case R_226:			
			gFtpServiceStart = 1;			
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <ftpc_parser+0x24c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
			break;
 8001b5c:	e000      	b.n	8001b60 <ftpc_parser+0x22c>

        default: break;
 8001b5e:	bf00      	nop
    }

    return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	08011e54 	.word	0x08011e54
 8001b70:	08011e60 	.word	0x08011e60
 8001b74:	08011e6c 	.word	0x08011e6c
 8001b78:	2000025c 	.word	0x2000025c
 8001b7c:	20000258 	.word	0x20000258
 8001b80:	20000244 	.word	0x20000244
 8001b84:	20000b5c 	.word	0x20000b5c
 8001b88:	2000025a 	.word	0x2000025a
 8001b8c:	08011e78 	.word	0x08011e78

08001b90 <WIZCHIP_READ>:

/*-- @brief USER Callback Function Start --*/
/*-- @brief USER Callback Function End --*/

uint8_t WIZCHIP_READ(uint32_t AddrSel)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <WIZCHIP_READ+0x24>
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d114      	bne.n	8001bde <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	0c12      	lsrs	r2, r2, #16
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	0a12      	lsrs	r2, r2, #8
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4798      	blx	r3
 8001bdc:	e011      	b.n	8001c02 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f107 020c 	add.w	r2, r7, #12
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4798      	blx	r3
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <WIZCHIP_READ+0x94>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4798      	blx	r3
   
   return ret;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000004 	.word	0x20000004

08001c28 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d119      	bne.n	8001c84 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	0c12      	lsrs	r2, r2, #16
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	0a12      	lsrs	r2, r2, #8
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4610      	mov	r0, r2
 8001c76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4798      	blx	r3
 8001c82:	e013      	b.n	8001cac <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <WIZCHIP_WRITE+0x98>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	4798      	blx	r3
   
   return;
 8001cb8:	bf00      	nop
}
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <WIZCHIP_READ_BUF>:
         
void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <WIZCHIP_READ_BUF+0x2a>
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d126      	bne.n	8001d3c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	0c12      	lsrs	r2, r2, #16
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	0a12      	lsrs	r2, r2, #8
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4610      	mov	r0, r2
 8001d08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	4610      	mov	r0, r2
 8001d14:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	e00a      	b.n	8001d32 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	8afa      	ldrh	r2, [r7, #22]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	188c      	adds	r4, r1, r2
 8001d26:	4798      	blx	r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001d2c:	8afb      	ldrh	r3, [r7, #22]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	82fb      	strh	r3, [r7, #22]
 8001d32:	8afa      	ldrh	r2, [r7, #22]
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3f0      	bcc.n	8001d1c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001d3a:	e017      	b.n	8001d6c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f107 0210 	add.w	r2, r7, #16
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	4611      	mov	r1, r2
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001d72:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <WIZCHIP_READ_BUF+0xbc>)
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	4798      	blx	r3

   return ;
 8001d78:	bf00      	nop
}
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	20000004 	.word	0x20000004

08001d84 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d126      	bne.n	8001dfc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	0c12      	lsrs	r2, r2, #16
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	4610      	mov	r0, r2
 8001dba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	0a12      	lsrs	r2, r2, #8
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	82fb      	strh	r3, [r7, #22]
 8001dda:	e00a      	b.n	8001df2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	8afa      	ldrh	r2, [r7, #22]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	440a      	add	r2, r1
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	4610      	mov	r0, r2
 8001dea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001dec:	8afb      	ldrh	r3, [r7, #22]
 8001dee:	3301      	adds	r3, #1
 8001df0:	82fb      	strh	r3, [r7, #22]
 8001df2:	8afa      	ldrh	r2, [r7, #22]
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f0      	bcc.n	8001ddc <WIZCHIP_WRITE_BUF+0x58>
 8001dfa:	e017      	b.n	8001e2c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f107 0210 	add.w	r2, r7, #16
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	88fa      	ldrh	r2, [r7, #6]
 8001e26:	4611      	mov	r1, r2
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e32:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <WIZCHIP_WRITE_BUF+0xbc>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4798      	blx	r3

   return ;
 8001e38:	bf00      	nop
}
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000004 	.word	0x20000004

08001e44 <getSn_TX_FSR>:

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81fb      	strh	r3, [r7, #14]
 8001e52:	2300      	movs	r3, #0
 8001e54:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fe94 	bl	8001b90 <WIZCHIP_READ>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001e6c:	89bb      	ldrh	r3, [r7, #12]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29c      	uxth	r4, r3
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3301      	adds	r3, #1
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe86 	bl	8001b90 <WIZCHIP_READ>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4423      	add	r3, r4
 8001e8a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001e8c:	89bb      	ldrh	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3301      	adds	r3, #1
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe76 	bl	8001b90 <WIZCHIP_READ>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b29c      	uxth	r4, r3
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fe68 	bl	8001b90 <WIZCHIP_READ>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4423      	add	r3, r4
 8001ec6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001ec8:	89fa      	ldrh	r2, [r7, #14]
 8001eca:	89bb      	ldrh	r3, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1c2      	bne.n	8001e56 <getSn_TX_FSR+0x12>
   
   return val;
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}

08001eda <getSn_RX_RSR>:

uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001eda:	b590      	push	{r4, r7, lr}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	81fb      	strh	r3, [r7, #14]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fe49 	bl	8001b90 <WIZCHIP_READ>
 8001efe:	4603      	mov	r3, r0
 8001f00:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001f02:	89bb      	ldrh	r3, [r7, #12]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b29c      	uxth	r4, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fe3b 	bl	8001b90 <WIZCHIP_READ>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4423      	add	r3, r4
 8001f20:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01a      	beq.n	8001f5e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe2b 	bl	8001b90 <WIZCHIP_READ>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b29c      	uxth	r4, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3301      	adds	r3, #1
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe1d 	bl	8001b90 <WIZCHIP_READ>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4423      	add	r3, r4
 8001f5c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001f5e:	89fa      	ldrh	r2, [r7, #14]
 8001f60:	89bb      	ldrh	r3, [r7, #12]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d1c2      	bne.n	8001eec <getSn_RX_RSR+0x12>
   
   return val;
 8001f66:	89fb      	ldrh	r3, [r7, #14]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}

08001f70 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d048      	beq.n	8002020 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3301      	adds	r3, #1
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fdf8 	bl	8001b90 <WIZCHIP_READ>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29c      	uxth	r4, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3301      	adds	r3, #1
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fdeb 	bl	8001b90 <WIZCHIP_READ>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4423      	add	r3, r4
 8001fc0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001fc2:	89fb      	ldrh	r3, [r7, #14]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	79fa      	ldrb	r2, [r7, #7]
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	3202      	adds	r2, #2
 8001fcc:	00d2      	lsls	r2, r2, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	68b8      	ldr	r0, [r7, #8]
 8001fda:	f7ff fed3 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001fde:	89fa      	ldrh	r2, [r7, #14]
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f7ff fe12 	bl	8001c28 <WIZCHIP_WRITE>
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	3301      	adds	r3, #1
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002010:	461a      	mov	r2, r3
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff fe05 	bl	8001c28 <WIZCHIP_WRITE>
 800201e:	e000      	b.n	8002022 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002020:	bf00      	nop
}
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002040:	88bb      	ldrh	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d048      	beq.n	80020d8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3301      	adds	r3, #1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fd9c 	bl	8001b90 <WIZCHIP_READ>
 8002058:	4603      	mov	r3, r0
 800205a:	b29b      	uxth	r3, r3
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b29c      	uxth	r4, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3301      	adds	r3, #1
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fd8f 	bl	8001b90 <WIZCHIP_READ>
 8002072:	4603      	mov	r3, r0
 8002074:	b29b      	uxth	r3, r3
 8002076:	4423      	add	r3, r4
 8002078:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	3203      	adds	r2, #3
 8002084:	00d2      	lsls	r2, r2, #3
 8002086:	4413      	add	r3, r2
 8002088:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	461a      	mov	r2, r3
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f7ff fe17 	bl	8001cc4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002096:	89fa      	ldrh	r2, [r7, #14]
 8002098:	88bb      	ldrh	r3, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3301      	adds	r3, #1
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80020aa:	461a      	mov	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7ff fdb6 	bl	8001c28 <WIZCHIP_WRITE>
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3301      	adds	r3, #1
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80020c8:	461a      	mov	r2, r3
 80020ca:	89fb      	ldrh	r3, [r7, #14]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7ff fda9 	bl	8001c28 <WIZCHIP_WRITE>
 80020d6:	e000      	b.n	80020da <wiz_recv_data+0xb2>
   if(len == 0) return;
 80020d8:	bf00      	nop
}
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <W5500_Init>:
 * @brief  W5500 Initialization
 * @param  None
 * @return None
 */
void W5500_Init(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
    uint8_t memSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <W5500_Init+0x44>)
 80020e8:	463c      	mov	r4, r7
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
    W5500_DeSelect();
 80020f0:	f000 f9bc 	bl	800246c <W5500_DeSelect>
    
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <W5500_Init+0x48>)
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <W5500_Init+0x4c>)
 80020f8:	f000 ff0c 	bl	8002f14 <reg_wizchip_spi_cbfunc>
    reg_wizchip_cs_cbfunc(W5500_Select,    W5500_DeSelect);
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <W5500_Init+0x50>)
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <W5500_Init+0x54>)
 8002100:	f000 fee4 	bl	8002ecc <reg_wizchip_cs_cbfunc>

    if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memSize) == -1) {
 8002104:	463b      	mov	r3, r7
 8002106:	4619      	mov	r1, r3
 8002108:	2001      	movs	r0, #1
 800210a:	f000 ff2f 	bl	8002f6c <ctlwizchip>
 800210e:	4603      	mov	r3, r0
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d102      	bne.n	800211c <W5500_Init+0x3c>
        printf("WIZCHIP Initialized fail.\r\n");
 8002116:	4808      	ldr	r0, [pc, #32]	; (8002138 <W5500_Init+0x58>)
 8002118:	f00b ff16 	bl	800df48 <puts>
    }  
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	08011fac 	.word	0x08011fac
 8002128:	080023f1 	.word	0x080023f1
 800212c:	08002425 	.word	0x08002425
 8002130:	0800246d 	.word	0x0800246d
 8002134:	08002455 	.word	0x08002455
 8002138:	08011f90 	.word	0x08011f90

0800213c <W5500_NetConf>:
 * @brief  W5500 Net Configuration Setting
 * @param  User Mac Address Pointer
 * @return None
 */
void W5500_NetConf(int8_t *macAddr, char *ip, char *sn, char *gate)
{    
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b094      	sub	sp, #80	; 0x50
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
    char ipAddr[20] = {0, };
 800214a:	2300      	movs	r3, #0
 800214c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
    char subNetMask[20] = {0, };
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
    char gateWay[20] = {0, };
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]

    memcpy(ipAddr, ip, sizeof(ipAddr));
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002186:	461d      	mov	r5, r3
 8002188:	6828      	ldr	r0, [r5, #0]
 800218a:	6869      	ldr	r1, [r5, #4]
 800218c:	68aa      	ldr	r2, [r5, #8]
 800218e:	68eb      	ldr	r3, [r5, #12]
 8002190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002192:	6928      	ldr	r0, [r5, #16]
 8002194:	6020      	str	r0, [r4, #0]
    memcpy(subNetMask, sn, sizeof(subNetMask));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800219c:	461d      	mov	r5, r3
 800219e:	6828      	ldr	r0, [r5, #0]
 80021a0:	6869      	ldr	r1, [r5, #4]
 80021a2:	68aa      	ldr	r2, [r5, #8]
 80021a4:	68eb      	ldr	r3, [r5, #12]
 80021a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a8:	6928      	ldr	r0, [r5, #16]
 80021aa:	6020      	str	r0, [r4, #0]
    memcpy(gateWay, gate, sizeof(gateWay));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f107 0414 	add.w	r4, r7, #20
 80021b2:	461d      	mov	r5, r3
 80021b4:	6828      	ldr	r0, [r5, #0]
 80021b6:	6869      	ldr	r1, [r5, #4]
 80021b8:	68aa      	ldr	r2, [r5, #8]
 80021ba:	68eb      	ldr	r3, [r5, #12]
 80021bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021be:	6928      	ldr	r0, [r5, #16]
 80021c0:	6020      	str	r0, [r4, #0]

    W5500_SetIpAddr(ipAddr);    
 80021c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f876 	bl	80022b8 <W5500_SetIpAddr>
    W5500_SetMacAddr(macAddr);   
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f89d 	bl	800230c <W5500_SetMacAddr>
    W5500_SetSubMask(subNetMask);
 80021d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8b6 	bl	8002348 <W5500_SetSubMask>
    W5500_SetGateway(gateWay);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f8db 	bl	800239c <W5500_SetGateway>
    ctlnetwork(CN_SET_NETINFO, &wizeNetInfo);
 80021e6:	4904      	ldr	r1, [pc, #16]	; (80021f8 <W5500_NetConf+0xbc>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 ff9d 	bl	8003128 <ctlnetwork>
}
 80021ee:	bf00      	nop
 80021f0:	3750      	adds	r7, #80	; 0x50
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20001b60 	.word	0x20001b60

080021fc <W5500_DisplayNetConf>:
 * @brief  W5500 Net Configuration Display
 * @param  None
 * @return None
 */
void W5500_DisplayNetConf(void)
{    
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af04      	add	r7, sp, #16
    wiz_NetInfo netInfo;
    
    ctlnetwork(CN_GET_NETINFO, &netInfo);
 8002202:	463b      	mov	r3, r7
 8002204:	4619      	mov	r1, r3
 8002206:	2001      	movs	r0, #1
 8002208:	f000 ff8e 	bl	8003128 <ctlnetwork>
    printf("[W5500 IP CONFIG]\r\n");
 800220c:	4824      	ldr	r0, [pc, #144]	; (80022a0 <W5500_DisplayNetConf+0xa4>)
 800220e:	f00b fe9b 	bl	800df48 <puts>
    printf("IP           : %d.%d.%d.%d\r\n",                   netInfo.ip[0],  netInfo.ip[1],  netInfo.ip[2],  netInfo.ip[3]);    
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	4619      	mov	r1, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	461a      	mov	r2, r3
 800221a:	7a3b      	ldrb	r3, [r7, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	7a7b      	ldrb	r3, [r7, #9]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4603      	mov	r3, r0
 8002224:	481f      	ldr	r0, [pc, #124]	; (80022a4 <W5500_DisplayNetConf+0xa8>)
 8002226:	f00b fdf5 	bl	800de14 <iprintf>
    printf("MAC          : %02X:%02X:%02X:%02X:%02X:%02X\r\n", netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3], netInfo.mac[4], netInfo.mac[5]);
 800222a:	783b      	ldrb	r3, [r7, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	461c      	mov	r4, r3
 8002232:	78bb      	ldrb	r3, [r7, #2]
 8002234:	461d      	mov	r5, r3
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	793a      	ldrb	r2, [r7, #4]
 800223a:	7979      	ldrb	r1, [r7, #5]
 800223c:	9102      	str	r1, [sp, #8]
 800223e:	9201      	str	r2, [sp, #4]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	462b      	mov	r3, r5
 8002244:	4622      	mov	r2, r4
 8002246:	4601      	mov	r1, r0
 8002248:	4817      	ldr	r0, [pc, #92]	; (80022a8 <W5500_DisplayNetConf+0xac>)
 800224a:	f00b fde3 	bl	800de14 <iprintf>
    printf("Gate way     : %d.%d.%d.%d\r\n",                   netInfo.gw[0],  netInfo.gw[1],  netInfo.gw[2],  netInfo.gw[3]);
 800224e:	7bbb      	ldrb	r3, [r7, #14]
 8002250:	4619      	mov	r1, r3
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	461a      	mov	r2, r3
 8002256:	7c3b      	ldrb	r3, [r7, #16]
 8002258:	4618      	mov	r0, r3
 800225a:	7c7b      	ldrb	r3, [r7, #17]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4603      	mov	r3, r0
 8002260:	4812      	ldr	r0, [pc, #72]	; (80022ac <W5500_DisplayNetConf+0xb0>)
 8002262:	f00b fdd7 	bl	800de14 <iprintf>
    printf("Sub net mask : %d.%d.%d.%d\r\n",                   netInfo.sn[0],  netInfo.sn[1],  netInfo.sn[2],  netInfo.sn[3]);
 8002266:	7abb      	ldrb	r3, [r7, #10]
 8002268:	4619      	mov	r1, r3
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	461a      	mov	r2, r3
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	4618      	mov	r0, r3
 8002272:	7b7b      	ldrb	r3, [r7, #13]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4603      	mov	r3, r0
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <W5500_DisplayNetConf+0xb4>)
 800227a:	f00b fdcb 	bl	800de14 <iprintf>
    printf("DNS          : %d.%d.%d.%d\r\n",                   netInfo.dns[0], netInfo.dns[1], netInfo.dns[2], netInfo.dns[3]);   
 800227e:	7cbb      	ldrb	r3, [r7, #18]
 8002280:	4619      	mov	r1, r3
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	461a      	mov	r2, r3
 8002286:	7d3b      	ldrb	r3, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	7d7b      	ldrb	r3, [r7, #21]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	4603      	mov	r3, r0
 8002290:	4808      	ldr	r0, [pc, #32]	; (80022b4 <W5500_DisplayNetConf+0xb8>)
 8002292:	f00b fdbf 	bl	800de14 <iprintf>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bdb0      	pop	{r4, r5, r7, pc}
 800229e:	bf00      	nop
 80022a0:	08011fbc 	.word	0x08011fbc
 80022a4:	08011fd0 	.word	0x08011fd0
 80022a8:	08011ff0 	.word	0x08011ff0
 80022ac:	08012020 	.word	0x08012020
 80022b0:	08012040 	.word	0x08012040
 80022b4:	08012060 	.word	0x08012060

080022b8 <W5500_SetIpAddr>:
 * @brief  W5500 IP Address Setting
 * @param  IP Address
 * @return None
 */
static void W5500_SetIpAddr(char *addr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    char *addrTemp;
    uint8_t i = 0;  
 80022c0:	2300      	movs	r3, #0
 80022c2:	72fb      	strb	r3, [r7, #11]
    
    addrTemp = strtok(addr, ".");
 80022c4:	490f      	ldr	r1, [pc, #60]	; (8002304 <W5500_SetIpAddr+0x4c>)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00c fc98 	bl	800ebfc <strtok>
 80022cc:	60f8      	str	r0, [r7, #12]
    while (addrTemp != NULL) {
 80022ce:	e011      	b.n	80022f4 <W5500_SetIpAddr+0x3c>
        wizeNetInfo.ip[i] = atoi(addrTemp); 
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f00a feed 	bl	800d0b0 <atoi>
 80022d6:	4602      	mov	r2, r0
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	b2d1      	uxtb	r1, r2
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <W5500_SetIpAddr+0x50>)
 80022de:	4413      	add	r3, r2
 80022e0:	460a      	mov	r2, r1
 80022e2:	719a      	strb	r2, [r3, #6]
        addrTemp = strtok(NULL, ".");               
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <W5500_SetIpAddr+0x4c>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	f00c fc88 	bl	800ebfc <strtok>
 80022ec:	60f8      	str	r0, [r7, #12]
        i++;
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	3301      	adds	r3, #1
 80022f2:	72fb      	strb	r3, [r7, #11]
    while (addrTemp != NULL) {
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ea      	bne.n	80022d0 <W5500_SetIpAddr+0x18>
    }     
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	08012080 	.word	0x08012080
 8002308:	20001b60 	.word	0x20001b60

0800230c <W5500_SetMacAddr>:
 * @brief  W5500 Mac Address Setting
 * @param  Mac Address
 * @return None
 */
static void W5500_SetMacAddr(int8_t *addr)
{    
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++) {
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e00b      	b.n	8002332 <W5500_SetMacAddr+0x26>
        wizeNetInfo.mac[i] = addr[i]; 
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	f993 2000 	ldrsb.w	r2, [r3]
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	b2d1      	uxtb	r1, r2
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <W5500_SetMacAddr+0x38>)
 800232a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 6; i++) {
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d9f0      	bls.n	800231a <W5500_SetMacAddr+0xe>
    }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20001b60 	.word	0x20001b60

08002348 <W5500_SetSubMask>:
 * @brief  W5500 Sub net Mask Setting
 * @param  Sub net Mask
 * @return None
 */
static void W5500_SetSubMask(char *addr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    char *addrTemp;
    uint8_t i = 0;  
 8002350:	2300      	movs	r3, #0
 8002352:	72fb      	strb	r3, [r7, #11]
    
    addrTemp = strtok(addr, ".");
 8002354:	490f      	ldr	r1, [pc, #60]	; (8002394 <W5500_SetSubMask+0x4c>)
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f00c fc50 	bl	800ebfc <strtok>
 800235c:	60f8      	str	r0, [r7, #12]
    while (addrTemp != NULL) {
 800235e:	e011      	b.n	8002384 <W5500_SetSubMask+0x3c>
        wizeNetInfo.sn[i] = atoi(addrTemp); 
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f00a fea5 	bl	800d0b0 <atoi>
 8002366:	4602      	mov	r2, r0
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	b2d1      	uxtb	r1, r2
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <W5500_SetSubMask+0x50>)
 800236e:	4413      	add	r3, r2
 8002370:	460a      	mov	r2, r1
 8002372:	729a      	strb	r2, [r3, #10]
        addrTemp = strtok(NULL, ".");               
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <W5500_SetSubMask+0x4c>)
 8002376:	2000      	movs	r0, #0
 8002378:	f00c fc40 	bl	800ebfc <strtok>
 800237c:	60f8      	str	r0, [r7, #12]
        i++;
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	3301      	adds	r3, #1
 8002382:	72fb      	strb	r3, [r7, #11]
    while (addrTemp != NULL) {
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ea      	bne.n	8002360 <W5500_SetSubMask+0x18>
    }  
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	08012080 	.word	0x08012080
 8002398:	20001b60 	.word	0x20001b60

0800239c <W5500_SetGateway>:
 * @brief  W5500 Gate Way Setting
 * @param  Gate Way
 * @return None
 */
static void W5500_SetGateway(char *addr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    char *addrTemp;
    uint8_t i = 0;  
 80023a4:	2300      	movs	r3, #0
 80023a6:	72fb      	strb	r3, [r7, #11]
    
    addrTemp = strtok(addr, ".");
 80023a8:	490f      	ldr	r1, [pc, #60]	; (80023e8 <W5500_SetGateway+0x4c>)
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f00c fc26 	bl	800ebfc <strtok>
 80023b0:	60f8      	str	r0, [r7, #12]
    while (addrTemp != NULL) {
 80023b2:	e011      	b.n	80023d8 <W5500_SetGateway+0x3c>
        wizeNetInfo.gw[i] = atoi(addrTemp); 
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f00a fe7b 	bl	800d0b0 <atoi>
 80023ba:	4602      	mov	r2, r0
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	b2d1      	uxtb	r1, r2
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <W5500_SetGateway+0x50>)
 80023c2:	4413      	add	r3, r2
 80023c4:	460a      	mov	r2, r1
 80023c6:	739a      	strb	r2, [r3, #14]
        addrTemp = strtok(NULL, ".");               
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <W5500_SetGateway+0x4c>)
 80023ca:	2000      	movs	r0, #0
 80023cc:	f00c fc16 	bl	800ebfc <strtok>
 80023d0:	60f8      	str	r0, [r7, #12]
        i++;
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	3301      	adds	r3, #1
 80023d6:	72fb      	strb	r3, [r7, #11]
    while (addrTemp != NULL) {
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ea      	bne.n	80023b4 <W5500_SetGateway+0x18>
    } 
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	08012080 	.word	0x08012080
 80023ec:	20001b60 	.word	0x20001b60

080023f0 <W5500_WriteByte>:
 * @brief  W5500 SPI Data Write
 * @param  Data
 * @return None
 */
void W5500_WriteByte(uint8_t byte)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &byte, sizeof(byte), 100);
 80023fa:	1df9      	adds	r1, r7, #7
 80023fc:	2364      	movs	r3, #100	; 0x64
 80023fe:	2201      	movs	r2, #1
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <W5500_WriteByte+0x30>)
 8002402:	f005 fa87 	bl	8007914 <HAL_SPI_Transmit>
    while (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET);
 8002406:	bf00      	nop
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <W5500_WriteByte+0x30>)
 800240a:	f005 fe8e 	bl	800812a <HAL_SPI_GetState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f9      	beq.n	8002408 <W5500_WriteByte+0x18>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000342c 	.word	0x2000342c

08002424 <W5500_ReadByte>:
 * @brief  W5500 SPI Data Read
 * @param  None
 * @return Data
 */
uint8_t W5500_ReadByte(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
    uint8_t recvData;
    HAL_SPI_Receive(&hspi2, &recvData, sizeof(recvData), 100);
 800242a:	1df9      	adds	r1, r7, #7
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	2201      	movs	r2, #1
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <W5500_ReadByte+0x2c>)
 8002432:	f005 fbb2 	bl	8007b9a <HAL_SPI_Receive>
    while (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET);
 8002436:	bf00      	nop
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <W5500_ReadByte+0x2c>)
 800243a:	f005 fe76 	bl	800812a <HAL_SPI_GetState>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f9      	beq.n	8002438 <W5500_ReadByte+0x14>
    return recvData;    
 8002444:	79fb      	ldrb	r3, [r7, #7]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000342c 	.word	0x2000342c

08002454 <W5500_Select>:
 * @brief  W5500 SPI Chip Select
 * @param  None
 * @return None
 */
void W5500_Select(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245e:	4802      	ldr	r0, [pc, #8]	; (8002468 <W5500_Select+0x14>)
 8002460:	f003 f9b7 	bl	80057d2 <HAL_GPIO_WritePin>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010c00 	.word	0x40010c00

0800246c <W5500_DeSelect>:
 * @brief  W5500 SPI Chip Deselect
 * @param  None
 * @return None
 */
void W5500_DeSelect(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002476:	4802      	ldr	r0, [pc, #8]	; (8002480 <W5500_DeSelect+0x14>)
 8002478:	f003 f9ab 	bl	80057d2 <HAL_GPIO_WritePin>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010c00 	.word	0x40010c00

08002484 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	4603      	mov	r3, r0
 8002498:	71bb      	strb	r3, [r7, #6]
 800249a:	460b      	mov	r3, r1
 800249c:	80bb      	strh	r3, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d902      	bls.n	80024ae <socket+0x2a>
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	e0f2      	b.n	8002694 <socket+0x210>
	switch(protocol)
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d005      	beq.n	80024c0 <socket+0x3c>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dd11      	ble.n	80024dc <socket+0x58>
 80024b8:	3b02      	subs	r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d80e      	bhi.n	80024dc <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80024be:	e010      	b.n	80024e2 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2204      	movs	r2, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80024cc:	f7ff fbfa 	bl	8001cc4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <socket+0x5e>
 80024d6:	f06f 0302 	mvn.w	r3, #2
 80024da:	e0db      	b.n	8002694 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80024dc:	f06f 0304 	mvn.w	r3, #4
 80024e0:	e0d8      	b.n	8002694 <socket+0x210>
         break;
 80024e2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <socket+0x70>
 80024ee:	f06f 0305 	mvn.w	r3, #5
 80024f2:	e0cf      	b.n	8002694 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d025      	beq.n	8002546 <socket+0xc2>
	{
   	switch(protocol)
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d002      	beq.n	8002506 <socket+0x82>
 8002500:	2b02      	cmp	r3, #2
 8002502:	d008      	beq.n	8002516 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002504:	e024      	b.n	8002550 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11c      	bne.n	800254a <socket+0xc6>
 8002510:	f06f 0305 	mvn.w	r3, #5
 8002514:	e0be      	b.n	8002694 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db02      	blt.n	800252e <socket+0xaa>
 8002528:	f06f 0305 	mvn.w	r3, #5
 800252c:	e0b2      	b.n	8002694 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db06      	blt.n	800254e <socket+0xca>
 8002540:	f06f 0305 	mvn.w	r3, #5
 8002544:	e0a6      	b.n	8002694 <socket+0x210>
   	}
   }
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <socket+0xcc>
   	      break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <socket+0xcc>
   	      break;
 800254e:	bf00      	nop
	close(sn);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f8ac 	bl	80026b0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	3301      	adds	r3, #1
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4618      	mov	r0, r3
 8002562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002566:	f023 030f 	bic.w	r3, r3, #15
 800256a:	b25a      	sxtb	r2, r3
 800256c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002570:	4313      	orrs	r3, r2
 8002572:	b25b      	sxtb	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	f7ff fb56 	bl	8001c28 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d110      	bne.n	80025a4 <socket+0x120>
	{
	   port = sock_any_port++;
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <socket+0x218>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	b291      	uxth	r1, r2
 800258a:	4a44      	ldr	r2, [pc, #272]	; (800269c <socket+0x218>)
 800258c:	8011      	strh	r1, [r2, #0]
 800258e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <socket+0x218>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <socket+0x120>
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <socket+0x218>)
 800259e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80025a2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	3301      	adds	r3, #1
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b0:	461a      	mov	r2, r3
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7ff fb33 	bl	8001c28 <WIZCHIP_WRITE>
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	3301      	adds	r3, #1
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	88bb      	ldrh	r3, [r7, #4]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7ff fb26 	bl	8001c28 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	3301      	adds	r3, #1
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb1c 	bl	8001c28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80025f0:	bf00      	nop
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	3301      	adds	r3, #1
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fac6 	bl	8001b90 <WIZCHIP_READ>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f3      	bne.n	80025f2 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2201      	movs	r2, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	b21b      	sxth	r3, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	b21a      	sxth	r2, r3
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <socket+0x21c>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b21b      	sxth	r3, r3
 800261e:	4013      	ands	r3, r2
 8002620:	b21b      	sxth	r3, r3
 8002622:	b29a      	uxth	r2, r3
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <socket+0x21c>)
 8002626:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	b21a      	sxth	r2, r3
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <socket+0x21c>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b21b      	sxth	r3, r3
 800263c:	4313      	orrs	r3, r2
 800263e:	b21b      	sxth	r3, r3
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <socket+0x21c>)
 8002644:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	b21b      	sxth	r3, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	b21a      	sxth	r2, r3
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <socket+0x220>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b21b      	sxth	r3, r3
 800265a:	4013      	ands	r3, r2
 800265c:	b21b      	sxth	r3, r3
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <socket+0x220>)
 8002662:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <socket+0x224>)
 8002668:	2100      	movs	r1, #0
 800266a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <socket+0x228>)
 8002672:	2100      	movs	r1, #0
 8002674:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002676:	bf00      	nop
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3301      	adds	r3, #1
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fa83 	bl	8001b90 <WIZCHIP_READ>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f3      	beq.n	8002678 <socket+0x1f4>
   return (int8_t)sn;
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	20000002 	.word	0x20000002
 80026a0:	20001b78 	.word	0x20001b78
 80026a4:	20001b7a 	.word	0x20001b7a
 80026a8:	20001b7c 	.word	0x20001b7c
 80026ac:	20001b8c 	.word	0x20001b8c

080026b0 <close>:

int8_t close(uint8_t sn)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d902      	bls.n	80026c6 <close+0x16>
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	e055      	b.n	8002772 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	3301      	adds	r3, #1
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026d2:	2110      	movs	r1, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff faa7 	bl	8001c28 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80026da:	bf00      	nop
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3301      	adds	r3, #1
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fa51 	bl	8001b90 <WIZCHIP_READ>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f3      	bne.n	80026dc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	3301      	adds	r3, #1
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002700:	211f      	movs	r1, #31
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fa90 	bl	8001c28 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	b21b      	sxth	r3, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	b21a      	sxth	r2, r3
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <close+0xcc>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b21b      	sxth	r3, r3
 800271c:	4013      	ands	r3, r2
 800271e:	b21b      	sxth	r3, r3
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <close+0xcc>)
 8002724:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2201      	movs	r2, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	b21b      	sxth	r3, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	b21a      	sxth	r2, r3
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <close+0xd0>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b21b      	sxth	r3, r3
 800273a:	4013      	ands	r3, r2
 800273c:	b21b      	sxth	r3, r3
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <close+0xd0>)
 8002742:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <close+0xd4>)
 8002748:	2100      	movs	r1, #0
 800274a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <close+0xd8>)
 8002752:	2100      	movs	r1, #0
 8002754:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002756:	bf00      	nop
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	3301      	adds	r3, #1
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fa13 	bl	8001b90 <WIZCHIP_READ>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f3      	bne.n	8002758 <close+0xa8>
	return SOCK_OK;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20001b78 	.word	0x20001b78
 8002780:	20001b7a 	.word	0x20001b7a
 8002784:	20001b7c 	.word	0x20001b7c
 8002788:	20001b8c 	.word	0x20001b8c

0800278c <listen>:

int8_t listen(uint8_t sn)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d902      	bls.n	80027a2 <listen+0x16>
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	e049      	b.n	8002836 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3301      	adds	r3, #1
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f9f0 	bl	8001b90 <WIZCHIP_READ>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d002      	beq.n	80027c0 <listen+0x34>
 80027ba:	f06f 0304 	mvn.w	r3, #4
 80027be:	e03a      	b.n	8002836 <listen+0xaa>
	CHECK_SOCKINIT();
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3301      	adds	r3, #1
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f9df 	bl	8001b90 <WIZCHIP_READ>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b13      	cmp	r3, #19
 80027d6:	d002      	beq.n	80027de <listen+0x52>
 80027d8:	f06f 0302 	mvn.w	r3, #2
 80027dc:	e02b      	b.n	8002836 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	3301      	adds	r3, #1
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fa1b 	bl	8001c28 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80027f2:	bf00      	nop
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3301      	adds	r3, #1
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f9c5 	bl	8001b90 <WIZCHIP_READ>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f3      	bne.n	80027f4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800280c:	e006      	b.n	800281c <listen+0x90>
   {
         close(sn);
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff4d 	bl	80026b0 <close>
         return SOCKERR_SOCKCLOSED;
 8002816:	f06f 0303 	mvn.w	r3, #3
 800281a:	e00c      	b.n	8002836 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	3301      	adds	r3, #1
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f9b1 	bl	8001b90 <WIZCHIP_READ>
 800282e:	4603      	mov	r3, r0
 8002830:	2b14      	cmp	r3, #20
 8002832:	d1ec      	bne.n	800280e <listen+0x82>
   }
   return SOCK_OK;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
 800284c:	4613      	mov	r3, r2
 800284e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d902      	bls.n	800285c <connect+0x1c>
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e0c6      	b.n	80029ea <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3301      	adds	r3, #1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f993 	bl	8001b90 <WIZCHIP_READ>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	2b01      	cmp	r3, #1
 8002872:	d002      	beq.n	800287a <connect+0x3a>
 8002874:	f06f 0304 	mvn.w	r3, #4
 8002878:	e0b7      	b.n	80029ea <connect+0x1aa>
   CHECK_SOCKINIT();
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3301      	adds	r3, #1
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f982 	bl	8001b90 <WIZCHIP_READ>
 800288c:	4603      	mov	r3, r0
 800288e:	2b13      	cmp	r3, #19
 8002890:	d002      	beq.n	8002898 <connect+0x58>
 8002892:	f06f 0302 	mvn.w	r3, #2
 8002896:	e0a8      	b.n	80029ea <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	3201      	adds	r2, #1
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	3202      	adds	r2, #2
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	3203      	adds	r2, #3
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d002      	beq.n	80028d6 <connect+0x96>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <connect+0x9c>
 80028d6:	f06f 030b 	mvn.w	r3, #11
 80028da:	e086      	b.n	80029ea <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80028dc:	88bb      	ldrh	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <connect+0xa8>
 80028e2:	f06f 030a 	mvn.w	r3, #10
 80028e6:	e080      	b.n	80029ea <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	3301      	adds	r3, #1
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80028f4:	2204      	movs	r2, #4
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fa43 	bl	8001d84 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3301      	adds	r3, #1
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290a:	461a      	mov	r2, r3
 800290c:	88bb      	ldrh	r3, [r7, #4]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f7ff f986 	bl	8001c28 <WIZCHIP_WRITE>
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	3301      	adds	r3, #1
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002928:	461a      	mov	r2, r3
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7ff f979 	bl	8001c28 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3301      	adds	r3, #1
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002942:	2104      	movs	r1, #4
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f96f 	bl	8001c28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800294a:	bf00      	nop
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	3301      	adds	r3, #1
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f919 	bl	8001b90 <WIZCHIP_READ>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f3      	bne.n	800294c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <connect+0x1b4>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	fa42 f303 	asr.w	r3, r2, r3
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02b      	beq.n	80029d0 <connect+0x190>
 8002978:	2300      	movs	r3, #0
 800297a:	e036      	b.n	80029ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3301      	adds	r3, #1
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f901 	bl	8001b90 <WIZCHIP_READ>
 800298e:	4603      	mov	r3, r0
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00c      	beq.n	80029b2 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3301      	adds	r3, #1
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029a4:	2108      	movs	r1, #8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f93e 	bl	8001c28 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80029ac:	f06f 030c 	mvn.w	r3, #12
 80029b0:	e01b      	b.n	80029ea <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3301      	adds	r3, #1
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f8e6 	bl	8001b90 <WIZCHIP_READ>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80029ca:	f06f 0303 	mvn.w	r3, #3
 80029ce:	e00c      	b.n	80029ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3301      	adds	r3, #1
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f8d7 	bl	8001b90 <WIZCHIP_READ>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b17      	cmp	r3, #23
 80029e6:	d1c9      	bne.n	800297c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20001b78 	.word	0x20001b78

080029f8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d902      	bls.n	8002a0e <disconnect+0x16>
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	e062      	b.n	8002ad4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3301      	adds	r3, #1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f8ba 	bl	8001b90 <WIZCHIP_READ>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <disconnect+0x34>
 8002a26:	f06f 0304 	mvn.w	r3, #4
 8002a2a:	e053      	b.n	8002ad4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3301      	adds	r3, #1
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a38:	2108      	movs	r1, #8
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f8f4 	bl	8001c28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002a40:	bf00      	nop
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	3301      	adds	r3, #1
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f89e 	bl	8001b90 <WIZCHIP_READ>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f3      	bne.n	8002a42 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <disconnect+0xe4>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <disconnect+0xe4>)
 8002a76:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <disconnect+0xe8>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	fa42 f303 	asr.w	r3, r2, r3
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <disconnect+0xc2>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e021      	b.n	8002ad4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	3301      	adds	r3, #1
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f877 	bl	8001b90 <WIZCHIP_READ>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <disconnect+0xc2>
	   {
	      close(sn);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fdfe 	bl	80026b0 <close>
	      return SOCKERR_TIMEOUT;
 8002ab4:	f06f 030c 	mvn.w	r3, #12
 8002ab8:	e00c      	b.n	8002ad4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	3301      	adds	r3, #1
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f862 	bl	8001b90 <WIZCHIP_READ>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1de      	bne.n	8002a90 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20001b7a 	.word	0x20001b7a
 8002ae0:	20001b78 	.word	0x20001b78

08002ae4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d902      	bls.n	8002b08 <send+0x24>
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	e0de      	b.n	8002cc6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f83d 	bl	8001b90 <WIZCHIP_READ>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <send+0x42>
 8002b20:	f06f 0304 	mvn.w	r3, #4
 8002b24:	e0cf      	b.n	8002cc6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <send+0x4e>
 8002b2c:	f06f 030d 	mvn.w	r3, #13
 8002b30:	e0c9      	b.n	8002cc6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3301      	adds	r3, #1
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f826 	bl	8001b90 <WIZCHIP_READ>
 8002b44:	4603      	mov	r3, r0
 8002b46:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b17      	cmp	r3, #23
 8002b4c:	d005      	beq.n	8002b5a <send+0x76>
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b1c      	cmp	r3, #28
 8002b52:	d002      	beq.n	8002b5a <send+0x76>
 8002b54:	f06f 0306 	mvn.w	r3, #6
 8002b58:	e0b5      	b.n	8002cc6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002b5a:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <send+0x1ec>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	fa42 f303 	asr.w	r3, r2, r3
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d039      	beq.n	8002be2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3301      	adds	r3, #1
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f808 	bl	8001b90 <WIZCHIP_READ>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d019      	beq.n	8002bc6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3301      	adds	r3, #1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f841 	bl	8001c28 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <send+0x1ec>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <send+0x1ec>)
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	e00d      	b.n	8002be2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <send+0xfa>
      {
         close(sn);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fd6c 	bl	80026b0 <close>
         return SOCKERR_TIMEOUT;
 8002bd8:	f06f 030c 	mvn.w	r3, #12
 8002bdc:	e073      	b.n	8002cc6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e071      	b.n	8002cc6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3301      	adds	r3, #1
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe ffce 	bl	8001b90 <WIZCHIP_READ>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002bfc:	88ba      	ldrh	r2, [r7, #4]
 8002bfe:	89bb      	ldrh	r3, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d901      	bls.n	8002c08 <send+0x124>
 8002c04:	89bb      	ldrh	r3, [r7, #12]
 8002c06:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f91a 	bl	8001e44 <getSn_TX_FSR>
 8002c10:	4603      	mov	r3, r0
 8002c12:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3301      	adds	r3, #1
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe ffb5 	bl	8001b90 <WIZCHIP_READ>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b17      	cmp	r3, #23
 8002c2e:	d009      	beq.n	8002c44 <send+0x160>
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b1c      	cmp	r3, #28
 8002c34:	d006      	beq.n	8002c44 <send+0x160>
      {
         close(sn);
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fd39 	bl	80026b0 <close>
         return SOCKERR_SOCKSTATUS;
 8002c3e:	f06f 0306 	mvn.w	r3, #6
 8002c42:	e040      	b.n	8002cc6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <send+0x1f0>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	fa42 f303 	asr.w	r3, r2, r3
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <send+0x180>
 8002c58:	88ba      	ldrh	r2, [r7, #4]
 8002c5a:	89bb      	ldrh	r3, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d901      	bls.n	8002c64 <send+0x180>
 8002c60:	2300      	movs	r3, #0
 8002c62:	e030      	b.n	8002cc6 <send+0x1e2>
      if(len <= freesize) break;
 8002c64:	88ba      	ldrh	r2, [r7, #4]
 8002c66:	89bb      	ldrh	r3, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d900      	bls.n	8002c6e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002c6c:	e7cc      	b.n	8002c08 <send+0x124>
      if(len <= freesize) break;
 8002c6e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002c70:	88ba      	ldrh	r2, [r7, #4]
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f97a 	bl	8001f70 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3301      	adds	r3, #1
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c88:	2120      	movs	r1, #32
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe ffcc 	bl	8001c28 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002c90:	bf00      	nop
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3301      	adds	r3, #1
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ff76 	bl	8001b90 <WIZCHIP_READ>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f3      	bne.n	8002c92 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2201      	movs	r2, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	b21a      	sxth	r2, r3
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <send+0x1ec>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b21b      	sxth	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <send+0x1ec>)
 8002cc2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002cc4:	88bb      	ldrh	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20001b7a 	.word	0x20001b7a
 8002cd4:	20001b78 	.word	0x20001b78

08002cd8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d902      	bls.n	8002cfc <recv+0x24>
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e09c      	b.n	8002e36 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	3301      	adds	r3, #1
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe ff43 	bl	8001b90 <WIZCHIP_READ>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d002      	beq.n	8002d1a <recv+0x42>
 8002d14:	f06f 0304 	mvn.w	r3, #4
 8002d18:	e08d      	b.n	8002e36 <recv+0x15e>
   CHECK_SOCKDATA();
 8002d1a:	88bb      	ldrh	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <recv+0x4e>
 8002d20:	f06f 030d 	mvn.w	r3, #13
 8002d24:	e087      	b.n	8002e36 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe ff2c 	bl	8001b90 <WIZCHIP_READ>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	029b      	lsls	r3, r3, #10
 8002d3e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002d40:	89ba      	ldrh	r2, [r7, #12]
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d201      	bcs.n	8002d4c <recv+0x74>
 8002d48:	89bb      	ldrh	r3, [r7, #12]
 8002d4a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f8c3 	bl	8001eda <getSn_RX_RSR>
 8002d54:	4603      	mov	r3, r0
 8002d56:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe ff13 	bl	8001b90 <WIZCHIP_READ>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b17      	cmp	r3, #23
 8002d72:	d026      	beq.n	8002dc2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b1c      	cmp	r3, #28
 8002d78:	d11c      	bne.n	8002db4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d133      	bne.n	8002de8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f85e 	bl	8001e44 <getSn_TX_FSR>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3301      	adds	r3, #1
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe fef9 	bl	8001b90 <WIZCHIP_READ>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	429c      	cmp	r4, r3
 8002da4:	d10d      	bne.n	8002dc2 <recv+0xea>
               {
                  close(sn);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fc81 	bl	80026b0 <close>
                  return SOCKERR_SOCKSTATUS;
 8002dae:	f06f 0306 	mvn.w	r3, #6
 8002db2:	e040      	b.n	8002e36 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fc7a 	bl	80026b0 <close>
               return SOCKERR_SOCKSTATUS;
 8002dbc:	f06f 0306 	mvn.w	r3, #6
 8002dc0:	e039      	b.n	8002e36 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <recv+0x168>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	fa42 f303 	asr.w	r3, r2, r3
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <recv+0x108>
 8002dd6:	89bb      	ldrh	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <recv+0x108>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e02a      	b.n	8002e36 <recv+0x15e>
         if(recvsize != 0) break;
 8002de0:	89bb      	ldrh	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002de6:	e7b1      	b.n	8002d4c <recv+0x74>
               if(recvsize != 0) break;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <recv+0x116>
         if(recvsize != 0) break;
 8002dec:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002dee:	89ba      	ldrh	r2, [r7, #12]
 8002df0:	88bb      	ldrh	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d201      	bcs.n	8002dfa <recv+0x122>
 8002df6:	89bb      	ldrh	r3, [r7, #12]
 8002df8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002dfa:	88ba      	ldrh	r2, [r7, #4]
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	6839      	ldr	r1, [r7, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f911 	bl	8002028 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe ff07 	bl	8001c28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002e1a:	bf00      	nop
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	3301      	adds	r3, #1
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe feb1 	bl	8001b90 <WIZCHIP_READ>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f3      	bne.n	8002e1c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002e34:	88bb      	ldrh	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20001b78 	.word	0x20001b78

08002e44 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	2300      	movs	r3, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
	...

08002ecc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <reg_wizchip_cs_cbfunc+0x16>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002ee4:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <reg_wizchip_cs_cbfunc+0x40>)
 8002ee6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <reg_wizchip_cs_cbfunc+0x44>)
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	e006      	b.n	8002efe <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ef0:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6193      	str	r3, [r2, #24]
   }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000004 	.word	0x20000004
 8002f0c:	08002e5d 	.word	0x08002e5d
 8002f10:	08002e69 	.word	0x08002e69

08002f14 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f1e:	bf00      	nop
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f9      	beq.n	8002f20 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <reg_wizchip_spi_cbfunc+0x24>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <reg_wizchip_spi_cbfunc+0x50>)
 8002f3c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f40:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <reg_wizchip_spi_cbfunc+0x54>)
 8002f42:	621a      	str	r2, [r3, #32]
 8002f44:	e006      	b.n	8002f54 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002f46:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6213      	str	r3, [r2, #32]
   }
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000004 	.word	0x20000004
 8002f64:	08002ea9 	.word	0x08002ea9
 8002f68:	08002eb7 	.word	0x08002eb7

08002f6c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f200 80c2 	bhi.w	8003110 <ctlwizchip+0x1a4>
 8002f8c:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <ctlwizchip+0x28>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fd5 	.word	0x08002fd5
 8002f98:	08002fdb 	.word	0x08002fdb
 8002f9c:	08003007 	.word	0x08003007
 8002fa0:	08002ffb 	.word	0x08002ffb
 8002fa4:	08003015 	.word	0x08003015
 8002fa8:	08003021 	.word	0x08003021
 8002fac:	0800302f 	.word	0x0800302f
 8002fb0:	08003055 	.word	0x08003055
 8002fb4:	0800307b 	.word	0x0800307b
 8002fb8:	080030b5 	.word	0x080030b5
 8002fbc:	080030bb 	.word	0x080030bb
 8002fc0:	080030c3 	.word	0x080030c3
 8002fc4:	08003117 	.word	0x08003117
 8002fc8:	080030cb 	.word	0x080030cb
 8002fcc:	080030d9 	.word	0x080030d9
 8002fd0:	080030f5 	.word	0x080030f5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002fd4:	f000 f8e6 	bl	80031a4 <wizchip_sw_reset>
         break;
 8002fd8:	e09e      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f923 	bl	800323c <wizchip_init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	e08f      	b.n	800311a <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f9a8 	bl	8003354 <wizchip_clrinterrupt>
         break;
 8003004:	e088      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003006:	f000 f9c3 	bl	8003390 <wizchip_getinterrupt>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	801a      	strh	r2, [r3, #0]
         break;
 8003012:	e081      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f9de 	bl	80033da <wizchip_setinterruptmask>
         break;         
 800301e:	e07b      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003020:	f000 f9f6 	bl	8003410 <wizchip_getinterruptmask>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	801a      	strh	r2, [r3, #0]
         break;
 800302c:	e074      	b.n	8003118 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	b29b      	uxth	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800303e:	f7fe fdf3 	bl	8001c28 <WIZCHIP_WRITE>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800304e:	f7fe fdeb 	bl	8001c28 <WIZCHIP_WRITE>
         break;
 8003052:	e061      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003054:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003058:	f7fe fd9a 	bl	8001b90 <WIZCHIP_READ>
 800305c:	4603      	mov	r3, r0
 800305e:	b29b      	uxth	r3, r3
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b29c      	uxth	r4, r3
 8003064:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003068:	f7fe fd92 	bl	8001b90 <WIZCHIP_READ>
 800306c:	4603      	mov	r3, r0
 800306e:	b29b      	uxth	r3, r3
 8003070:	4423      	add	r3, r4
 8003072:	b29a      	uxth	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	801a      	strh	r2, [r3, #0]
         break;
 8003078:	e04e      	b.n	8003118 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800307a:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <ctlwizchip+0x1b8>)
 800307c:	789a      	ldrb	r2, [r3, #2]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <ctlwizchip+0x1b8>)
 8003088:	78d2      	ldrb	r2, [r2, #3]
 800308a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3302      	adds	r3, #2
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <ctlwizchip+0x1b8>)
 8003092:	7912      	ldrb	r2, [r2, #4]
 8003094:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	3303      	adds	r3, #3
 800309a:	4a22      	ldr	r2, [pc, #136]	; (8003124 <ctlwizchip+0x1b8>)
 800309c:	7952      	ldrb	r2, [r2, #5]
 800309e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <ctlwizchip+0x1b8>)
 80030a6:	7992      	ldrb	r2, [r2, #6]
 80030a8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	3305      	adds	r3, #5
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
         break;
 80030b2:	e031      	b.n	8003118 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80030b4:	f000 f9fe 	bl	80034b4 <wizphy_reset>
         break;
 80030b8:	e02e      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	f000 fa21 	bl	8003502 <wizphy_setphyconf>
         break;
 80030c0:	e02a      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80030c2:	6838      	ldr	r0, [r7, #0]
 80030c4:	f000 fa5f 	bl	8003586 <wizphy_getphyconf>
         break;
 80030c8:	e026      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fac2 	bl	8003658 <wizphy_setphypmode>
 80030d4:	4603      	mov	r3, r0
 80030d6:	e020      	b.n	800311a <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80030d8:	f000 f9d3 	bl	8003482 <wizphy_getphypmode>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2bff      	cmp	r3, #255	; 0xff
 80030e4:	d102      	bne.n	80030ec <ctlwizchip+0x180>
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e016      	b.n	800311a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	7dfa      	ldrb	r2, [r7, #23]
 80030f0:	701a      	strb	r2, [r3, #0]
         break;
 80030f2:	e011      	b.n	8003118 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80030f4:	f000 f9af 	bl	8003456 <wizphy_getphylink>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	d102      	bne.n	8003108 <ctlwizchip+0x19c>
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e008      	b.n	800311a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	7dfa      	ldrb	r2, [r7, #23]
 800310c:	701a      	strb	r2, [r3, #0]
         break;
 800310e:	e003      	b.n	8003118 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e001      	b.n	800311a <ctlwizchip+0x1ae>
         break;
 8003116:	bf00      	nop
   }
   return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	20000004 	.word	0x20000004

08003128 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{   
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b05      	cmp	r3, #5
 8003138:	d82c      	bhi.n	8003194 <ctlnetwork+0x6c>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <ctlnetwork+0x18>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003159 	.word	0x08003159
 8003144:	08003161 	.word	0x08003161
 8003148:	08003169 	.word	0x08003169
 800314c:	08003177 	.word	0x08003177
 8003150:	08003185 	.word	0x08003185
 8003154:	0800318d 	.word	0x0800318d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003158:	6838      	ldr	r0, [r7, #0]
 800315a:	f000 fac7 	bl	80036ec <wizchip_setnetinfo>
         break;
 800315e:	e01c      	b.n	800319a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003160:	6838      	ldr	r0, [r7, #0]
 8003162:	f000 fb03 	bl	800376c <wizchip_getnetinfo>
         break;
 8003166:	e018      	b.n	800319a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fb3d 	bl	80037ec <wizchip_setnetmode>
 8003172:	4603      	mov	r3, r0
 8003174:	e012      	b.n	800319c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003176:	f000 fb5b 	bl	8003830 <wizchip_getnetmode>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	701a      	strb	r2, [r3, #0]
         break;
 8003182:	e00a      	b.n	800319a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003184:	6838      	ldr	r0, [r7, #0]
 8003186:	f000 fb5b 	bl	8003840 <wizchip_settimeout>
         break;
 800318a:	e006      	b.n	800319a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800318c:	6838      	ldr	r0, [r7, #0]
 800318e:	f000 fb78 	bl	8003882 <wizchip_gettimeout>
         break;
 8003192:	e002      	b.n	800319a <ctlnetwork+0x72>
      default:
         return -1;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	e000      	b.n	800319c <ctlnetwork+0x74>
   }
   return 0;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	2206      	movs	r2, #6
 80031ae:	4619      	mov	r1, r3
 80031b0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80031b4:	f7fe fd86 	bl	8001cc4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	2204      	movs	r2, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031c4:	f7fe fd7e 	bl	8001cc4 <WIZCHIP_READ_BUF>
 80031c8:	f107 0310 	add.w	r3, r7, #16
 80031cc:	2204      	movs	r2, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80031d4:	f7fe fd76 	bl	8001cc4 <WIZCHIP_READ_BUF>
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	2204      	movs	r2, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80031e4:	f7fe fd6e 	bl	8001cc4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fe fd1c 	bl	8001c28 <WIZCHIP_WRITE>
   getMR(); // for delay
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe fccd 	bl	8001b90 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2206      	movs	r2, #6
 80031fa:	4619      	mov	r1, r3
 80031fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003200:	f7fe fdc0 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2204      	movs	r2, #4
 800320a:	4619      	mov	r1, r3
 800320c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003210:	f7fe fdb8 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003214:	f107 0310 	add.w	r3, r7, #16
 8003218:	2204      	movs	r2, #4
 800321a:	4619      	mov	r1, r3
 800321c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003220:	f7fe fdb0 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	2204      	movs	r2, #4
 800322a:	4619      	mov	r1, r3
 800322c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003230:	f7fe fda8 	bl	8001d84 <WIZCHIP_WRITE_BUF>
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800324a:	f7ff ffab 	bl	80031a4 <wizchip_sw_reset>
   if(txsize)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d03b      	beq.n	80032cc <wizchip_init+0x90>
   {
      tmp = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e015      	b.n	800328a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	4413      	add	r3, r2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003274:	2b10      	cmp	r3, #16
 8003276:	dd02      	ble.n	800327e <wizchip_init+0x42>
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e066      	b.n	800334c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	2b07      	cmp	r3, #7
 8003290:	dde5      	ble.n	800325e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	e015      	b.n	80032c4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	3301      	adds	r3, #1
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80032a6:	4618      	mov	r0, r3
 80032a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	f7fe fcb8 	bl	8001c28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	dde5      	ble.n	8003298 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d03b      	beq.n	800334a <wizchip_init+0x10e>
   {
      tmp = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e015      	b.n	8003308 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80032dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	7bbb      	ldrb	r3, [r7, #14]
 80032e8:	4413      	add	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80032ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	dd02      	ble.n	80032fc <wizchip_init+0xc0>
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e027      	b.n	800334c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3301      	adds	r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330c:	2b07      	cmp	r3, #7
 800330e:	dde5      	ble.n	80032dc <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e015      	b.n	8003342 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3301      	adds	r3, #1
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003324:	4618      	mov	r0, r3
 8003326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	f7fe fc79 	bl	8001c28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	2b07      	cmp	r3, #7
 8003348:	dde5      	ble.n	8003316 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	b29b      	uxth	r3, r3
 8003368:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	f023 030f 	bic.w	r3, r3, #15
 8003370:	b2db      	uxtb	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003378:	f7fe fc56 	bl	8001c28 <WIZCHIP_WRITE>
   setSIR(sir);
 800337c:	7bbb      	ldrb	r3, [r7, #14]
 800337e:	4619      	mov	r1, r3
 8003380:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003384:	f7fe fc50 	bl	8001c28 <WIZCHIP_WRITE>
#endif   
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80033a2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80033a6:	f7fe fbf3 	bl	8001b90 <WIZCHIP_READ>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80033b2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80033b6:	f7fe fbeb 	bl	8001b90 <WIZCHIP_READ>
 80033ba:	4603      	mov	r3, r0
 80033bc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80033be:	79bb      	ldrb	r3, [r7, #6]
 80033c0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80033d0:	88bb      	ldrh	r3, [r7, #4]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	4619      	mov	r1, r3
 80033f4:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80033f8:	f7fe fc16 	bl	8001c28 <WIZCHIP_WRITE>
   setSIMR(simr);
 80033fc:	7bbb      	ldrb	r3, [r7, #14]
 80033fe:	4619      	mov	r1, r3
 8003400:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003404:	f7fe fc10 	bl	8001c28 <WIZCHIP_WRITE>
#endif   
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003422:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003426:	f7fe fbb3 	bl	8001b90 <WIZCHIP_READ>
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800342e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003432:	f7fe fbad 	bl	8001b90 <WIZCHIP_READ>
 8003436:	4603      	mov	r3, r0
 8003438:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800343a:	79bb      	ldrb	r3, [r7, #6]
 800343c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800343e:	88bb      	ldrh	r3, [r7, #4]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	b29a      	uxth	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	b29b      	uxth	r3, r3
 8003448:	4413      	add	r3, r2
 800344a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800344c:	88bb      	ldrh	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800345c:	2300      	movs	r3, #0
 800345e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003460:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003464:	f7fe fb94 	bl	8001b90 <WIZCHIP_READ>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003472:	2301      	movs	r3, #1
 8003474:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800348c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003490:	f7fe fb7e 	bl	8001b90 <WIZCHIP_READ>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	2b30      	cmp	r3, #48	; 0x30
 800349c:	d102      	bne.n	80034a4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800349e:	2301      	movs	r3, #1
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	e001      	b.n	80034a8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80034a4:	2300      	movs	r3, #0
 80034a6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80034ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034be:	f7fe fb67 	bl	8001b90 <WIZCHIP_READ>
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034cc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034d6:	f7fe fba7 	bl	8001c28 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80034da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034de:	f7fe fb57 	bl	8001b90 <WIZCHIP_READ>
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ec:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	4619      	mov	r1, r3
 80034f2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034f6:	f7fe fb97 	bl	8001c28 <WIZCHIP_WRITE>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d104      	bne.n	8003520 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	e003      	b.n	8003528 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d104      	bne.n	800353a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e019      	b.n	800356e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	789b      	ldrb	r3, [r3, #2]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d104      	bne.n	8003554 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	f043 0318 	orr.w	r3, r3, #24
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e00c      	b.n	800356e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	e007      	b.n	800356e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	789b      	ldrb	r3, [r3, #2]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d103      	bne.n	800356e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	f043 0310 	orr.w	r3, r3, #16
 800356c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	4619      	mov	r1, r3
 8003572:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003576:	f7fe fb57 	bl	8001c28 <WIZCHIP_WRITE>
   wizphy_reset();
 800357a:	f7ff ff9b 	bl	80034b4 <wizphy_reset>
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003592:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003596:	f7fe fafb 	bl	8001b90 <WIZCHIP_READ>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	119b      	asrs	r3, r3, #6
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d001      	beq.n	80035bc <wizphy_getphyconf+0x36>
 80035b8:	2b38      	cmp	r3, #56	; 0x38
 80035ba:	d103      	bne.n	80035c4 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	705a      	strb	r2, [r3, #1]
         break;
 80035c2:	e003      	b.n	80035cc <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	705a      	strb	r2, [r3, #1]
         break;
 80035ca:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d2:	3b10      	subs	r3, #16
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	bf8c      	ite	hi
 80035d8:	2201      	movhi	r2, #1
 80035da:	2200      	movls	r2, #0
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	2a00      	cmp	r2, #0
 80035e0:	d111      	bne.n	8003606 <wizphy_getphyconf+0x80>
 80035e2:	2201      	movs	r2, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80035ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	709a      	strb	r2, [r3, #2]
         break;
 8003604:	e003      	b.n	800360e <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	709a      	strb	r2, [r3, #2]
         break;
 800360c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003614:	3b08      	subs	r3, #8
 8003616:	2b18      	cmp	r3, #24
 8003618:	bf8c      	ite	hi
 800361a:	2201      	movhi	r2, #1
 800361c:	2200      	movls	r2, #0
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	2a00      	cmp	r2, #0
 8003622:	d111      	bne.n	8003648 <wizphy_getphyconf+0xc2>
 8003624:	2201      	movs	r2, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800362e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	70da      	strb	r2, [r3, #3]
         break;
 8003646:	e003      	b.n	8003650 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	70da      	strb	r2, [r3, #3]
         break;
 800364e:	bf00      	nop
   }
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003666:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800366a:	f7fe fa91 	bl	8001b90 <WIZCHIP_READ>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <wizphy_setphypmode+0x2a>
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e030      	b.n	80036e4 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003688:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d104      	bne.n	800369a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e003      	b.n	80036a2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80036a0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80036aa:	f7fe fabd 	bl	8001c28 <WIZCHIP_WRITE>
   wizphy_reset();
 80036ae:	f7ff ff01 	bl	80034b4 <wizphy_reset>
   tmp = getPHYCFGR();
 80036b2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80036b6:	f7fe fa6b 	bl	8001b90 <WIZCHIP_READ>
 80036ba:	4603      	mov	r3, r0
 80036bc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <wizphy_setphypmode+0x88>
 80036ce:	2300      	movs	r3, #0
 80036d0:	e008      	b.n	80036e4 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <wizphy_setphypmode+0x88>
 80036dc:	2300      	movs	r3, #0
 80036de:	e001      	b.n	80036e4 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2206      	movs	r2, #6
 80036f8:	4619      	mov	r1, r3
 80036fa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80036fe:	f7fe fb41 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	330e      	adds	r3, #14
 8003706:	2204      	movs	r2, #4
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800370e:	f7fe fb39 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	330a      	adds	r3, #10
 8003716:	2204      	movs	r2, #4
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800371e:	f7fe fb31 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3306      	adds	r3, #6
 8003726:	2204      	movs	r2, #4
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800372e:	f7fe fb29 	bl	8001d84 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7c9a      	ldrb	r2, [r3, #18]
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <wizchip_setnetinfo+0x78>)
 8003738:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7cda      	ldrb	r2, [r3, #19]
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <wizchip_setnetinfo+0x78>)
 8003740:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	7d1a      	ldrb	r2, [r3, #20]
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <wizchip_setnetinfo+0x78>)
 8003748:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7d5a      	ldrb	r2, [r3, #21]
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <wizchip_setnetinfo+0x78>)
 8003750:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7d9a      	ldrb	r2, [r3, #22]
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <wizchip_setnetinfo+0x7c>)
 8003758:	701a      	strb	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20001b94 	.word	0x20001b94
 8003768:	20001b98 	.word	0x20001b98

0800376c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2206      	movs	r2, #6
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800377e:	f7fe faa1 	bl	8001cc4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	330e      	adds	r3, #14
 8003786:	2204      	movs	r2, #4
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800378e:	f7fe fa99 	bl	8001cc4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	330a      	adds	r3, #10
 8003796:	2204      	movs	r2, #4
 8003798:	4619      	mov	r1, r3
 800379a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800379e:	f7fe fa91 	bl	8001cc4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3306      	adds	r3, #6
 80037a6:	2204      	movs	r2, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80037ae:	f7fe fa89 	bl	8001cc4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <wizchip_getnetinfo+0x78>)
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <wizchip_getnetinfo+0x78>)
 80037bc:	785a      	ldrb	r2, [r3, #1]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <wizchip_getnetinfo+0x78>)
 80037c4:	789a      	ldrb	r2, [r3, #2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <wizchip_getnetinfo+0x78>)
 80037cc:	78da      	ldrb	r2, [r3, #3]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <wizchip_getnetinfo+0x7c>)
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	759a      	strb	r2, [r3, #22]
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20001b94 	.word	0x20001b94
 80037e8:	20001b98 	.word	0x20001b98

080037ec <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <wizchip_setnetmode+0x1e>
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	e00e      	b.n	8003828 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800380a:	2000      	movs	r0, #0
 800380c:	f7fe f9c0 	bl	8001b90 <WIZCHIP_READ>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	4313      	orrs	r3, r2
 800381a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	4619      	mov	r1, r3
 8003820:	2000      	movs	r0, #0
 8003822:	f7fe fa01 	bl	8001c28 <WIZCHIP_WRITE>
   return 0;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003834:	2000      	movs	r0, #0
 8003836:	f7fe f9ab 	bl	8001b90 <WIZCHIP_READ>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}

08003840 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003852:	f7fe f9e9 	bl	8001c28 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	885b      	ldrh	r3, [r3, #2]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b29b      	uxth	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003866:	f7fe f9df 	bl	8001c28 <WIZCHIP_WRITE>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	885b      	ldrh	r3, [r3, #2]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003876:	f7fe f9d7 	bl	8001c28 <WIZCHIP_WRITE>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800388a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800388e:	f7fe f97f 	bl	8001b90 <WIZCHIP_READ>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800389a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800389e:	f7fe f977 	bl	8001b90 <WIZCHIP_READ>
 80038a2:	4603      	mov	r3, r0
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	b29c      	uxth	r4, r3
 80038aa:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80038ae:	f7fe f96f 	bl	8001b90 <WIZCHIP_READ>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4423      	add	r3, r4
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	805a      	strh	r2, [r3, #2]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd90      	pop	{r4, r7, pc}
	...

080038c8 <FSMC_NAND_ChkDevice>:
    nandId->Third_Id  = ADDR_3RD_CYCLE(data);
    nandId->Fourth_Id = ADDR_4TH_CYCLE(data);   
}

uint8_t FSMC_NAND_ChkDevice(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
    NAND_IDTypeDef nandId;
    uint8_t retVal = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	71fb      	strb	r3, [r7, #7]

    HAL_NAND_Read_ID(&hnand1, &nandId);
 80038d2:	463b      	mov	r3, r7
 80038d4:	4619      	mov	r1, r3
 80038d6:	4830      	ldr	r0, [pc, #192]	; (8003998 <FSMC_NAND_ChkDevice+0xd0>)
 80038d8:	f003 f815 	bl	8006906 <HAL_NAND_Read_ID>

    if ((nandId.Maker_Id == 0x01) && (nandId.Device_Id == 0xDC) &&
 80038dc:	783b      	ldrb	r3, [r7, #0]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10e      	bne.n	8003900 <FSMC_NAND_ChkDevice+0x38>
 80038e2:	787b      	ldrb	r3, [r7, #1]
 80038e4:	2bdc      	cmp	r3, #220	; 0xdc
 80038e6:	d10b      	bne.n	8003900 <FSMC_NAND_ChkDevice+0x38>
        (nandId.Third_Id == 0x90) && (nandId.Fourth_Id == 0x95)) {
 80038e8:	78bb      	ldrb	r3, [r7, #2]
    if ((nandId.Maker_Id == 0x01) && (nandId.Device_Id == 0xDC) &&
 80038ea:	2b90      	cmp	r3, #144	; 0x90
 80038ec:	d108      	bne.n	8003900 <FSMC_NAND_ChkDevice+0x38>
        (nandId.Third_Id == 0x90) && (nandId.Fourth_Id == 0x95)) {
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	2b95      	cmp	r3, #149	; 0x95
 80038f2:	d105      	bne.n	8003900 <FSMC_NAND_ChkDevice+0x38>
        printf("NAND Flash Device: S34ML04G2\r\n");
 80038f4:	4829      	ldr	r0, [pc, #164]	; (800399c <FSMC_NAND_ChkDevice+0xd4>)
 80038f6:	f00a fb27 	bl	800df48 <puts>
        retVal = NAND_FLASH_OK;
 80038fa:	2301      	movs	r3, #1
 80038fc:	71fb      	strb	r3, [r7, #7]
 80038fe:	e046      	b.n	800398e <FSMC_NAND_ChkDevice+0xc6>
    }
    else if ((nandId.Maker_Id == 0x01) && (nandId.Device_Id == 0xF1) &&
 8003900:	783b      	ldrb	r3, [r7, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10e      	bne.n	8003924 <FSMC_NAND_ChkDevice+0x5c>
 8003906:	787b      	ldrb	r3, [r7, #1]
 8003908:	2bf1      	cmp	r3, #241	; 0xf1
 800390a:	d10b      	bne.n	8003924 <FSMC_NAND_ChkDevice+0x5c>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x1D)) {
 800390c:	78bb      	ldrb	r3, [r7, #2]
    else if ((nandId.Maker_Id == 0x01) && (nandId.Device_Id == 0xF1) &&
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d108      	bne.n	8003924 <FSMC_NAND_ChkDevice+0x5c>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x1D)) {
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b1d      	cmp	r3, #29
 8003916:	d105      	bne.n	8003924 <FSMC_NAND_ChkDevice+0x5c>
        printf("NAND Flash Device: S34ML01G2\r\n");
 8003918:	4821      	ldr	r0, [pc, #132]	; (80039a0 <FSMC_NAND_ChkDevice+0xd8>)
 800391a:	f00a fb15 	bl	800df48 <puts>
        retVal = NAND_FLASH_OK;
 800391e:	2301      	movs	r3, #1
 8003920:	71fb      	strb	r3, [r7, #7]
 8003922:	e034      	b.n	800398e <FSMC_NAND_ChkDevice+0xc6>
    }
    else if ((nandId.Maker_Id == 0xEC) && (nandId.Device_Id == 0xF1) &&
 8003924:	783b      	ldrb	r3, [r7, #0]
 8003926:	2bec      	cmp	r3, #236	; 0xec
 8003928:	d10c      	bne.n	8003944 <FSMC_NAND_ChkDevice+0x7c>
 800392a:	787b      	ldrb	r3, [r7, #1]
 800392c:	2bf1      	cmp	r3, #241	; 0xf1
 800392e:	d109      	bne.n	8003944 <FSMC_NAND_ChkDevice+0x7c>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x15)) {
 8003930:	78bb      	ldrb	r3, [r7, #2]
    else if ((nandId.Maker_Id == 0xEC) && (nandId.Device_Id == 0xF1) &&
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d106      	bne.n	8003944 <FSMC_NAND_ChkDevice+0x7c>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x15)) {
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	2b15      	cmp	r3, #21
 800393a:	d103      	bne.n	8003944 <FSMC_NAND_ChkDevice+0x7c>
        printf("Device: K9F1G08U0A\r\n");
 800393c:	4819      	ldr	r0, [pc, #100]	; (80039a4 <FSMC_NAND_ChkDevice+0xdc>)
 800393e:	f00a fb03 	bl	800df48 <puts>
 8003942:	e024      	b.n	800398e <FSMC_NAND_ChkDevice+0xc6>
    }
    else if ((nandId.Maker_Id == 0xEC) && (nandId.Device_Id == 0xF1) &&
 8003944:	783b      	ldrb	r3, [r7, #0]
 8003946:	2bec      	cmp	r3, #236	; 0xec
 8003948:	d10e      	bne.n	8003968 <FSMC_NAND_ChkDevice+0xa0>
 800394a:	787b      	ldrb	r3, [r7, #1]
 800394c:	2bf1      	cmp	r3, #241	; 0xf1
 800394e:	d10b      	bne.n	8003968 <FSMC_NAND_ChkDevice+0xa0>
             (nandId.Third_Id == 0x00) && (nandId.Fourth_Id == 0x95)) {
 8003950:	78bb      	ldrb	r3, [r7, #2]
    else if ((nandId.Maker_Id == 0xEC) && (nandId.Device_Id == 0xF1) &&
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <FSMC_NAND_ChkDevice+0xa0>
             (nandId.Third_Id == 0x00) && (nandId.Fourth_Id == 0x95)) {
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	2b95      	cmp	r3, #149	; 0x95
 800395a:	d105      	bne.n	8003968 <FSMC_NAND_ChkDevice+0xa0>
        printf("Device: K9F1G08U0D\r\n");
 800395c:	4812      	ldr	r0, [pc, #72]	; (80039a8 <FSMC_NAND_ChkDevice+0xe0>)
 800395e:	f00a faf3 	bl	800df48 <puts>
        retVal = NAND_FLASH_OK;
 8003962:	2301      	movs	r3, #1
 8003964:	71fb      	strb	r3, [r7, #7]
 8003966:	e012      	b.n	800398e <FSMC_NAND_ChkDevice+0xc6>
    }
    else if ((nandId.Maker_Id == 0xAD) && (nandId.Device_Id == 0xF1) &&
 8003968:	783b      	ldrb	r3, [r7, #0]
 800396a:	2bad      	cmp	r3, #173	; 0xad
 800396c:	d10c      	bne.n	8003988 <FSMC_NAND_ChkDevice+0xc0>
 800396e:	787b      	ldrb	r3, [r7, #1]
 8003970:	2bf1      	cmp	r3, #241	; 0xf1
 8003972:	d109      	bne.n	8003988 <FSMC_NAND_ChkDevice+0xc0>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x1D)) {
 8003974:	78bb      	ldrb	r3, [r7, #2]
    else if ((nandId.Maker_Id == 0xAD) && (nandId.Device_Id == 0xF1) &&
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d106      	bne.n	8003988 <FSMC_NAND_ChkDevice+0xc0>
             (nandId.Third_Id == 0x80) && (nandId.Fourth_Id == 0x1D)) {
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	2b1d      	cmp	r3, #29
 800397e:	d103      	bne.n	8003988 <FSMC_NAND_ChkDevice+0xc0>
        printf("Device: HY27UF081G2A\r\n");
 8003980:	480a      	ldr	r0, [pc, #40]	; (80039ac <FSMC_NAND_ChkDevice+0xe4>)
 8003982:	f00a fae1 	bl	800df48 <puts>
 8003986:	e002      	b.n	800398e <FSMC_NAND_ChkDevice+0xc6>
    }
    else {
        printf("Device: Unknow\r\n");
 8003988:	4809      	ldr	r0, [pc, #36]	; (80039b0 <FSMC_NAND_ChkDevice+0xe8>)
 800398a:	f00a fadd 	bl	800df48 <puts>
    }

    return retVal;
 800398e:	79fb      	ldrb	r3, [r7, #7]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200034cc 	.word	0x200034cc
 800399c:	08012084 	.word	0x08012084
 80039a0:	080120a4 	.word	0x080120a4
 80039a4:	080120c4 	.word	0x080120c4
 80039a8:	080120d8 	.word	0x080120d8
 80039ac:	080120ec 	.word	0x080120ec
 80039b0:	08012104 	.word	0x08012104

080039b4 <FSMC_NAND_ReadStatus>:

    return (status);
}

uint32_t FSMC_NAND_ReadStatus(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
    uint32_t data = 0x00, status = NAND_BUSY;
 80039ba:	2300      	movs	r3, #0
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]

    *(volatile uint8_t *)(NAND_FLASH_START_ADDR | CMD_AREA) = NAND_CMD_STATUS;
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <FSMC_NAND_ReadStatus+0x50>)
 80039c4:	2270      	movs	r2, #112	; 0x70
 80039c6:	701a      	strb	r2, [r3, #0]
    data = *(volatile uint8_t *)(NAND_FLASH_START_ADDR);
 80039c8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <FSMC_NAND_ReadStatus+0x2e>
        status = NAND_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e009      	b.n	80039f6 <FSMC_NAND_ReadStatus+0x42>
    else if ((data & NAND_READY) == NAND_READY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <FSMC_NAND_ReadStatus+0x3e>
        status = NAND_READY;
 80039ec:	2340      	movs	r3, #64	; 0x40
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	e001      	b.n	80039f6 <FSMC_NAND_ReadStatus+0x42>
    else
        status = NAND_BUSY; 
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
  
    return (status);
 80039f6:	687b      	ldr	r3, [r7, #4]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	70010000 	.word	0x70010000

08003a08 <FSMC_NAND_GetStatus>:

uint32_t FSMC_NAND_GetStatus(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000, status = NAND_READY;
 8003a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	2340      	movs	r3, #64	; 0x40
 8003a16:	603b      	str	r3, [r7, #0]

    status = FSMC_NAND_ReadStatus(); 
 8003a18:	f7ff ffcc 	bl	80039b4 <FSMC_NAND_ReadStatus>
 8003a1c:	6038      	str	r0, [r7, #0]

    /* Wait for a NAND operation to complete or a TIMEOUT to occur */
    while ((status != NAND_READY) &&( timeout != 0x00)) {
 8003a1e:	e005      	b.n	8003a2c <FSMC_NAND_GetStatus+0x24>
        status = FSMC_NAND_ReadStatus();
 8003a20:	f7ff ffc8 	bl	80039b4 <FSMC_NAND_ReadStatus>
 8003a24:	6038      	str	r0, [r7, #0]
        timeout --;      
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	607b      	str	r3, [r7, #4]
    while ((status != NAND_READY) &&( timeout != 0x00)) {
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d002      	beq.n	8003a38 <FSMC_NAND_GetStatus+0x30>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f3      	bne.n	8003a20 <FSMC_NAND_GetStatus+0x18>
    }

    if (timeout == 0x00) {          
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <FSMC_NAND_GetStatus+0x3c>
    status =  NAND_TIMEOUT_ERROR;      
 8003a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a42:	603b      	str	r3, [r7, #0]
    } 

    /* Return the operation status */
    return (status);      
 8003a44:	683b      	ldr	r3, [r7, #0]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <FSMC_NAND_EraseBlock>:

  return (status | addressstatus);
}

uint32_t FSMC_NAND_EraseBlock(NAND_AddressTypeDef Address)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	463b      	mov	r3, r7
 8003a58:	e883 0003 	stmia.w	r3, {r0, r1}
  *(volatile uint8_t *)(NAND_FLASH_START_ADDR | CMD_AREA) = NAND_CMD_ERASE0;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <FSMC_NAND_EraseBlock+0x5c>)
 8003a5e:	2260      	movs	r2, #96	; 0x60
 8003a60:	701a      	strb	r2, [r3, #0]
  *(volatile uint8_t *)(NAND_FLASH_START_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(ROW_ADDRESS);  
 8003a62:	883b      	ldrh	r3, [r7, #0]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	88bb      	ldrh	r3, [r7, #4]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	440b      	add	r3, r1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	019b      	lsls	r3, r3, #6
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <FSMC_NAND_EraseBlock+0x60>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	700b      	strb	r3, [r1, #0]
  *(volatile uint8_t *)(NAND_FLASH_START_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(ROW_ADDRESS); 		
 8003a7e:	883b      	ldrh	r3, [r7, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	88bb      	ldrh	r3, [r7, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	029b      	lsls	r3, r3, #10
 8003a8a:	440b      	add	r3, r1
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	4413      	add	r3, r2
 8003a90:	121a      	asrs	r2, r3, #8
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <FSMC_NAND_EraseBlock+0x60>)
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
  *(volatile uint8_t *)(NAND_FLASH_START_ADDR | CMD_AREA) = NAND_CMD_ERASE1;   
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <FSMC_NAND_EraseBlock+0x5c>)
 8003a9a:	22d0      	movs	r2, #208	; 0xd0
 8003a9c:	701a      	strb	r2, [r3, #0]
  
  return (FSMC_NAND_GetStatus());
 8003a9e:	f7ff ffb3 	bl	8003a08 <FSMC_NAND_GetStatus>
 8003aa2:	4603      	mov	r3, r0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	70010000 	.word	0x70010000
 8003ab0:	70020000 	.word	0x70020000

08003ab4 <FSMC_NAND_AllErase>:

void FSMC_NAND_AllErase(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
    NAND_AddressTypeDef WriteReadAddr;
    WriteReadAddr.Plane = 0x00;
 8003aba:	2300      	movs	r3, #0
 8003abc:	807b      	strh	r3, [r7, #2]
    WriteReadAddr.Block = 0x00;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	80bb      	strh	r3, [r7, #4]
    WriteReadAddr.Page  = 0x00;    
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	803b      	strh	r3, [r7, #0]

    while (1) {   
        FSMC_NAND_EraseBlock(WriteReadAddr);
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003acc:	f7ff ffc0 	bl	8003a50 <FSMC_NAND_EraseBlock>
        WriteReadAddr.Block++;
 8003ad0:	88bb      	ldrh	r3, [r7, #4]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	80bb      	strh	r3, [r7, #4]
        if (WriteReadAddr.Block == NAND_ZONE_SIZE) {
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d1f2      	bne.n	8003ac6 <FSMC_NAND_AllErase+0x12>
            printf("Format end\r\n");
 8003ae0:	4803      	ldr	r0, [pc, #12]	; (8003af0 <FSMC_NAND_AllErase+0x3c>)
 8003ae2:	f00a fa31 	bl	800df48 <puts>
            break;
 8003ae6:	bf00      	nop
        }        
    }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	08012114 	.word	0x08012114

08003af4 <NandFlash_initialize>:
    }    
}
#endif

DSTATUS NandFlash_initialize(BYTE lun)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
    status = STA_NOINIT;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <NandFlash_initialize+0x38>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
    
    if(FSMC_NAND_ChkDevice() == NAND_FLASH_OK)
 8003b04:	f7ff fee0 	bl	80038c8 <FSMC_NAND_ChkDevice>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <NandFlash_initialize+0x2a>
        status &= ~STA_NOINIT;
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <NandFlash_initialize+0x38>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <NandFlash_initialize+0x38>)
 8003b1c:	701a      	strb	r2, [r3, #0]
 
    return status;
 8003b1e:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <NandFlash_initialize+0x38>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000044 	.word	0x20000044

08003b30 <NandFlash_status>:

DSTATUS NandFlash_status(BYTE lun)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
    return status;
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <NandFlash_status+0x1c>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000044 	.word	0x20000044

08003b50 <NandFlash_read>:

    return RES_OK;
}
#else
DRESULT NandFlash_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]
    NAND_AddressTypeDef writeReadAddr;

    if (sector < (NAND_ZONE_SIZE*NAND_BLOCK_SIZE)) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b66:	d20c      	bcs.n	8003b82 <NandFlash_read+0x32>
        writeReadAddr.Page = sector - ((sector / NAND_BLOCK_SIZE) * NAND_BLOCK_SIZE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	823b      	strh	r3, [r7, #16]
        writeReadAddr.Plane = 0;    
 8003b74:	2300      	movs	r3, #0
 8003b76:	827b      	strh	r3, [r7, #18]
        writeReadAddr.Block = sector/NAND_BLOCK_SIZE;  
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	099b      	lsrs	r3, r3, #6
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	82bb      	strh	r3, [r7, #20]
 8003b80:	e00b      	b.n	8003b9a <NandFlash_read+0x4a>
    }
    else {
        writeReadAddr.Page = sector - ((sector / NAND_BLOCK_SIZE) * NAND_BLOCK_SIZE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	823b      	strh	r3, [r7, #16]
        writeReadAddr.Plane = 1;    
 8003b8e:	2301      	movs	r3, #1
 8003b90:	827b      	strh	r3, [r7, #18]
        writeReadAddr.Block = (sector/NAND_BLOCK_SIZE)/2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	09db      	lsrs	r3, r3, #7
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	82bb      	strh	r3, [r7, #20]
    }
//	    printf("READ :: sector = %d, count = %d, page = %d, block = %d, Plane = %d, 0x%x(%c)\r\n", 
//	            sector, count, writeReadAddr.Page, writeReadAddr.Block, writeReadAddr.Plane, ((WORD *)buff)[0], ((WORD *)buff)[0]);

    HAL_NAND_Read_Page_8b(&hnand1, &writeReadAddr, (uint8_t *)buff, 1);
 8003b9a:	f107 0110 	add.w	r1, r7, #16
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4804      	ldr	r0, [pc, #16]	; (8003bb4 <NandFlash_read+0x64>)
 8003ba4:	f002 ff34 	bl	8006a10 <HAL_NAND_Read_Page_8b>
   
    return RES_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200034cc 	.word	0x200034cc

08003bb8 <NandFlash_write>:

#if 1
static uint32_t formatSts = 0;
static uint8_t backupBuffer[NAND_PAGE_SIZE];
DRESULT NandFlash_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	73fb      	strb	r3, [r7, #15]
    NAND_AddressTypeDef writeReadAddr;   
    NAND_AddressTypeDef backupAddr;    
    uint16_t newPage = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t nFromSector = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t nToSector = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	843b      	strh	r3, [r7, #32]

    backupAddr.Page = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	823b      	strh	r3, [r7, #16]
    backupAddr.Plane = 0;    
 8003bd8:	2300      	movs	r3, #0
 8003bda:	827b      	strh	r3, [r7, #18]
    backupAddr.Block = 1023;
 8003bdc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003be0:	82bb      	strh	r3, [r7, #20]
    
    nFromSector = sector;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    nToSector = sector + (count - 1);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	843b      	strh	r3, [r7, #32]
    if (sector == 0)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <NandFlash_write+0x50>
        formatSts++;
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <NandFlash_write+0x170>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a49      	ldr	r2, [pc, #292]	; (8003d28 <NandFlash_write+0x170>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e085      	b.n	8003d14 <NandFlash_write+0x15c>
    else if (formatSts == 963) //  67
 8003c08:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <NandFlash_write+0x170>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f240 32c3 	movw	r2, #963	; 0x3c3
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d17f      	bne.n	8003d14 <NandFlash_write+0x15c>
        formatSts = 0;
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <NandFlash_write+0x170>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
           
    for (;nFromSector <= nToSector; nFromSector++) {
 8003c1a:	e07b      	b.n	8003d14 <NandFlash_write+0x15c>
        newPage = nFromSector - ((nFromSector / NAND_BLOCK_SIZE) * NAND_BLOCK_SIZE);
 8003c1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	847b      	strh	r3, [r7, #34]	; 0x22
        writeReadAddr.Plane = 0;    
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	837b      	strh	r3, [r7, #26]
        writeReadAddr.Block = nFromSector/NAND_BLOCK_SIZE;
 8003c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	83bb      	strh	r3, [r7, #28]

//	        printf("WRITE :: sector = %d, count = %d, page = %d, block = %d\r\n", 
//		            nFromSector, count, newPage, writeReadAddr.Block);

        if (formatSts > 0) {       
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <NandFlash_write+0x170>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <NandFlash_write+0xb2>
            printf("fomatSts = %ld\r\n", formatSts);
 8003c40:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <NandFlash_write+0x170>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	4839      	ldr	r0, [pc, #228]	; (8003d2c <NandFlash_write+0x174>)
 8003c48:	f00a f8e4 	bl	800de14 <iprintf>
            formatSts++;
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <NandFlash_write+0x170>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <NandFlash_write+0x170>)
 8003c54:	6013      	str	r3, [r2, #0]
            writeReadAddr.Page = newPage;
 8003c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c58:	833b      	strh	r3, [r7, #24]
	        HAL_NAND_Write_Page_8b(&hnand1, &writeReadAddr, (uint8_t *)buff, 1);                    
 8003c5a:	f107 0118 	add.w	r1, r7, #24
 8003c5e:	2301      	movs	r3, #1
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	4833      	ldr	r0, [pc, #204]	; (8003d30 <NandFlash_write+0x178>)
 8003c64:	f003 f836 	bl	8006cd4 <HAL_NAND_Write_Page_8b>
 8003c68:	e051      	b.n	8003d0e <NandFlash_write+0x156>
        }
        else {
            FSMC_NAND_EraseBlock(backupAddr);
 8003c6a:	f107 0310 	add.w	r3, r7, #16
 8003c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c72:	f7ff feed 	bl	8003a50 <FSMC_NAND_EraseBlock>
            for (int i = 0; i < NAND_BLOCK_SIZE; i++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7a:	e022      	b.n	8003cc2 <NandFlash_write+0x10a>
                backupAddr.Page = i;
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	823b      	strh	r3, [r7, #16]
                writeReadAddr.Page = i;
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	833b      	strh	r3, [r7, #24]
                HAL_NAND_Read_Page_8b(&hnand1, &writeReadAddr, (uint8_t *)backupBuffer, 1);
 8003c88:	f107 0118 	add.w	r1, r7, #24
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <NandFlash_write+0x17c>)
 8003c90:	4827      	ldr	r0, [pc, #156]	; (8003d30 <NandFlash_write+0x178>)
 8003c92:	f002 febd 	bl	8006a10 <HAL_NAND_Read_Page_8b>
                if(newPage == i)
 8003c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d107      	bne.n	8003cae <NandFlash_write+0xf6>
                    HAL_NAND_Write_Page_8b(&hnand1, &backupAddr, (uint8_t *)buff, 1);                    
 8003c9e:	f107 0110 	add.w	r1, r7, #16
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4822      	ldr	r0, [pc, #136]	; (8003d30 <NandFlash_write+0x178>)
 8003ca8:	f003 f814 	bl	8006cd4 <HAL_NAND_Write_Page_8b>
 8003cac:	e006      	b.n	8003cbc <NandFlash_write+0x104>
                else
                    HAL_NAND_Write_Page_8b(&hnand1, &backupAddr, (uint8_t *)backupBuffer, 1);                 
 8003cae:	f107 0110 	add.w	r1, r7, #16
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <NandFlash_write+0x17c>)
 8003cb6:	481e      	ldr	r0, [pc, #120]	; (8003d30 <NandFlash_write+0x178>)
 8003cb8:	f003 f80c 	bl	8006cd4 <HAL_NAND_Write_Page_8b>
            for (int i = 0; i < NAND_BLOCK_SIZE; i++) {
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	2b3f      	cmp	r3, #63	; 0x3f
 8003cc6:	ddd9      	ble.n	8003c7c <NandFlash_write+0xc4>
            }              
         
            FSMC_NAND_EraseBlock(writeReadAddr); 
 8003cc8:	f107 0318 	add.w	r3, r7, #24
 8003ccc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003cd0:	f7ff febe 	bl	8003a50 <FSMC_NAND_EraseBlock>
  
            for (int i = 0; i < NAND_BLOCK_SIZE; i++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	e016      	b.n	8003d08 <NandFlash_write+0x150>
                backupAddr.Page = i;                
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	823b      	strh	r3, [r7, #16]
                writeReadAddr.Page = i;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	833b      	strh	r3, [r7, #24]
                HAL_NAND_Read_Page_8b(&hnand1,  &backupAddr, (uint8_t *)backupBuffer, 1);
 8003ce6:	f107 0110 	add.w	r1, r7, #16
 8003cea:	2301      	movs	r3, #1
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <NandFlash_write+0x17c>)
 8003cee:	4810      	ldr	r0, [pc, #64]	; (8003d30 <NandFlash_write+0x178>)
 8003cf0:	f002 fe8e 	bl	8006a10 <HAL_NAND_Read_Page_8b>
                HAL_NAND_Write_Page_8b(&hnand1, &writeReadAddr, (uint8_t *)backupBuffer, 1);                 
 8003cf4:	f107 0118 	add.w	r1, r7, #24
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <NandFlash_write+0x17c>)
 8003cfc:	480c      	ldr	r0, [pc, #48]	; (8003d30 <NandFlash_write+0x178>)
 8003cfe:	f002 ffe9 	bl	8006cd4 <HAL_NAND_Write_Page_8b>
            for (int i = 0; i < NAND_BLOCK_SIZE; i++) {
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	3301      	adds	r3, #1
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8003d0c:	dde5      	ble.n	8003cda <NandFlash_write+0x122>
    for (;nFromSector <= nToSector; nFromSector++) {
 8003d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d10:	3301      	adds	r3, #1
 8003d12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d16:	8c3b      	ldrh	r3, [r7, #32]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f67f af7f 	bls.w	8003c1c <NandFlash_write+0x64>
  
        }      

    }
    
    return RES_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3730      	adds	r7, #48	; 0x30
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20001b9c 	.word	0x20001b9c
 8003d2c:	0801212c 	.word	0x0801212c
 8003d30:	200034cc 	.word	0x200034cc
 8003d34:	20001ba0 	.word	0x20001ba0

08003d38 <NandFlash_ioctl>:
    return RES_OK;
}
#endif

DRESULT NandFlash_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	603a      	str	r2, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
 8003d44:	460b      	mov	r3, r1
 8003d46:	71bb      	strb	r3, [r7, #6]
    DRESULT res = RES_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
    NAND_AddressTypeDef writeReadAddr; 
//   NAND_AddressTypeDef backupAddr; 
    uint16_t nFromSector = 0; 
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	82bb      	strh	r3, [r7, #20]
    uint16_t nToSector = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	81fb      	strh	r3, [r7, #14]
//    uint16_t erasePage = 0;

    switch (cmd) {
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d85a      	bhi.n	8003e10 <NandFlash_ioctl+0xd8>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <NandFlash_ioctl+0x28>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d75 	.word	0x08003d75
 8003d64:	08003d7b 	.word	0x08003d7b
 8003d68:	08003d8f 	.word	0x08003d8f
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003db7 	.word	0x08003db7
        case CTRL_SYNC:
            res = RES_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]
            break;
 8003d78:	e052      	b.n	8003e20 <NandFlash_ioctl+0xe8>
	
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = NAND_BLOCK_SIZE * NAND_ZONE_SIZE;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d80:	601a      	str	r2, [r3, #0]
            printf("GET_SECTOR_COUNT\r\n");
 8003d82:	482a      	ldr	r0, [pc, #168]	; (8003e2c <NandFlash_ioctl+0xf4>)
 8003d84:	f00a f8e0 	bl	800df48 <puts>
            res = RES_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d8c:	e048      	b.n	8003e20 <NandFlash_ioctl+0xe8>
	
        case GET_SECTOR_SIZE:
            *(DWORD*)buff = NAND_PAGE_SIZE;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d94:	601a      	str	r2, [r3, #0]
            printf("GET_SECTOR_SIZE\r\n");
 8003d96:	4826      	ldr	r0, [pc, #152]	; (8003e30 <NandFlash_ioctl+0xf8>)
 8003d98:	f00a f8d6 	bl	800df48 <puts>
            res = RES_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8003da0:	e03e      	b.n	8003e20 <NandFlash_ioctl+0xe8>
	
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1023;//NAND_BLOCK_SIZE;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003da8:	601a      	str	r2, [r3, #0]
            printf("GET_BLOCK_SIZE\r\n");
 8003daa:	4822      	ldr	r0, [pc, #136]	; (8003e34 <NandFlash_ioctl+0xfc>)
 8003dac:	f00a f8cc 	bl	800df48 <puts>
            res = RES_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	75fb      	strb	r3, [r7, #23]
            break;
 8003db4:	e034      	b.n	8003e20 <NandFlash_ioctl+0xe8>
#if 1	
        case CTRL_TRIM:
//	            printf("CTRL_TRIM\r\n");
            nFromSector = ((uint16_t *)buff)[0];
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	82bb      	strh	r3, [r7, #20]
            nToSector = ((uint16_t *)buff)[1];
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	885b      	ldrh	r3, [r3, #2]
 8003dc0:	81fb      	strh	r3, [r7, #14]
            for(int i = 0; i < nToSector; i++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e01c      	b.n	8003e02 <NandFlash_ioctl+0xca>
            {
                nFromSector += i;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	8abb      	ldrh	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	82bb      	strh	r3, [r7, #20]
                writeReadAddr.Page = (nFromSector - (nFromSector / NAND_BLOCK_SIZE) * NAND_BLOCK_SIZE);
 8003dd2:	8abb      	ldrh	r3, [r7, #20]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8aba      	ldrh	r2, [r7, #20]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	813b      	strh	r3, [r7, #8]
                writeReadAddr.Plane = 0;    
 8003de4:	2300      	movs	r3, #0
 8003de6:	817b      	strh	r3, [r7, #10]
                writeReadAddr.Block = nFromSector/NAND_BLOCK_SIZE;
 8003de8:	8abb      	ldrh	r3, [r7, #20]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	81bb      	strh	r3, [r7, #12]
                FSMC_NAND_EraseBlock(writeReadAddr); 
 8003df0:	f107 0308 	add.w	r3, r7, #8
 8003df4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003df8:	f7ff fe2a 	bl	8003a50 <FSMC_NAND_EraseBlock>
            for(int i = 0; i < nToSector; i++)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	dbde      	blt.n	8003dc8 <NandFlash_ioctl+0x90>
            }
//	            printf("%d~%d\r\n", ((DWORD*)buff)[0], ((DWORD*)buff)[1]);            
            res = RES_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
            break;
 8003e0e:	e007      	b.n	8003e20 <NandFlash_ioctl+0xe8>
            printf("%d~%d\r\n", ((DWORD*)buff)[0], ((DWORD*)buff)[1]);            
            res = RES_OK;
            break;            
#endif            
        default :
            printf("DEFAULT %d\r\n", cmd);
 8003e10:	79bb      	ldrb	r3, [r7, #6]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <NandFlash_ioctl+0x100>)
 8003e16:	f009 fffd 	bl	800de14 <iprintf>
            res = RES_PARERR;
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	75fb      	strb	r3, [r7, #23]
            break;
 8003e1e:	bf00      	nop
    }
    
    return res;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08012140 	.word	0x08012140
 8003e30:	08012154 	.word	0x08012154
 8003e34:	08012168 	.word	0x08012168
 8003e38:	08012178 	.word	0x08012178

08003e3c <JumpToApplication>:
static uint8_t gFtpBuf[_MAX_SS];
static uint8_t gStep = 0;
static FIL gFile;

void JumpToApplication(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
    /* Test if user code is programmed starting from address */ 
    if (((*(__IO uint32_t *)APPLICATION_ADDR) & 0x2FFE0000) == 0x20000000) {
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <JumpToApplication+0x48>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <JumpToApplication+0x4c>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4e:	d115      	bne.n	8003e7c <JumpToApplication+0x40>
        printf("Jump To Application.\r\n");
 8003e50:	480e      	ldr	r0, [pc, #56]	; (8003e8c <JumpToApplication+0x50>)
 8003e52:	f00a f879 	bl	800df48 <puts>
        /* Jump to user application */
        gJumpAddress = *(__IO uint32_t *)(APPLICATION_ADDR + 4);
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <JumpToApplication+0x54>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <JumpToApplication+0x58>)
 8003e5c:	6013      	str	r3, [r2, #0]
        jumpToApplication = (pFunction)gJumpAddress;
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <JumpToApplication+0x58>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <JumpToApplication+0x5c>)
 8003e66:	601a      	str	r2, [r3, #0]
        /* Initialize user application's Stack Pointer */
        __set_MSP(*(__IO uint32_t *)APPLICATION_ADDR);
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <JumpToApplication+0x48>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f383 8808 	msr	MSP, r3
}
 8003e74:	bf00      	nop
        jumpToApplication();
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <JumpToApplication+0x5c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4798      	blx	r3
    }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	08037000 	.word	0x08037000
 8003e88:	2ffe0000 	.word	0x2ffe0000
 8003e8c:	08012188 	.word	0x08012188
 8003e90:	08037004 	.word	0x08037004
 8003e94:	200023a0 	.word	0x200023a0
 8003e98:	200023a4 	.word	0x200023a4

08003e9c <FtpDownloadApplication>:

void FtpDownloadApplication(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
    uint8_t state;
    uint8_t hostIpAddr[4] = {192, 168, 0, 75};
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <FtpDownloadApplication+0x8c>)
 8003ea4:	603b      	str	r3, [r7, #0]

    state = ftpc_proc(gFtpBuf, (uint8_t *)FTP_USER_NAME, (uint8_t *)FTP_PASSWORD, hostIpAddr);
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <FtpDownloadApplication+0x90>)
 8003eaa:	4921      	ldr	r1, [pc, #132]	; (8003f30 <FtpDownloadApplication+0x94>)
 8003eac:	4821      	ldr	r0, [pc, #132]	; (8003f34 <FtpDownloadApplication+0x98>)
 8003eae:	f7fc ff7f 	bl	8000db0 <ftpc_proc>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
	if (state == SOCK_OK) {
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d12e      	bne.n	8003f1a <FtpDownloadApplication+0x7e>
		if (ftpc_status()) {		
 8003ebc:	f7fd fbda 	bl	8001674 <ftpc_status>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d029      	beq.n	8003f1a <FtpDownloadApplication+0x7e>
			switch (gStep) {
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <FtpDownloadApplication+0x9c>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d827      	bhi.n	8003f1e <FtpDownloadApplication+0x82>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <FtpDownloadApplication+0x38>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef3 	.word	0x08003ef3
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f15 	.word	0x08003f15
				case 0:				
					ftpc_service(CMD_DIR);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fd fbf9 	bl	80016dc <ftpc_service>
					gStep = 1;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <FtpDownloadApplication+0x9c>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
					break;
 8003ef0:	e016      	b.n	8003f20 <FtpDownloadApplication+0x84>

				case 1:
					ftpc_setFileName((uint8_t *)APPLICATION_FILE_NAME, (uint8_t *)APPLICATION_FILE_NAME);
 8003ef2:	4912      	ldr	r1, [pc, #72]	; (8003f3c <FtpDownloadApplication+0xa0>)
 8003ef4:	4811      	ldr	r0, [pc, #68]	; (8003f3c <FtpDownloadApplication+0xa0>)
 8003ef6:	f7fd fbc7 	bl	8001688 <ftpc_setFileName>
					ftpc_service(CMD_GET);
 8003efa:	2001      	movs	r0, #1
 8003efc:	f7fd fbee 	bl	80016dc <ftpc_service>
					gStep = 2;
 8003f00:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <FtpDownloadApplication+0x9c>)
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
					break;
 8003f06:	e00b      	b.n	8003f20 <FtpDownloadApplication+0x84>

				case 2:
					BinaryFlashWrite();
 8003f08:	f000 f81a 	bl	8003f40 <BinaryFlashWrite>
					gStep = 3;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <FtpDownloadApplication+0x9c>)
 8003f0e:	2203      	movs	r2, #3
 8003f10:	701a      	strb	r2, [r3, #0]
					break;
 8003f12:	e005      	b.n	8003f20 <FtpDownloadApplication+0x84>

				case 3:
					JumpToApplication();
 8003f14:	f7ff ff92 	bl	8003e3c <JumpToApplication>
					break;
 8003f18:	e002      	b.n	8003f20 <FtpDownloadApplication+0x84>

				default: break;
			}
		}
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <FtpDownloadApplication+0x84>
				default: break;
 8003f1e:	bf00      	nop
	}
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	4b00a8c0 	.word	0x4b00a8c0
 8003f2c:	080121a0 	.word	0x080121a0
 8003f30:	080121a8 	.word	0x080121a8
 8003f34:	200023a8 	.word	0x200023a8
 8003f38:	20002ba8 	.word	0x20002ba8
 8003f3c:	080121b0 	.word	0x080121b0

08003f40 <BinaryFlashWrite>:

static void BinaryFlashWrite(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8003f46:	af00      	add	r7, sp, #0
    uint8_t fileName[20] = {0,};
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8003f4e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
	uint8_t readBuf[1024] = {0,};
 8003f5c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003f60:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f009 f8d9 	bl	800d128 <memset>
    uint32_t fileSize = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	uint32_t bw, totalBw = 0, ramsource;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	uint32_t flashdestination = APPLICATION_ADDR;
 8003f82:	4b39      	ldr	r3, [pc, #228]	; (8004068 <BinaryFlashWrite+0x128>)
 8003f84:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    FRESULT fres;
    
    FLASH_If_Init();
 8003f88:	f000 f876 	bl	8004078 <FLASH_If_Init>
    FLASH_If_Erase(APPLICATION_ADDR);
 8003f8c:	4836      	ldr	r0, [pc, #216]	; (8004068 <BinaryFlashWrite+0x128>)
 8003f8e:	f000 f881 	bl	8004094 <FLASH_If_Erase>

    sprintf((char *)fileName, "0:/%s", APPLICATION_FILE_NAME);
 8003f92:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8003f96:	4a35      	ldr	r2, [pc, #212]	; (800406c <BinaryFlashWrite+0x12c>)
 8003f98:	4935      	ldr	r1, [pc, #212]	; (8004070 <BinaryFlashWrite+0x130>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f009 ffe0 	bl	800df60 <siprintf>
    fres = f_open(&gFile, (char *)fileName, (FA_WRITE | FA_READ | FA_OPEN_ALWAYS));
 8003fa0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8003fa4:	2213      	movs	r2, #19
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4832      	ldr	r0, [pc, #200]	; (8004074 <BinaryFlashWrite+0x134>)
 8003faa:	f007 f9b9 	bl	800b320 <f_open>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
    if (fres == FR_OK) {
 8003fb4:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d14f      	bne.n	800405c <BinaryFlashWrite+0x11c>
        fileSize = f_size(&gFile);        
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <BinaryFlashWrite+0x134>)
 8003fbe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003fc2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
		while(1)  {
			fres = f_read(&gFile, readBuf, sizeof(readBuf), (UINT *)&bw);
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	f107 0108 	add.w	r1, r7, #8
 8003fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd0:	4828      	ldr	r0, [pc, #160]	; (8004074 <BinaryFlashWrite+0x134>)
 8003fd2:	f007 fc26 	bl	800b822 <f_read>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
			if (fres == FR_OK) {
 8003fdc:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d12e      	bne.n	8004042 <BinaryFlashWrite+0x102>
				totalBw += bw;
 8003fe4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003fe8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
				ramsource = (uint32_t)readBuf;
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

				if (FLASH_If_Write(flashdestination, (uint32_t *)ramsource, bw/4) == FLASH_IF_OK) {
 8004000:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8004004:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004008:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	461a      	mov	r2, r3
 8004012:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 8004016:	f000 f871 	bl	80040fc <FLASH_If_Write>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d112      	bne.n	8004046 <BinaryFlashWrite+0x106>
					flashdestination += bw;
 8004020:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004024:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800402e:	4413      	add	r3, r2
 8004030:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
				}
				else {
					break;
				}

				if (totalBw >= fileSize) {
 8004034:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8004038:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800403c:	429a      	cmp	r2, r3
 800403e:	d204      	bcs.n	800404a <BinaryFlashWrite+0x10a>
			fres = f_read(&gFile, readBuf, sizeof(readBuf), (UINT *)&bw);
 8004040:	e7c1      	b.n	8003fc6 <BinaryFlashWrite+0x86>
					break;
				}
			}
			else {
				break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <BinaryFlashWrite+0x10c>
					break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <BinaryFlashWrite+0x10c>
					break;
 800404a:	bf00      	nop
			}
		}		
		f_unlink((TCHAR *)fileName);
 800404c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8004050:	4618      	mov	r0, r3
 8004052:	f008 f8ef 	bl	800c234 <f_unlink>
		f_close(&gFile);
 8004056:	4807      	ldr	r0, [pc, #28]	; (8004074 <BinaryFlashWrite+0x134>)
 8004058:	f007 ffb5 	bl	800bfc6 <f_close>
    }
}
 800405c:	bf00      	nop
 800405e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	08037000 	.word	0x08037000
 800406c:	080121b0 	.word	0x080121b0
 8004070:	080121c4 	.word	0x080121c4
 8004074:	20002bac 	.word	0x20002bac

08004078 <FLASH_If_Init>:
#include <stdio.h>
#include "flash_if.h"

void FLASH_If_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
    /* Unlock the Program memory */
    HAL_FLASH_Unlock();
 800407c:	f000 ff22 	bl	8004ec4 <HAL_FLASH_Unlock>

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <FLASH_If_Init+0x18>)
 8004082:	2234      	movs	r2, #52	; 0x34
 8004084:	60da      	str	r2, [r3, #12]

    /* Unlock the Program memory */
    HAL_FLASH_Lock();
 8004086:	f000 ff57 	bl	8004f38 <HAL_FLASH_Lock>
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000

08004094 <FLASH_If_Erase>:

uint32_t FLASH_If_Erase(uint32_t start)
{    
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    uint32_t nBrOfPages = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	623b      	str	r3, [r7, #32]
    uint32_t pageError = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitTypeDef pEraseInit;
    HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
    uint32_t ret = FLASH_IF_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_FLASH_Unlock();    
 80040ac:	f000 ff0a 	bl	8004ec4 <HAL_FLASH_Unlock>
    nBrOfPages = (FLASH_USER_END_ADDR - start) / FLASH_PAGE_SIZE;   /* FLASH_PAGE_SIZE = 0x800 */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 80040b6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80040ba:	0adb      	lsrs	r3, r3, #11
 80040bc:	623b      	str	r3, [r7, #32]

    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
    pEraseInit.PageAddress = start;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	613b      	str	r3, [r7, #16]
    pEraseInit.Banks = FLASH_BANK_1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
    pEraseInit.NbPages = nBrOfPages;        
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	617b      	str	r3, [r7, #20]
    status = HAL_FLASHEx_Erase(&pEraseInit, &pageError);
 80040ce:	f107 0218 	add.w	r2, r7, #24
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f85b 	bl	8005194 <HAL_FLASHEx_Erase>
 80040de:	4603      	mov	r3, r0
 80040e0:	77fb      	strb	r3, [r7, #31]
    
    HAL_FLASH_Lock();
 80040e2:	f000 ff29 	bl	8004f38 <HAL_FLASH_Lock>

    if (status != HAL_OK) {
 80040e6:	7ffb      	ldrb	r3, [r7, #31]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <FLASH_If_Erase+0x5c>
        ret = FLASH_IF_ERASEKO;
 80040ec:	2301      	movs	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return ret;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <FLASH_If_Write>:

uint32_t FLASH_If_Write(uint32_t destination, uint32_t *pSource, uint32_t length)
{
 80040fc:	b5b0      	push	{r4, r5, r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
    uint32_t ret = FLASH_IF_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 800410c:	f000 feda 	bl	8004ec4 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; (i < length) && (destination <= (FLASH_USER_END_ADDR-4)); i++) {
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	e024      	b.n	8004160 <FLASH_If_Write+0x64>
        if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t *)(pSource + i))) {
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	461c      	mov	r4, r3
 8004124:	4615      	mov	r5, r2
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	2002      	movs	r0, #2
 800412e:	f000 fe3b 	bl	8004da8 <HAL_FLASH_Program>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10e      	bne.n	8004156 <FLASH_If_Write+0x5a>
            if (*(uint32_t *)destination != *(uint32_t *)(pSource + i)) {
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	440b      	add	r3, r1
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <FLASH_If_Write+0x52>
                ret = FLASH_IF_WRITINGCTRL_ERROR;
 800414a:	2302      	movs	r3, #2
 800414c:	617b      	str	r3, [r7, #20]
            }
            /* Increment FLASH destination address */
            destination += 4;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e001      	b.n	800415a <FLASH_If_Write+0x5e>
        }
        else {
            ret = FLASH_IF_WRITING_ERROR;
 8004156:	2303      	movs	r3, #3
 8004158:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; (i < length) && (destination <= (FLASH_USER_END_ADDR-4)); i++) {
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3301      	adds	r3, #1
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d203      	bcs.n	8004170 <FLASH_If_Write+0x74>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <FLASH_If_Write+0x84>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d9d2      	bls.n	8004116 <FLASH_If_Write+0x1a>
        }

    }

    HAL_FLASH_Lock();
 8004170:	f000 fee2 	bl	8004f38 <HAL_FLASH_Lock>

    return ret;
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bdb0      	pop	{r4, r5, r7, pc}
 800417e:	bf00      	nop
 8004180:	0807fffc 	.word	0x0807fffc

08004184 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    GPIO_PinState state;
    int32_t funcSts = 0;    
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
    uint8_t macAddr[MAC_ADDR_LEN] = {0,};
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	813b      	strh	r3, [r7, #8]
    uint8_t ipAddr[4] = {192, 168, 0, 100};
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <main+0x90>)
 8004198:	603b      	str	r3, [r7, #0]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800419a:	f000 fc9b 	bl	8004ad4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800419e:	f000 f845 	bl	800422c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80041a2:	f000 f917 	bl	80043d4 <MX_GPIO_Init>
    MX_SPI2_Init();
 80041a6:	f000 f8b5 	bl	8004314 <MX_SPI2_Init>
    MX_USART1_UART_Init();
 80041aa:	f000 f8e9 	bl	8004380 <MX_USART1_UART_Init>
    MX_I2C2_Init();
 80041ae:	f000 f883 	bl	80042b8 <MX_I2C2_Init>
    MX_FSMC_Init();
 80041b2:	f000 f991 	bl	80044d8 <MX_FSMC_Init>
    MX_FATFS_Init();
 80041b6:	f004 fb3f 	bl	8008838 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    W5500_Init();
 80041ba:	f7fd ff91 	bl	80020e0 <W5500_Init>
    funcSts = Get_MacAddress(macAddr);
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fc fd81 	bl	8000cc8 <Get_MacAddress>
 80041c6:	60f8      	str	r0, [r7, #12]
    if (funcSts == 0) {
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <main+0x5a>
        W5500_NetConf((int8_t *)macAddr, W5500_IP_ADDRESS, W5500_SUB_NET_MASK, W5500_GATE_WAY);
 80041ce:	1d38      	adds	r0, r7, #4
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <main+0x94>)
 80041d2:	4a12      	ldr	r2, [pc, #72]	; (800421c <main+0x98>)
 80041d4:	4912      	ldr	r1, [pc, #72]	; (8004220 <main+0x9c>)
 80041d6:	f7fd ffb1 	bl	800213c <W5500_NetConf>
        W5500_DisplayNetConf();
 80041da:	f7fe f80f 	bl	80021fc <W5500_DisplayNetConf>
    }
    state = SWITCH_GetStatus();
 80041de:	f7fc fd67 	bl	8000cb0 <SWITCH_GetStatus>
 80041e2:	4603      	mov	r3, r0
 80041e4:	72fb      	strb	r3, [r7, #11]
    if (state != GPIO_PIN_SET) {
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <main+0x78>
        printf("> Start Firmware download mode\r\n");       
 80041ec:	480d      	ldr	r0, [pc, #52]	; (8004224 <main+0xa0>)
 80041ee:	f009 feab 	bl	800df48 <puts>
        ftpc_init(ipAddr);             
 80041f2:	463b      	mov	r3, r7
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fda5 	bl	8000d44 <ftpc_init>
 80041fa:	e004      	b.n	8004206 <main+0x82>
    }
    else {
        printf("> Start Application\r\n");
 80041fc:	480a      	ldr	r0, [pc, #40]	; (8004228 <main+0xa4>)
 80041fe:	f009 fea3 	bl	800df48 <puts>
        JumpToApplication();
 8004202:	f7ff fe1b 	bl	8003e3c <JumpToApplication>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {  
        FtpDownloadApplication();      
 8004206:	f7ff fe49 	bl	8003e9c <FtpDownloadApplication>
        HAL_Delay(1);
 800420a:	2001      	movs	r0, #1
 800420c:	f000 fcc4 	bl	8004b98 <HAL_Delay>
        FtpDownloadApplication();      
 8004210:	e7f9      	b.n	8004206 <main+0x82>
 8004212:	bf00      	nop
 8004214:	6400a8c0 	.word	0x6400a8c0
 8004218:	080121cc 	.word	0x080121cc
 800421c:	080121d8 	.word	0x080121d8
 8004220:	080121e8 	.word	0x080121e8
 8004224:	080121f8 	.word	0x080121f8
 8004228:	08012218 	.word	0x08012218

0800422c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b090      	sub	sp, #64	; 0x40
 8004230:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004232:	f107 0318 	add.w	r3, r7, #24
 8004236:	2228      	movs	r2, #40	; 0x28
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f008 ff74 	bl	800d128 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800424e:	2301      	movs	r3, #1
 8004250:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004256:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004258:	2300      	movs	r3, #0
 800425a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800425c:	2301      	movs	r3, #1
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004260:	2302      	movs	r3, #2
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800426a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	4618      	mov	r0, r3
 8004276:	f002 feb9 	bl	8006fec <HAL_RCC_OscConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <SystemClock_Config+0x58>
    {
        Error_Handler();
 8004280:	f000 f9aa 	bl	80045d8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004284:	230f      	movs	r3, #15
 8004286:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004288:	2302      	movs	r3, #2
 800428a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004294:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2102      	movs	r1, #2
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 f926 	bl	80074f0 <HAL_RCC_ClockConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <SystemClock_Config+0x82>
    {
        Error_Handler();
 80042aa:	f000 f995 	bl	80045d8 <Error_Handler>
    }
}
 80042ae:	bf00      	nop
 80042b0:	3740      	adds	r7, #64	; 0x40
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_I2C2_Init+0x54>)
 80042be:	4a14      	ldr	r2, [pc, #80]	; (8004310 <MX_I2C2_Init+0x58>)
 80042c0:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 50000;
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <MX_I2C2_Init+0x54>)
 80042c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80042c8:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <MX_I2C2_Init+0x54>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_I2C2_Init+0x54>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <MX_I2C2_Init+0x54>)
 80042d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042dc:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_I2C2_Init+0x54>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_I2C2_Init+0x54>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <MX_I2C2_Init+0x54>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_I2C2_Init+0x54>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <MX_I2C2_Init+0x54>)
 80042f8:	f001 fa84 	bl	8005804 <HAL_I2C_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_I2C2_Init+0x4e>
    {
        Error_Handler();
 8004302:	f000 f969 	bl	80045d8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200033d8 	.word	0x200033d8
 8004310:	40005800 	.word	0x40005800

08004314 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <MX_SPI2_Init+0x64>)
 800431a:	4a18      	ldr	r2, [pc, #96]	; (800437c <MX_SPI2_Init+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <MX_SPI2_Init+0x64>)
 8004320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004324:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <MX_SPI2_Init+0x64>)
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <MX_SPI2_Init+0x64>)
 800432e:	2200      	movs	r2, #0
 8004330:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <MX_SPI2_Init+0x64>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <MX_SPI2_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <MX_SPI2_Init+0x64>)
 8004340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004344:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <MX_SPI2_Init+0x64>)
 8004348:	2200      	movs	r2, #0
 800434a:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <MX_SPI2_Init+0x64>)
 800434e:	2200      	movs	r2, #0
 8004350:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <MX_SPI2_Init+0x64>)
 8004354:	2200      	movs	r2, #0
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <MX_SPI2_Init+0x64>)
 800435a:	2200      	movs	r2, #0
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <MX_SPI2_Init+0x64>)
 8004360:	220a      	movs	r2, #10
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004364:	4804      	ldr	r0, [pc, #16]	; (8004378 <MX_SPI2_Init+0x64>)
 8004366:	f003 fa51 	bl	800780c <HAL_SPI_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8004370:	f000 f932 	bl	80045d8 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 8004374:	bf00      	nop
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000342c 	.word	0x2000342c
 800437c:	40003800 	.word	0x40003800

08004380 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <MX_USART1_UART_Init+0x50>)
 8004388:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 800438c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004390:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 80043a6:	220c      	movs	r2, #12
 80043a8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80043b6:	4805      	ldr	r0, [pc, #20]	; (80043cc <MX_USART1_UART_Init+0x4c>)
 80043b8:	f003 ffbc 	bl	8008334 <HAL_UART_Init>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80043c2:	f000 f909 	bl	80045d8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20003484 	.word	0x20003484
 80043d0:	40013800 	.word	0x40013800

080043d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043da:	f107 0318 	add.w	r3, r7, #24
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <MX_GPIO_Init+0xf0>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <MX_GPIO_Init+0xf0>)
 80043ee:	f043 0310 	orr.w	r3, r3, #16
 80043f2:	6193      	str	r3, [r2, #24]
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <MX_GPIO_Init+0xf0>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440a:	6193      	str	r3, [r2, #24]
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	6193      	str	r3, [r2, #24]
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004436:	f043 0320 	orr.w	r3, r3, #32
 800443a:	6193      	str	r3, [r2, #24]
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <MX_GPIO_Init+0xf0>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6193      	str	r3, [r2, #24]
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <MX_GPIO_Init+0xf0>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8004460:	2200      	movs	r2, #0
 8004462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004466:	4818      	ldr	r0, [pc, #96]	; (80044c8 <MX_GPIO_Init+0xf4>)
 8004468:	f001 f9b3 	bl	80057d2 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : SW_IN1_Pin */
    GPIO_InitStruct.Pin = SW_IN1_Pin;
 800446c:	2301      	movs	r3, #1
 800446e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004474:	2301      	movs	r3, #1
 8004476:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SW_IN1_GPIO_Port, &GPIO_InitStruct);
 8004478:	f107 0318 	add.w	r3, r7, #24
 800447c:	4619      	mov	r1, r3
 800447e:	4813      	ldr	r0, [pc, #76]	; (80044cc <MX_GPIO_Init+0xf8>)
 8004480:	f000 fffc 	bl	800547c <HAL_GPIO_Init>

    /*Configure GPIO pin : SPI2_NSS_Pin */
    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8004484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004492:	2302      	movs	r3, #2
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 0318 	add.w	r3, r7, #24
 800449a:	4619      	mov	r1, r3
 800449c:	480a      	ldr	r0, [pc, #40]	; (80044c8 <MX_GPIO_Init+0xf4>)
 800449e:	f000 ffed 	bl	800547c <HAL_GPIO_Init>

    /*Configure GPIO pin : ETH_INT_Pin */
    GPIO_InitStruct.Pin = ETH_INT_Pin;
 80044a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <MX_GPIO_Init+0xfc>)
 80044aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 80044b0:	f107 0318 	add.w	r3, r7, #24
 80044b4:	4619      	mov	r1, r3
 80044b6:	4807      	ldr	r0, [pc, #28]	; (80044d4 <MX_GPIO_Init+0x100>)
 80044b8:	f000 ffe0 	bl	800547c <HAL_GPIO_Init>
}
 80044bc:	bf00      	nop
 80044be:	3728      	adds	r7, #40	; 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40010c00 	.word	0x40010c00
 80044cc:	40011000 	.word	0x40011000
 80044d0:	10110000 	.word	0x10110000
 80044d4:	40011400 	.word	0x40011400

080044d8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN FSMC_Init 0 */

    /* USER CODE END FSMC_Init 0 */

    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80044de:	f107 0310 	add.w	r3, r7, #16
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80044ec:	463b      	mov	r3, r7
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]

    /* USER CODE END FSMC_Init 1 */

    /** Perform the NAND1 memory initialization sequence
     */
    hnand1.Instance = FSMC_NAND_DEVICE;
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <MX_FSMC_Init+0xd0>)
 80044fa:	4a2c      	ldr	r2, [pc, #176]	; (80045ac <MX_FSMC_Init+0xd4>)
 80044fc:	601a      	str	r2, [r3, #0]
    /* hnand1.Init */
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004500:	2210      	movs	r2, #16
 8004502:	605a      	str	r2, [r3, #4]
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004506:	2202      	movs	r2, #2
 8004508:	609a      	str	r2, [r3, #8]
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800450a:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <MX_FSMC_Init+0xd0>)
 800450c:	2200      	movs	r2, #0
 800450e:	60da      	str	r2, [r3, #12]
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004518:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800451c:	615a      	str	r2, [r3, #20]
    hnand1.Init.TCLRSetupTime = 0;
 800451e:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
    hnand1.Init.TARSetupTime = 0;
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
    /* hnand1.Config */
    hnand1.Config.PageSize = 2048;
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <MX_FSMC_Init+0xd0>)
 800452c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
    hnand1.Config.SpareAreaSize = 64;
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
    hnand1.Config.BlockSize = 64;
 8004538:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <MX_FSMC_Init+0xd0>)
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c
    hnand1.Config.BlockNbr = 1024;
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
    hnand1.Config.PlaneNbr = 1;
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004548:	2201      	movs	r2, #1
 800454a:	635a      	str	r2, [r3, #52]	; 0x34
    hnand1.Config.PlaneSize = 1024;
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <MX_FSMC_Init+0xd0>)
 800454e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
    hnand1.Config.ExtraCommandEnable = DISABLE;
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* ComSpaceTiming */
    ComSpaceTiming.SetupTime = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
    ComSpaceTiming.WaitSetupTime = 2;
 8004560:	2302      	movs	r3, #2
 8004562:	617b      	str	r3, [r7, #20]
    ComSpaceTiming.HoldSetupTime = 2;
 8004564:	2302      	movs	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
    ComSpaceTiming.HiZSetupTime = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61fb      	str	r3, [r7, #28]
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	603b      	str	r3, [r7, #0]
    AttSpaceTiming.WaitSetupTime = 2;
 8004570:	2302      	movs	r3, #2
 8004572:	607b      	str	r3, [r7, #4]
    AttSpaceTiming.HoldSetupTime = 2;
 8004574:	2302      	movs	r3, #2
 8004576:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.HiZSetupTime = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800457c:	463a      	mov	r2, r7
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	4619      	mov	r1, r3
 8004584:	4808      	ldr	r0, [pc, #32]	; (80045a8 <MX_FSMC_Init+0xd0>)
 8004586:	f002 f970 	bl	800686a <HAL_NAND_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_FSMC_Init+0xbc>
    {
        Error_Handler();
 8004590:	f000 f822 	bl	80045d8 <Error_Handler>
    }

    /** Disconnect NADV
     */

    __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <MX_FSMC_Init+0xd8>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <MX_FSMC_Init+0xd8>)
 800459a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800459e:	61d3      	str	r3, [r2, #28]

    /* USER CODE BEGIN FSMC_Init 2 */

    /* USER CODE END FSMC_Init 2 */
}
 80045a0:	bf00      	nop
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200034cc 	.word	0x200034cc
 80045ac:	a0000060 	.word	0xa0000060
 80045b0:	40010000 	.word	0x40010000

080045b4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80045bc:	1d39      	adds	r1, r7, #4
 80045be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c2:	2201      	movs	r2, #1
 80045c4:	4803      	ldr	r0, [pc, #12]	; (80045d4 <__io_putchar+0x20>)
 80045c6:	f003 ff05 	bl	80083d4 <HAL_UART_Transmit>
    return ch;
 80045ca:	687b      	ldr	r3, [r7, #4]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20003484 	.word	0x20003484

080045d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045dc:	b672      	cpsid	i
}
 80045de:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80045e0:	e7fe      	b.n	80045e0 <Error_Handler+0x8>
	...

080045e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_MspInit+0x5c>)
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	4a14      	ldr	r2, [pc, #80]	; (8004640 <HAL_MspInit+0x5c>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6193      	str	r3, [r2, #24]
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_MspInit+0x5c>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_MspInit+0x5c>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_MspInit+0x5c>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	61d3      	str	r3, [r2, #28]
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_MspInit+0x5c>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_MspInit+0x60>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	4a04      	ldr	r2, [pc, #16]	; (8004644 <HAL_MspInit+0x60>)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	40021000 	.word	0x40021000
 8004644:	40010000 	.word	0x40010000

08004648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004650:	f107 0310 	add.w	r3, r7, #16
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_I2C_MspInit+0x74>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d124      	bne.n	80046b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 800466e:	f043 0308 	orr.w	r3, r3, #8
 8004672:	6193      	str	r3, [r2, #24]
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004680:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004686:	2312      	movs	r3, #18
 8004688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4619      	mov	r1, r3
 8004694:	480b      	ldr	r0, [pc, #44]	; (80046c4 <HAL_I2C_MspInit+0x7c>)
 8004696:	f000 fef1 	bl	800547c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 80046a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046a4:	61d3      	str	r3, [r2, #28]
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_I2C_MspInit+0x78>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046b2:	bf00      	nop
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40005800 	.word	0x40005800
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40010c00 	.word	0x40010c00

080046c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_SPI_MspInit+0x8c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d131      	bne.n	800474c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_SPI_MspInit+0x90>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4a1a      	ldr	r2, [pc, #104]	; (8004758 <HAL_SPI_MspInit+0x90>)
 80046ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f2:	61d3      	str	r3, [r2, #28]
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_SPI_MspInit+0x90>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004700:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_SPI_MspInit+0x90>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_SPI_MspInit+0x90>)
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	6193      	str	r3, [r2, #24]
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_SPI_MspInit+0x90>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004718:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800471c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004722:	2303      	movs	r3, #3
 8004724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004726:	f107 0310 	add.w	r3, r7, #16
 800472a:	4619      	mov	r1, r3
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <HAL_SPI_MspInit+0x94>)
 800472e:	f000 fea5 	bl	800547c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004740:	f107 0310 	add.w	r3, r7, #16
 8004744:	4619      	mov	r1, r3
 8004746:	4805      	ldr	r0, [pc, #20]	; (800475c <HAL_SPI_MspInit+0x94>)
 8004748:	f000 fe98 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40003800 	.word	0x40003800
 8004758:	40021000 	.word	0x40021000
 800475c:	40010c00 	.word	0x40010c00

08004760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_UART_MspInit+0x8c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d131      	bne.n	80047e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_UART_MspInit+0x90>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_UART_MspInit+0x90>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <HAL_UART_MspInit+0x90>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_UART_MspInit+0x90>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_UART_MspInit+0x90>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6193      	str	r3, [r2, #24]
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_UART_MspInit+0x90>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b6:	2302      	movs	r3, #2
 80047b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ba:	2303      	movs	r3, #3
 80047bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	4619      	mov	r1, r3
 80047c4:	480b      	ldr	r0, [pc, #44]	; (80047f4 <HAL_UART_MspInit+0x94>)
 80047c6:	f000 fe59 	bl	800547c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	4619      	mov	r1, r3
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <HAL_UART_MspInit+0x94>)
 80047e0:	f000 fe4c 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80047e4:	bf00      	nop
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40010800 	.word	0x40010800

080047f8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800480c:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <HAL_FSMC_MspInit+0x90>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d135      	bne.n	8004880 <HAL_FSMC_MspInit+0x88>
    return;
  }
  FSMC_Initialized = 1;
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_FSMC_MspInit+0x90>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_FSMC_MspInit+0x94>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_FSMC_MspInit+0x94>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6153      	str	r3, [r2, #20]
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_FSMC_MspInit+0x94>)
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004832:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800483c:	2303      	movs	r3, #3
 800483e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	4619      	mov	r1, r3
 8004846:	4812      	ldr	r0, [pc, #72]	; (8004890 <HAL_FSMC_MspInit+0x98>)
 8004848:	f000 fe18 	bl	800547c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800484c:	f64d 03b3 	movw	r3, #55475	; 0xd8b3
 8004850:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	2302      	movs	r3, #2
 8004854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004856:	2303      	movs	r3, #3
 8004858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	4619      	mov	r1, r3
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <HAL_FSMC_MspInit+0x9c>)
 8004862:	f000 fe0b 	bl	800547c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004866:	2340      	movs	r3, #64	; 0x40
 8004868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	4806      	ldr	r0, [pc, #24]	; (8004894 <HAL_FSMC_MspInit+0x9c>)
 800487a:	f000 fdff 	bl	800547c <HAL_GPIO_Init>
 800487e:	e000      	b.n	8004882 <HAL_FSMC_MspInit+0x8a>
    return;
 8004880:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	2000350c 	.word	0x2000350c
 800488c:	40021000 	.word	0x40021000
 8004890:	40011800 	.word	0x40011800
 8004894:	40011400 	.word	0x40011400

08004898 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80048a0:	f7ff ffaa 	bl	80047f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048b0:	e7fe      	b.n	80048b0 <NMI_Handler+0x4>

080048b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b6:	e7fe      	b.n	80048b6 <HardFault_Handler+0x4>

080048b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048bc:	e7fe      	b.n	80048bc <MemManage_Handler+0x4>

080048be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048c2:	e7fe      	b.n	80048c2 <BusFault_Handler+0x4>

080048c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <UsageFault_Handler+0x4>

080048ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048f2:	f000 f935 	bl	8004b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
	return 1;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <_kill>:

int _kill(int pid, int sig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004912:	f008 fbd1 	bl	800d0b8 <__errno>
 8004916:	4603      	mov	r3, r0
 8004918:	2216      	movs	r2, #22
 800491a:	601a      	str	r2, [r3, #0]
	return -1;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_exit>:

void _exit (int status)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ffe7 	bl	8004908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800493a:	e7fe      	b.n	800493a <_exit+0x12>

0800493c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e00a      	b.n	8004964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800494e:	f3af 8000 	nop.w
 8004952:	4601      	mov	r1, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	60ba      	str	r2, [r7, #8]
 800495a:	b2ca      	uxtb	r2, r1
 800495c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	3301      	adds	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	dbf0      	blt.n	800494e <_read+0x12>
	}

return len;
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e009      	b.n	800499c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	60ba      	str	r2, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fe0f 	bl	80045b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3301      	adds	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	dbf1      	blt.n	8004988 <_write+0x12>
	}
	return len;
 80049a4:	687b      	ldr	r3, [r7, #4]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_close>:

int _close(int file)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	return -1;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049d4:	605a      	str	r2, [r3, #4]
	return 0;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <_isatty>:

int _isatty(int file)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
	return 1;
 80049ea:	2301      	movs	r3, #1
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
	return 0;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
	...

08004a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <_sbrk+0x5c>)
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <_sbrk+0x60>)
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <_sbrk+0x64>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <_sbrk+0x64>)
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <_sbrk+0x68>)
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <_sbrk+0x64>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d207      	bcs.n	8004a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a40:	f008 fb3a 	bl	800d0b8 <__errno>
 8004a44:	4603      	mov	r3, r0
 8004a46:	220c      	movs	r2, #12
 8004a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	e009      	b.n	8004a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <_sbrk+0x64>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <_sbrk+0x64>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <_sbrk+0x64>)
 8004a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20018000 	.word	0x20018000
 8004a70:	00000400 	.word	0x00000400
 8004a74:	20003510 	.word	0x20003510
 8004a78:	200045e0 	.word	0x200045e0

08004a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a88:	f7ff fff8 	bl	8004a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004a8e:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004a90:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a94:	e002      	b.n	8004a9c <LoopCopyDataInit>

08004a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9a:	3304      	adds	r3, #4

08004a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa0:	d3f9      	bcc.n	8004a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004aa4:	4c09      	ldr	r4, [pc, #36]	; (8004acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa8:	e001      	b.n	8004aae <LoopFillZerobss>

08004aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aac:	3204      	adds	r2, #4

08004aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab0:	d3fb      	bcc.n	8004aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ab2:	f008 fb07 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ab6:	f7ff fb65 	bl	8004184 <main>
  bx lr
 8004aba:	4770      	bx	lr
  ldr r0, =_sdata
 8004abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8004ac4:	080345b0 	.word	0x080345b0
  ldr r2, =_sbss
 8004ac8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8004acc:	200045dc 	.word	0x200045dc

08004ad0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ad0:	e7fe      	b.n	8004ad0 <ADC1_2_IRQHandler>
	...

08004ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_Init+0x28>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a07      	ldr	r2, [pc, #28]	; (8004afc <HAL_Init+0x28>)
 8004ade:	f043 0310 	orr.w	r3, r3, #16
 8004ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f000 f92b 	bl	8004d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f000 f808 	bl	8004b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af0:	f7ff fd78 	bl	80045e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40022000 	.word	0x40022000

08004b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_InitTick+0x54>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <HAL_InitTick+0x58>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f935 	bl	8004d8e <HAL_SYSTICK_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e00e      	b.n	8004b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b0f      	cmp	r3, #15
 8004b32:	d80a      	bhi.n	8004b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b34:	2200      	movs	r2, #0
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	f000 f90b 	bl	8004d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b40:	4a06      	ldr	r2, [pc, #24]	; (8004b5c <HAL_InitTick+0x5c>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000048 	.word	0x20000048
 8004b58:	20000050 	.word	0x20000050
 8004b5c:	2000004c 	.word	0x2000004c

08004b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_IncTick+0x1c>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_IncTick+0x20>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <HAL_IncTick+0x20>)
 8004b72:	6013      	str	r3, [r2, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	20000050 	.word	0x20000050
 8004b80:	20003514 	.word	0x20003514

08004b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return uwTick;
 8004b88:	4b02      	ldr	r3, [pc, #8]	; (8004b94 <HAL_GetTick+0x10>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20003514 	.word	0x20003514

08004b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_GetTick>
 8004ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d005      	beq.n	8004bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_Delay+0x44>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bbe:	bf00      	nop
 8004bc0:	f7ff ffe0 	bl	8004b84 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d8f7      	bhi.n	8004bc0 <HAL_Delay+0x28>
  {
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000050 	.word	0x20000050

08004be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <__NVIC_SetPriorityGrouping+0x44>)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	60d3      	str	r3, [r2, #12]
}
 8004c18:	bf00      	nop
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <__NVIC_GetPriorityGrouping+0x18>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 0307 	and.w	r3, r3, #7
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	; (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	; (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf28      	it	cs
 8004cb6:	2304      	movcs	r3, #4
 8004cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d902      	bls.n	8004cc8 <NVIC_EncodePriority+0x30>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	e000      	b.n	8004cca <NVIC_EncodePriority+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	401a      	ands	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43d9      	mvns	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	4313      	orrs	r3, r2
         );
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d0c:	d301      	bcc.n	8004d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e00f      	b.n	8004d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d12:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <SysTick_Config+0x40>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	f7ff ff90 	bl	8004c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <SysTick_Config+0x40>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <SysTick_Config+0x40>)
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	e000e010 	.word	0xe000e010

08004d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff49 	bl	8004be0 <__NVIC_SetPriorityGrouping>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d68:	f7ff ff5e 	bl	8004c28 <__NVIC_GetPriorityGrouping>
 8004d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff90 	bl	8004c98 <NVIC_EncodePriority>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff5f 	bl	8004c44 <__NVIC_SetPriority>
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ffb0 	bl	8004cfc <SysTick_Config>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_FLASH_Program+0x110>)
 8004dc4:	7e1b      	ldrb	r3, [r3, #24]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_FLASH_Program+0x26>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e070      	b.n	8004eb0 <HAL_FLASH_Program+0x108>
 8004dce:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_FLASH_Program+0x110>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4a39      	ldr	r2, [pc, #228]	; (8004ebc <HAL_FLASH_Program+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d806      	bhi.n	8004dea <HAL_FLASH_Program+0x42>
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004de0:	f000 f8e8 	bl	8004fb4 <FLASH_WaitForLastOperation>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]
 8004de8:	e005      	b.n	8004df6 <HAL_FLASH_Program+0x4e>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8004dea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dee:	f000 f927 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d155      	bne.n	8004ea8 <HAL_FLASH_Program+0x100>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_FLASH_Program+0x60>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004e02:	2301      	movs	r3, #1
 8004e04:	757b      	strb	r3, [r7, #21]
 8004e06:	e007      	b.n	8004e18 <HAL_FLASH_Program+0x70>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d102      	bne.n	8004e14 <HAL_FLASH_Program+0x6c>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	757b      	strb	r3, [r7, #21]
 8004e12:	e001      	b.n	8004e18 <HAL_FLASH_Program+0x70>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004e14:	2304      	movs	r3, #4
 8004e16:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75bb      	strb	r3, [r7, #22]
 8004e1c:	e03e      	b.n	8004e9c <HAL_FLASH_Program+0xf4>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004e1e:	7dbb      	ldrb	r3, [r7, #22]
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	eb02 0c03 	add.w	ip, r2, r3
 8004e28:	7dbb      	ldrb	r3, [r7, #22]
 8004e2a:	0119      	lsls	r1, r3, #4
 8004e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e30:	f1c1 0620 	rsb	r6, r1, #32
 8004e34:	f1a1 0020 	sub.w	r0, r1, #32
 8004e38:	fa22 f401 	lsr.w	r4, r2, r1
 8004e3c:	fa03 f606 	lsl.w	r6, r3, r6
 8004e40:	4334      	orrs	r4, r6
 8004e42:	fa23 f000 	lsr.w	r0, r3, r0
 8004e46:	4304      	orrs	r4, r0
 8004e48:	fa23 f501 	lsr.w	r5, r3, r1
 8004e4c:	b2a3      	uxth	r3, r4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4660      	mov	r0, ip
 8004e52:	f000 f887 	bl	8004f64 <FLASH_Program_HalfWord>

#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_FLASH_Program+0x114>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d80c      	bhi.n	8004e78 <HAL_FLASH_Program+0xd0>
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e62:	f000 f8a7 	bl	8004fb4 <FLASH_WaitForLastOperation>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <HAL_FLASH_Program+0x118>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <HAL_FLASH_Program+0x118>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6113      	str	r3, [r2, #16]
 8004e76:	e00b      	b.n	8004e90 <HAL_FLASH_Program+0xe8>
#if defined(FLASH_BANK2_END)
      }
      else
      {
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8004e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e7c:	f000 f8e0 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 8004e80:	4603      	mov	r3, r0
 8004e82:	75fb      	strb	r3, [r7, #23]
        
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_FLASH_Program+0x118>)
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <HAL_FLASH_Program+0x118>)
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	6513      	str	r3, [r2, #80]	; 0x50
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_FLASH_Program+0xfe>
    for (index = 0U; index < nbiterations; index++)
 8004e96:	7dbb      	ldrb	r3, [r7, #22]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	75bb      	strb	r3, [r7, #22]
 8004e9c:	7dba      	ldrb	r2, [r7, #22]
 8004e9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d3bc      	bcc.n	8004e1e <HAL_FLASH_Program+0x76>
 8004ea4:	e000      	b.n	8004ea8 <HAL_FLASH_Program+0x100>
      {
        break;
 8004ea6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_FLASH_Program+0x110>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	761a      	strb	r2, [r3, #24]

  return status;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb8:	20003518 	.word	0x20003518
 8004ebc:	0807ffff 	.word	0x0807ffff
 8004ec0:	40022000 	.word	0x40022000

08004ec4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004edc:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <HAL_FLASH_Unlock+0x6c>)
 8004ede:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <HAL_FLASH_Unlock+0x70>)
 8004ee4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	71fb      	strb	r3, [r7, #7]
    }
  }
#if defined(FLASH_BANK2_END)
  if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <HAL_FLASH_Unlock+0x5a>
  {
    /* Authorize the FLASH BANK2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_FLASH_Unlock+0x6c>)
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004f08:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_FLASH_Unlock+0x70>)
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Verify Flash BANK2 is unlocked */
    if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <HAL_FLASH_Unlock+0x68>)
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_FLASH_Unlock+0x5a>
    {
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40022000 	.word	0x40022000
 8004f30:	45670123 	.word	0x45670123
 8004f34:	cdef89ab 	.word	0xcdef89ab

08004f38 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_FLASH_Lock+0x28>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_FLASH_Lock+0x28>)
 8004f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f46:	6113      	str	r3, [r2, #16]
  
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_FLASH_Lock+0x28>)
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_FLASH_Lock+0x28>)
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	6513      	str	r3, [r2, #80]	; 0x50

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40022000 	.word	0x40022000

08004f64 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <FLASH_Program_HalfWord+0x44>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	61da      	str	r2, [r3, #28]
  
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <FLASH_Program_HalfWord+0x48>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d806      	bhi.n	8004f8c <FLASH_Program_HalfWord+0x28>
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <FLASH_Program_HalfWord+0x4c>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	4a0b      	ldr	r2, [pc, #44]	; (8004fb0 <FLASH_Program_HalfWord+0x4c>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6113      	str	r3, [r2, #16]
 8004f8a:	e005      	b.n	8004f98 <FLASH_Program_HalfWord+0x34>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <FLASH_Program_HalfWord+0x4c>)
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <FLASH_Program_HalfWord+0x4c>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6513      	str	r3, [r2, #80]	; 0x50
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	801a      	strh	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	20003518 	.word	0x20003518
 8004fac:	0807ffff 	.word	0x0807ffff
 8004fb0:	40022000 	.word	0x40022000

08004fb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004fbc:	f7ff fde2 	bl	8004b84 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004fc2:	e010      	b.n	8004fe6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d00c      	beq.n	8004fe6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <FLASH_WaitForLastOperation+0x2e>
 8004fd2:	f7ff fdd7 	bl	8004b84 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d201      	bcs.n	8004fe6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e025      	b.n	8005032 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e8      	bne.n	8004fc4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 8005000:	2220      	movs	r2, #32
 8005002:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <FLASH_WaitForLastOperation+0x88>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005028:	f000 f84a 	bl	80050c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40022000 	.word	0x40022000

08005040 <FLASH_WaitForLastOperationBank2>:
  * @brief  Wait for a FLASH BANK2 operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)
{ 
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005048:	f7ff fd9c 	bl	8004b84 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 800504e:	e010      	b.n	8005072 <FLASH_WaitForLastOperationBank2+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d00c      	beq.n	8005072 <FLASH_WaitForLastOperationBank2+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <FLASH_WaitForLastOperationBank2+0x2e>
 800505e:	f7ff fd91 	bl	8004b84 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d201      	bcs.n	8005072 <FLASH_WaitForLastOperationBank2+0x32>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e01f      	b.n	80050b2 <FLASH_WaitForLastOperationBank2+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <FLASH_WaitForLastOperationBank2+0x7c>)
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e8      	bne.n	8005050 <FLASH_WaitForLastOperationBank2+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK2))
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <FLASH_WaitForLastOperationBank2+0x7c>)
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <FLASH_WaitForLastOperationBank2+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <FLASH_WaitForLastOperationBank2+0x7c>)
 800508c:	2220      	movs	r2, #32
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <FLASH_WaitForLastOperationBank2+0x7c>)
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <FLASH_WaitForLastOperationBank2+0x68>
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <FLASH_WaitForLastOperationBank2+0x7c>)
 800509e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <FLASH_WaitForLastOperationBank2+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80050a8:	f000 f80a 	bl	80050c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <FLASH_WaitForLastOperationBank2+0x72>
  }

  /* If there is an error flag set */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
  
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40022000 	.word	0x40022000

080050c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
 80050ca:	4b30      	ldr	r3, [pc, #192]	; (800518c <FLASH_SetErrorCode+0xcc>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <FLASH_SetErrorCode+0x22>
 80050d6:	4b2d      	ldr	r3, [pc, #180]	; (800518c <FLASH_SetErrorCode+0xcc>)
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <FLASH_SetErrorCode+0x36>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f043 0302 	orr.w	r3, r3, #2
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 80050ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f043 1310 	orr.w	r3, r3, #1048592	; 0x100010
 80050f4:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_WRPERR;
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <FLASH_SetErrorCode+0xcc>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <FLASH_SetErrorCode+0x4e>
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <FLASH_SetErrorCode+0xcc>)
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <FLASH_SetErrorCode+0x62>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800510e:	4b20      	ldr	r3, [pc, #128]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 8005118:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
 8005120:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_PGERR;
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <FLASH_SetErrorCode+0xcc>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <FLASH_SetErrorCode+0x86>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <FLASH_SetErrorCode+0xd0>)
 8005138:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <FLASH_SetErrorCode+0xcc>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <FLASH_SetErrorCode+0xcc>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f240 1201 	movw	r2, #257	; 0x101
 800514c:	4293      	cmp	r3, r2
 800514e:	d106      	bne.n	800515e <FLASH_SetErrorCode+0x9e>
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <FLASH_SetErrorCode+0xcc>)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <FLASH_SetErrorCode+0xcc>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	61d3      	str	r3, [r2, #28]
}  
 800515c:	e011      	b.n	8005182 <FLASH_SetErrorCode+0xc2>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f003 0335 	and.w	r3, r3, #53	; 0x35
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <FLASH_SetErrorCode+0xb2>
 8005168:	4a08      	ldr	r2, [pc, #32]	; (800518c <FLASH_SetErrorCode+0xcc>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f003 0335 	and.w	r3, r3, #53	; 0x35
 8005170:	60d3      	str	r3, [r2, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <FLASH_SetErrorCode+0xc2>
 800517a:	4a04      	ldr	r2, [pc, #16]	; (800518c <FLASH_SetErrorCode+0xcc>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	64d3      	str	r3, [r2, #76]	; 0x4c
}  
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40022000 	.word	0x40022000
 8005190:	20003518 	.word	0x20003518

08005194 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051a6:	4b73      	ldr	r3, [pc, #460]	; (8005374 <HAL_FLASHEx_Erase+0x1e0>)
 80051a8:	7e1b      	ldrb	r3, [r3, #24]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_FLASHEx_Erase+0x1e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e0db      	b.n	800536a <HAL_FLASHEx_Erase+0x1d6>
 80051b2:	4b70      	ldr	r3, [pc, #448]	; (8005374 <HAL_FLASHEx_Erase+0x1e0>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d166      	bne.n	800528e <HAL_FLASHEx_Erase+0xfa>
  {
#if defined(FLASH_BANK2_END)
    if (pEraseInit->Banks == FLASH_BANK_BOTH)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d12f      	bne.n	8005228 <HAL_FLASHEx_Erase+0x94>
    {
      /* Mass Erase requested for Bank1 and Bank2 */
      /* Wait for last operation to be completed */
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 80051c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051cc:	f7ff fef2 	bl	8004fb4 <FLASH_WaitForLastOperation>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 80c5 	bne.w	8005362 <HAL_FLASHEx_Erase+0x1ce>
          (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 80051d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051dc:	f7ff ff30 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 80051e0:	4603      	mov	r3, r0
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 80bd 	bne.w	8005362 <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_BOTH);
 80051e8:	2003      	movs	r0, #3
 80051ea:	f000 f8c9 	bl	8005380 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 80051ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051f2:	f7ff fedf 	bl	8004fb4 <FLASH_WaitForLastOperation>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <HAL_FLASHEx_Erase+0x7a>
            (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 80051fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005200:	f7ff ff1e 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 8005204:	4603      	mov	r3, r0
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_FLASHEx_Erase+0x7a>
        {
          status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
        }
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800520e:	4b5a      	ldr	r3, [pc, #360]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	4a59      	ldr	r2, [pc, #356]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	6113      	str	r3, [r2, #16]
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 800521a:	4b57      	ldr	r3, [pc, #348]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	4a56      	ldr	r2, [pc, #344]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	6513      	str	r3, [r2, #80]	; 0x50
 8005226:	e09c      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
      }
    }
    else if (pEraseInit->Banks == FLASH_BANK_2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d117      	bne.n	8005260 <HAL_FLASHEx_Erase+0xcc>
    {
      /* Mass Erase requested for Bank2 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005230:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005234:	f7ff ff04 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 8091 	bne.w	8005362 <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_2);
 8005240:	2002      	movs	r0, #2
 8005242:	f000 f89d 	bl	8005380 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 8005246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800524a:	f7ff fef9 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 8005252:	4b49      	ldr	r3, [pc, #292]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	4a48      	ldr	r2, [pc, #288]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6513      	str	r3, [r2, #80]	; 0x50
 800525e:	e080      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005264:	f7ff fea6 	bl	8004fb4 <FLASH_WaitForLastOperation>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d179      	bne.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800526e:	2001      	movs	r0, #1
 8005270:	f000 f886 	bl	8005380 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005278:	f7ff fe9c 	bl	8004fb4 <FLASH_WaitForLastOperation>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005280:	4b3d      	ldr	r3, [pc, #244]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	4a3c      	ldr	r2, [pc, #240]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6113      	str	r3, [r2, #16]
 800528c:	e069      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
#if defined(FLASH_BANK2_END)
    /* Page Erase requested on address located on bank2 */
    if(pEraseInit->PageAddress > FLASH_BANK1_END)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4a3a      	ldr	r2, [pc, #232]	; (800537c <HAL_FLASHEx_Erase+0x1e8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d932      	bls.n	80052fe <HAL_FLASHEx_Erase+0x16a>
    {   
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800529c:	f7ff fed0 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d15d      	bne.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	601a      	str	r2, [r3, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	e019      	b.n	80052ea <HAL_FLASHEx_Erase+0x156>
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f000 f8aa 	bl	8005410 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 80052bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052c0:	f7ff febe 	bl	8005040 <FLASH_WaitForLastOperationBank2>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 80052c8:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 80052ce:	f023 0302 	bic.w	r3, r3, #2
 80052d2:	6513      	str	r3, [r2, #80]	; 0x50
          
          if (status != HAL_OK)
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_FLASHEx_Erase+0x14e>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	601a      	str	r2, [r3, #0]
            break;
 80052e0:	e03f      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e8:	60bb      	str	r3, [r7, #8]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	02db      	lsls	r3, r3, #11
 80052f4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3dc      	bcc.n	80052b6 <HAL_FLASHEx_Erase+0x122>
 80052fc:	e031      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80052fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005302:	f7ff fe57 	bl	8004fb4 <FLASH_WaitForLastOperation>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d12a      	bne.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	e019      	b.n	8005350 <HAL_FLASHEx_Erase+0x1bc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	f000 f877 	bl	8005410 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005326:	f7ff fe45 	bl	8004fb4 <FLASH_WaitForLastOperation>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	4a11      	ldr	r2, [pc, #68]	; (8005378 <HAL_FLASHEx_Erase+0x1e4>)
 8005334:	f023 0302 	bic.w	r3, r3, #2
 8005338:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_FLASHEx_Erase+0x1b4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	601a      	str	r2, [r3, #0]
            break;
 8005346:	e00c      	b.n	8005362 <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	02da      	lsls	r2, r3, #11
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3dc      	bcc.n	800531c <HAL_FLASHEx_Erase+0x188>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005362:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_FLASHEx_Erase+0x1e0>)
 8005364:	2200      	movs	r2, #0
 8005366:	761a      	strb	r2, [r3, #24]

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20003518 	.word	0x20003518
 8005378:	40022000 	.word	0x40022000
 800537c:	0807ffff 	.word	0x0807ffff

08005380 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005388:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <FLASH_MassErase+0x88>)
 800538a:	2200      	movs	r2, #0
 800538c:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(Banks == FLASH_BANK_BOTH)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d118      	bne.n	80053c6 <FLASH_MassErase+0x46>
  {
    /* bank1 & bank2 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005394:	4b1d      	ldr	r3, [pc, #116]	; (800540c <FLASH_MassErase+0x8c>)
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	4a1c      	ldr	r2, [pc, #112]	; (800540c <FLASH_MassErase+0x8c>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 80053a0:	4b1a      	ldr	r3, [pc, #104]	; (800540c <FLASH_MassErase+0x8c>)
 80053a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <FLASH_MassErase+0x8c>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6513      	str	r3, [r2, #80]	; 0x50
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80053ac:	4b17      	ldr	r3, [pc, #92]	; (800540c <FLASH_MassErase+0x8c>)
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	4a16      	ldr	r2, [pc, #88]	; (800540c <FLASH_MassErase+0x8c>)
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <FLASH_MassErase+0x8c>)
 80053ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <FLASH_MassErase+0x8c>)
 80053be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c2:	6513      	str	r3, [r2, #80]	; 0x50
    SET_BIT(FLASH->CR, FLASH_CR_MER);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80053c4:	e01b      	b.n	80053fe <FLASH_MassErase+0x7e>
  else if(Banks == FLASH_BANK_2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d10c      	bne.n	80053e6 <FLASH_MassErase+0x66>
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <FLASH_MassErase+0x8c>)
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	4a0e      	ldr	r2, [pc, #56]	; (800540c <FLASH_MassErase+0x8c>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	6513      	str	r3, [r2, #80]	; 0x50
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <FLASH_MassErase+0x8c>)
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	4a0b      	ldr	r2, [pc, #44]	; (800540c <FLASH_MassErase+0x8c>)
 80053de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e2:	6513      	str	r3, [r2, #80]	; 0x50
}
 80053e4:	e00b      	b.n	80053fe <FLASH_MassErase+0x7e>
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <FLASH_MassErase+0x8c>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4a08      	ldr	r2, [pc, #32]	; (800540c <FLASH_MassErase+0x8c>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <FLASH_MassErase+0x8c>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4a05      	ldr	r2, [pc, #20]	; (800540c <FLASH_MassErase+0x8c>)
 80053f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fc:	6113      	str	r3, [r2, #16]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	20003518 	.word	0x20003518
 800540c:	40022000 	.word	0x40022000

08005410 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <FLASH_PageErase+0x60>)
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(PageAddress > FLASH_BANK1_END)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <FLASH_PageErase+0x64>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d90f      	bls.n	8005446 <FLASH_PageErase+0x36>
  { 
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR2, FLASH_CR2_PER);
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <FLASH_PageErase+0x68>)
 8005428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <FLASH_PageErase+0x68>)
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	6513      	str	r3, [r2, #80]	; 0x50
    WRITE_REG(FLASH->AR2, PageAddress);
 8005432:	4a11      	ldr	r2, [pc, #68]	; (8005478 <FLASH_PageErase+0x68>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6553      	str	r3, [r2, #84]	; 0x54
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8005438:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <FLASH_PageErase+0x68>)
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	4a0e      	ldr	r2, [pc, #56]	; (8005478 <FLASH_PageErase+0x68>)
 800543e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005442:	6513      	str	r3, [r2, #80]	; 0x50
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005444:	e00e      	b.n	8005464 <FLASH_PageErase+0x54>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <FLASH_PageErase+0x68>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <FLASH_PageErase+0x68>)
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <FLASH_PageErase+0x68>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <FLASH_PageErase+0x68>)
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	4a06      	ldr	r2, [pc, #24]	; (8005478 <FLASH_PageErase+0x68>)
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	6113      	str	r3, [r2, #16]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20003518 	.word	0x20003518
 8005474:	0807ffff 	.word	0x0807ffff
 8005478:	40022000 	.word	0x40022000

0800547c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800547c:	b480      	push	{r7}
 800547e:	b08b      	sub	sp, #44	; 0x2c
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800548e:	e179      	b.n	8005784 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005490:	2201      	movs	r2, #1
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f040 8168 	bne.w	800577e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4a96      	ldr	r2, [pc, #600]	; (800570c <HAL_GPIO_Init+0x290>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d05e      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
 80054b8:	4a94      	ldr	r2, [pc, #592]	; (800570c <HAL_GPIO_Init+0x290>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d875      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054be:	4a94      	ldr	r2, [pc, #592]	; (8005710 <HAL_GPIO_Init+0x294>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d058      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
 80054c4:	4a92      	ldr	r2, [pc, #584]	; (8005710 <HAL_GPIO_Init+0x294>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d86f      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054ca:	4a92      	ldr	r2, [pc, #584]	; (8005714 <HAL_GPIO_Init+0x298>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d052      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
 80054d0:	4a90      	ldr	r2, [pc, #576]	; (8005714 <HAL_GPIO_Init+0x298>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d869      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054d6:	4a90      	ldr	r2, [pc, #576]	; (8005718 <HAL_GPIO_Init+0x29c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d04c      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
 80054dc:	4a8e      	ldr	r2, [pc, #568]	; (8005718 <HAL_GPIO_Init+0x29c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d863      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054e2:	4a8e      	ldr	r2, [pc, #568]	; (800571c <HAL_GPIO_Init+0x2a0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d046      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
 80054e8:	4a8c      	ldr	r2, [pc, #560]	; (800571c <HAL_GPIO_Init+0x2a0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d85d      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054ee:	2b12      	cmp	r3, #18
 80054f0:	d82a      	bhi.n	8005548 <HAL_GPIO_Init+0xcc>
 80054f2:	2b12      	cmp	r3, #18
 80054f4:	d859      	bhi.n	80055aa <HAL_GPIO_Init+0x12e>
 80054f6:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <HAL_GPIO_Init+0x80>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005577 	.word	0x08005577
 8005500:	08005551 	.word	0x08005551
 8005504:	08005563 	.word	0x08005563
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055ab 	.word	0x080055ab
 8005510:	080055ab 	.word	0x080055ab
 8005514:	080055ab 	.word	0x080055ab
 8005518:	080055ab 	.word	0x080055ab
 800551c:	080055ab 	.word	0x080055ab
 8005520:	080055ab 	.word	0x080055ab
 8005524:	080055ab 	.word	0x080055ab
 8005528:	080055ab 	.word	0x080055ab
 800552c:	080055ab 	.word	0x080055ab
 8005530:	080055ab 	.word	0x080055ab
 8005534:	080055ab 	.word	0x080055ab
 8005538:	080055ab 	.word	0x080055ab
 800553c:	080055ab 	.word	0x080055ab
 8005540:	08005559 	.word	0x08005559
 8005544:	0800556d 	.word	0x0800556d
 8005548:	4a75      	ldr	r2, [pc, #468]	; (8005720 <HAL_GPIO_Init+0x2a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800554e:	e02c      	b.n	80055aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	623b      	str	r3, [r7, #32]
          break;
 8005556:	e029      	b.n	80055ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	3304      	adds	r3, #4
 800555e:	623b      	str	r3, [r7, #32]
          break;
 8005560:	e024      	b.n	80055ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	3308      	adds	r3, #8
 8005568:	623b      	str	r3, [r7, #32]
          break;
 800556a:	e01f      	b.n	80055ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	330c      	adds	r3, #12
 8005572:	623b      	str	r3, [r7, #32]
          break;
 8005574:	e01a      	b.n	80055ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800557e:	2304      	movs	r3, #4
 8005580:	623b      	str	r3, [r7, #32]
          break;
 8005582:	e013      	b.n	80055ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800558c:	2308      	movs	r3, #8
 800558e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	611a      	str	r2, [r3, #16]
          break;
 8005596:	e009      	b.n	80055ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005598:	2308      	movs	r3, #8
 800559a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	615a      	str	r2, [r3, #20]
          break;
 80055a2:	e003      	b.n	80055ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80055a4:	2300      	movs	r3, #0
 80055a6:	623b      	str	r3, [r7, #32]
          break;
 80055a8:	e000      	b.n	80055ac <HAL_GPIO_Init+0x130>
          break;
 80055aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2bff      	cmp	r3, #255	; 0xff
 80055b0:	d801      	bhi.n	80055b6 <HAL_GPIO_Init+0x13a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	e001      	b.n	80055ba <HAL_GPIO_Init+0x13e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2bff      	cmp	r3, #255	; 0xff
 80055c0:	d802      	bhi.n	80055c8 <HAL_GPIO_Init+0x14c>
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	e002      	b.n	80055ce <HAL_GPIO_Init+0x152>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	3b08      	subs	r3, #8
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	210f      	movs	r1, #15
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80c1 	beq.w	800577e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80055fc:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_GPIO_Init+0x2a8>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	4a48      	ldr	r2, [pc, #288]	; (8005724 <HAL_GPIO_Init+0x2a8>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6193      	str	r3, [r2, #24]
 8005608:	4b46      	ldr	r3, [pc, #280]	; (8005724 <HAL_GPIO_Init+0x2a8>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005614:	4a44      	ldr	r2, [pc, #272]	; (8005728 <HAL_GPIO_Init+0x2ac>)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	3302      	adds	r3, #2
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	220f      	movs	r2, #15
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3c      	ldr	r2, [pc, #240]	; (800572c <HAL_GPIO_Init+0x2b0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01f      	beq.n	8005680 <HAL_GPIO_Init+0x204>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3b      	ldr	r2, [pc, #236]	; (8005730 <HAL_GPIO_Init+0x2b4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d019      	beq.n	800567c <HAL_GPIO_Init+0x200>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3a      	ldr	r2, [pc, #232]	; (8005734 <HAL_GPIO_Init+0x2b8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_GPIO_Init+0x1fc>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a39      	ldr	r2, [pc, #228]	; (8005738 <HAL_GPIO_Init+0x2bc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00d      	beq.n	8005674 <HAL_GPIO_Init+0x1f8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a38      	ldr	r2, [pc, #224]	; (800573c <HAL_GPIO_Init+0x2c0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <HAL_GPIO_Init+0x1f4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a37      	ldr	r2, [pc, #220]	; (8005740 <HAL_GPIO_Init+0x2c4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_GPIO_Init+0x1f0>
 8005668:	2305      	movs	r3, #5
 800566a:	e00a      	b.n	8005682 <HAL_GPIO_Init+0x206>
 800566c:	2306      	movs	r3, #6
 800566e:	e008      	b.n	8005682 <HAL_GPIO_Init+0x206>
 8005670:	2304      	movs	r3, #4
 8005672:	e006      	b.n	8005682 <HAL_GPIO_Init+0x206>
 8005674:	2303      	movs	r3, #3
 8005676:	e004      	b.n	8005682 <HAL_GPIO_Init+0x206>
 8005678:	2302      	movs	r3, #2
 800567a:	e002      	b.n	8005682 <HAL_GPIO_Init+0x206>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_GPIO_Init+0x206>
 8005680:	2300      	movs	r3, #0
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	f002 0203 	and.w	r2, r2, #3
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	4093      	lsls	r3, r2
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_GPIO_Init+0x2ac>)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	3302      	adds	r3, #2
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d006      	beq.n	80056ba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80056ac:	4b25      	ldr	r3, [pc, #148]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4924      	ldr	r1, [pc, #144]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]
 80056b8:	e006      	b.n	80056c8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	4920      	ldr	r1, [pc, #128]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056d4:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	491a      	ldr	r1, [pc, #104]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60cb      	str	r3, [r1, #12]
 80056e0:	e006      	b.n	80056f0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	4916      	ldr	r1, [pc, #88]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d025      	beq.n	8005748 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80056fc:	4b11      	ldr	r3, [pc, #68]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4910      	ldr	r1, [pc, #64]	; (8005744 <HAL_GPIO_Init+0x2c8>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]
 8005708:	e025      	b.n	8005756 <HAL_GPIO_Init+0x2da>
 800570a:	bf00      	nop
 800570c:	10320000 	.word	0x10320000
 8005710:	10310000 	.word	0x10310000
 8005714:	10220000 	.word	0x10220000
 8005718:	10210000 	.word	0x10210000
 800571c:	10120000 	.word	0x10120000
 8005720:	10110000 	.word	0x10110000
 8005724:	40021000 	.word	0x40021000
 8005728:	40010000 	.word	0x40010000
 800572c:	40010800 	.word	0x40010800
 8005730:	40010c00 	.word	0x40010c00
 8005734:	40011000 	.word	0x40011000
 8005738:	40011400 	.word	0x40011400
 800573c:	40011800 	.word	0x40011800
 8005740:	40011c00 	.word	0x40011c00
 8005744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_GPIO_Init+0x324>)
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	43db      	mvns	r3, r3
 8005750:	4913      	ldr	r1, [pc, #76]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005752:	4013      	ands	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d006      	beq.n	8005770 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	490e      	ldr	r1, [pc, #56]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
 800576e:	e006      	b.n	800577e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	43db      	mvns	r3, r3
 8005778:	4909      	ldr	r1, [pc, #36]	; (80057a0 <HAL_GPIO_Init+0x324>)
 800577a:	4013      	ands	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	3301      	adds	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	fa22 f303 	lsr.w	r3, r2, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	f47f ae7e 	bne.w	8005490 <HAL_GPIO_Init+0x14>
  }
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	372c      	adds	r7, #44	; 0x2c
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	40010400 	.word	0x40010400

080057a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e001      	b.n	80057c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	807b      	strh	r3, [r7, #2]
 80057de:	4613      	mov	r3, r2
 80057e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e2:	787b      	ldrb	r3, [r7, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80057ee:	e003      	b.n	80057f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	041a      	lsls	r2, r3, #16
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	611a      	str	r2, [r3, #16]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
	...

08005804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e12b      	b.n	8005a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe ff0c 	bl	8004648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2224      	movs	r2, #36	; 0x24
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005868:	f001 ff8a 	bl	8007780 <HAL_RCC_GetPCLK1Freq>
 800586c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4a81      	ldr	r2, [pc, #516]	; (8005a78 <HAL_I2C_Init+0x274>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d807      	bhi.n	8005888 <HAL_I2C_Init+0x84>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a80      	ldr	r2, [pc, #512]	; (8005a7c <HAL_I2C_Init+0x278>)
 800587c:	4293      	cmp	r3, r2
 800587e:	bf94      	ite	ls
 8005880:	2301      	movls	r3, #1
 8005882:	2300      	movhi	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	e006      	b.n	8005896 <HAL_I2C_Init+0x92>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a7d      	ldr	r2, [pc, #500]	; (8005a80 <HAL_I2C_Init+0x27c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	bf94      	ite	ls
 8005890:	2301      	movls	r3, #1
 8005892:	2300      	movhi	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0e7      	b.n	8005a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a78      	ldr	r2, [pc, #480]	; (8005a84 <HAL_I2C_Init+0x280>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	0c9b      	lsrs	r3, r3, #18
 80058a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4a6a      	ldr	r2, [pc, #424]	; (8005a78 <HAL_I2C_Init+0x274>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d802      	bhi.n	80058d8 <HAL_I2C_Init+0xd4>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3301      	adds	r3, #1
 80058d6:	e009      	b.n	80058ec <HAL_I2C_Init+0xe8>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	4a69      	ldr	r2, [pc, #420]	; (8005a88 <HAL_I2C_Init+0x284>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	099b      	lsrs	r3, r3, #6
 80058ea:	3301      	adds	r3, #1
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	495c      	ldr	r1, [pc, #368]	; (8005a78 <HAL_I2C_Init+0x274>)
 8005908:	428b      	cmp	r3, r1
 800590a:	d819      	bhi.n	8005940 <HAL_I2C_Init+0x13c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e59      	subs	r1, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	fbb1 f3f3 	udiv	r3, r1, r3
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005920:	400b      	ands	r3, r1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_I2C_Init+0x138>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1e59      	subs	r1, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fbb1 f3f3 	udiv	r3, r1, r3
 8005934:	3301      	adds	r3, #1
 8005936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593a:	e051      	b.n	80059e0 <HAL_I2C_Init+0x1dc>
 800593c:	2304      	movs	r3, #4
 800593e:	e04f      	b.n	80059e0 <HAL_I2C_Init+0x1dc>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d111      	bne.n	800596c <HAL_I2C_Init+0x168>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1e58      	subs	r0, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	440b      	add	r3, r1
 8005956:	fbb0 f3f3 	udiv	r3, r0, r3
 800595a:	3301      	adds	r3, #1
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e012      	b.n	8005992 <HAL_I2C_Init+0x18e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1e58      	subs	r0, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6859      	ldr	r1, [r3, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	0099      	lsls	r1, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005982:	3301      	adds	r3, #1
 8005984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_Init+0x196>
 8005996:	2301      	movs	r3, #1
 8005998:	e022      	b.n	80059e0 <HAL_I2C_Init+0x1dc>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10e      	bne.n	80059c0 <HAL_I2C_Init+0x1bc>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1e58      	subs	r0, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	440b      	add	r3, r1
 80059b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b4:	3301      	adds	r3, #1
 80059b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059be:	e00f      	b.n	80059e0 <HAL_I2C_Init+0x1dc>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1e58      	subs	r0, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	0099      	lsls	r1, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d6:	3301      	adds	r3, #1
 80059d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	6809      	ldr	r1, [r1, #0]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69da      	ldr	r2, [r3, #28]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6911      	ldr	r1, [r2, #16]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	4311      	orrs	r1, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	000186a0 	.word	0x000186a0
 8005a7c:	001e847f 	.word	0x001e847f
 8005a80:	003d08ff 	.word	0x003d08ff
 8005a84:	431bde83 	.word	0x431bde83
 8005a88:	10624dd3 	.word	0x10624dd3

08005a8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	461a      	mov	r2, r3
 8005a98:	460b      	mov	r3, r1
 8005a9a:	817b      	strh	r3, [r7, #10]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aa0:	f7ff f870 	bl	8004b84 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f040 80e0 	bne.w	8005c74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2319      	movs	r3, #25
 8005aba:	2201      	movs	r2, #1
 8005abc:	4970      	ldr	r1, [pc, #448]	; (8005c80 <HAL_I2C_Master_Transmit+0x1f4>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fc9e 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0d3      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_I2C_Master_Transmit+0x50>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0cc      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d007      	beq.n	8005b02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2221      	movs	r2, #33	; 0x21
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2210      	movs	r2, #16
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	893a      	ldrh	r2, [r7, #8]
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a50      	ldr	r2, [pc, #320]	; (8005c84 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b44:	8979      	ldrh	r1, [r7, #10]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fb08 	bl	8006160 <I2C_MasterRequestWrite>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e08d      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b70:	e066      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	6a39      	ldr	r1, [r7, #32]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fd5c 	bl	8006634 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d107      	bne.n	8005b9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e06b      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d11b      	bne.n	8005c14 <HAL_I2C_Master_Transmit+0x188>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d017      	beq.n	8005c14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	6a39      	ldr	r1, [r7, #32]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fd53 	bl	80066c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d107      	bne.n	8005c3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e01a      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d194      	bne.n	8005b72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e000      	b.n	8005c76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	00100002 	.word	0x00100002
 8005c84:	ffff0000 	.word	0xffff0000

08005c88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08c      	sub	sp, #48	; 0x30
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	461a      	mov	r2, r3
 8005c94:	460b      	mov	r3, r1
 8005c96:	817b      	strh	r3, [r7, #10]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ca0:	f7fe ff70 	bl	8004b84 <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	f040 824b 	bne.w	800614a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2319      	movs	r3, #25
 8005cba:	2201      	movs	r2, #1
 8005cbc:	497f      	ldr	r1, [pc, #508]	; (8005ebc <HAL_I2C_Master_Receive+0x234>)
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fb9e 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e23e      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_I2C_Master_Receive+0x54>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e237      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d007      	beq.n	8005d02 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2222      	movs	r2, #34	; 0x22
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	893a      	ldrh	r2, [r7, #8]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4a5f      	ldr	r2, [pc, #380]	; (8005ec0 <HAL_I2C_Master_Receive+0x238>)
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d44:	8979      	ldrh	r1, [r7, #10]
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fa8a 	bl	8006264 <I2C_MasterRequestRead>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e1f8      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d113      	bne.n	8005d8a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e1cc      	b.n	8006124 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d11e      	bne.n	8005dd0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005da2:	b672      	cpsid	i
}
 8005da4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dcc:	b662      	cpsie	i
}
 8005dce:	e035      	b.n	8005e3c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d11e      	bne.n	8005e16 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005de8:	b672      	cpsid	i
}
 8005dea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e12:	b662      	cpsie	i
}
 8005e14:	e012      	b.n	8005e3c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e3c:	e172      	b.n	8006124 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	f200 811f 	bhi.w	8006086 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d123      	bne.n	8005e98 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fc7d 	bl	8006754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e173      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e96:	e145      	b.n	8006124 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d152      	bne.n	8005f46 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	4906      	ldr	r1, [pc, #24]	; (8005ec4 <HAL_I2C_Master_Receive+0x23c>)
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 faa8 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e148      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
 8005eba:	bf00      	nop
 8005ebc:	00100002 	.word	0x00100002
 8005ec0:	ffff0000 	.word	0xffff0000
 8005ec4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec8:	b672      	cpsid	i
}
 8005eca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f0e:	b662      	cpsie	i
}
 8005f10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f44:	e0ee      	b.n	8006124 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4981      	ldr	r1, [pc, #516]	; (8006154 <HAL_I2C_Master_Receive+0x4cc>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fa55 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0f5      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f70:	b672      	cpsid	i
}
 8005f72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa6:	4b6c      	ldr	r3, [pc, #432]	; (8006158 <HAL_I2C_Master_Receive+0x4d0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	4a6b      	ldr	r2, [pc, #428]	; (800615c <HAL_I2C_Master_Receive+0x4d4>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	0a1a      	lsrs	r2, r3, #8
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d118      	bne.n	8005ffe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005fee:	b662      	cpsie	i
}
 8005ff0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0a6      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d1d9      	bne.n	8005fc0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800604e:	b662      	cpsie	i
}
 8006050:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006084:	e04e      	b.n	8006124 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fb62 	bl	8006754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e058      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d124      	bne.n	8006124 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d107      	bne.n	80060f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	f47f ae88 	bne.w	8005e3e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3728      	adds	r7, #40	; 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	00010004 	.word	0x00010004
 8006158:	20000048 	.word	0x20000048
 800615c:	14f8b589 	.word	0x14f8b589

08006160 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	460b      	mov	r3, r1
 800616e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b08      	cmp	r3, #8
 800617a:	d006      	beq.n	800618a <I2C_MasterRequestWrite+0x2a>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d003      	beq.n	800618a <I2C_MasterRequestWrite+0x2a>
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006188:	d108      	bne.n	800619c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e00b      	b.n	80061b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	2b12      	cmp	r3, #18
 80061a2:	d107      	bne.n	80061b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f91d 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061da:	d103      	bne.n	80061e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e035      	b.n	8006254 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f0:	d108      	bne.n	8006204 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061f2:	897b      	ldrh	r3, [r7, #10]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006200:	611a      	str	r2, [r3, #16]
 8006202:	e01b      	b.n	800623c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006204:	897b      	ldrh	r3, [r7, #10]
 8006206:	11db      	asrs	r3, r3, #7
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 0306 	and.w	r3, r3, #6
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f063 030f 	orn	r3, r3, #15
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	490e      	ldr	r1, [pc, #56]	; (800625c <I2C_MasterRequestWrite+0xfc>)
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f966 	bl	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e010      	b.n	8006254 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006232:	897b      	ldrh	r3, [r7, #10]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4907      	ldr	r1, [pc, #28]	; (8006260 <I2C_MasterRequestWrite+0x100>)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f956 	bl	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	00010008 	.word	0x00010008
 8006260:	00010002 	.word	0x00010002

08006264 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	460b      	mov	r3, r1
 8006272:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d006      	beq.n	800629e <I2C_MasterRequestRead+0x3a>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d003      	beq.n	800629e <I2C_MasterRequestRead+0x3a>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800629c:	d108      	bne.n	80062b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e00b      	b.n	80062c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	2b11      	cmp	r3, #17
 80062b6:	d107      	bne.n	80062c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f893 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d103      	bne.n	80062f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e079      	b.n	80063f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006304:	d108      	bne.n	8006318 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]
 8006316:	e05f      	b.n	80063d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006318:	897b      	ldrh	r3, [r7, #10]
 800631a:	11db      	asrs	r3, r3, #7
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0306 	and.w	r3, r3, #6
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f063 030f 	orn	r3, r3, #15
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4930      	ldr	r1, [pc, #192]	; (80063f8 <I2C_MasterRequestRead+0x194>)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f8dc 	bl	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e054      	b.n	80063f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4929      	ldr	r1, [pc, #164]	; (80063fc <I2C_MasterRequestRead+0x198>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f8cc 	bl	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e044      	b.n	80063f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f831 	bl	8006400 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b2:	d103      	bne.n	80063bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e017      	b.n	80063f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80063c0:	897b      	ldrh	r3, [r7, #10]
 80063c2:	11db      	asrs	r3, r3, #7
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f003 0306 	and.w	r3, r3, #6
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f063 030e 	orn	r3, r3, #14
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4907      	ldr	r1, [pc, #28]	; (80063fc <I2C_MasterRequestRead+0x198>)
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f888 	bl	80064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	00010008 	.word	0x00010008
 80063fc:	00010002 	.word	0x00010002

08006400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006410:	e048      	b.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d044      	beq.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641a:	f7fe fbb3 	bl	8004b84 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d139      	bne.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	0c1b      	lsrs	r3, r3, #16
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	d10d      	bne.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x56>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	43da      	mvns	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4013      	ands	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf0c      	ite	eq
 800644c:	2301      	moveq	r3, #1
 800644e:	2300      	movne	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	e00c      	b.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	43da      	mvns	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	429a      	cmp	r2, r3
 8006474:	d116      	bne.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f043 0220 	orr.w	r2, r3, #32
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e023      	b.n	80064ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d10d      	bne.n	80064ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	43da      	mvns	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	e00c      	b.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	43da      	mvns	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4013      	ands	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d093      	beq.n	8006412 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006502:	e071      	b.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d123      	bne.n	800655c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006522:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800652c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f043 0204 	orr.w	r2, r3, #4
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e067      	b.n	800662c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d041      	beq.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006564:	f7fe fb0e 	bl	8004b84 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d302      	bcc.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d136      	bne.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10c      	bne.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	43da      	mvns	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e00b      	b.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	43da      	mvns	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e021      	b.n	800662c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	0c1b      	lsrs	r3, r3, #16
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d10c      	bne.n	800660c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	43da      	mvns	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e00b      	b.n	8006624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	43da      	mvns	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f af6d 	bne.w	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006640:	e034      	b.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f8e3 	bl	800680e <I2C_IsAcknowledgeFailed>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e034      	b.n	80066bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d028      	beq.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665a:	f7fe fa93 	bl	8004b84 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	429a      	cmp	r2, r3
 8006668:	d302      	bcc.n	8006670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11d      	bne.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d016      	beq.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e007      	b.n	80066bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d1c3      	bne.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d0:	e034      	b.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f89b 	bl	800680e <I2C_IsAcknowledgeFailed>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e034      	b.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d028      	beq.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ea:	f7fe fa4b 	bl	8004b84 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d302      	bcc.n	8006700 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11d      	bne.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b04      	cmp	r3, #4
 800670c:	d016      	beq.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e007      	b.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d1c3      	bne.n	80066d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006760:	e049      	b.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d119      	bne.n	80067a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0210 	mvn.w	r2, #16
 8006778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e030      	b.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fe f9ee 	bl	8004b84 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11d      	bne.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d016      	beq.n	80067f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e007      	b.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d1ae      	bne.n	8006762 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006824:	d11b      	bne.n	800685e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800682e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FSMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FSMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e03e      	b.n	80068fe <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7fd ffff 	bl	8004898 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FSMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3304      	adds	r3, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f001 ff15 	bl	80086d4 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FSMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	f001 ff57 	bl	8008768 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FSMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	f001 ff83 	bl	80087d0 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FSMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d108      	bne.n	80068e4 <HAL_NAND_Init+0x7a>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0204 	orr.w	r2, r2, #4
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e007      	b.n	80068f4 <HAL_NAND_Init+0x8a>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1a      	ldr	r2, [r3, #32]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0204 	orr.w	r2, r2, #4
 80068f2:	621a      	str	r2, [r3, #32]

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d101      	bne.n	8006928 <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
 8006926:	e06e      	b.n	8006a06 <HAL_NAND_Read_ID+0x100>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d167      	bne.n	8006a04 <HAL_NAND_Read_ID+0xfe>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_NAND_Read_ID+0x3c>
 800693e:	2302      	movs	r3, #2
 8006940:	e061      	b.n	8006a06 <HAL_NAND_Read_ID+0x100>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Identify the device address */
    if (hnand->Init.NandBank == FSMC_NAND_BANK2)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b10      	cmp	r3, #16
 8006958:	d103      	bne.n	8006962 <HAL_NAND_Read_ID+0x5c>
    {
      deviceaddress = NAND_DEVICE1;
 800695a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e002      	b.n	8006968 <HAL_NAND_Read_ID+0x62>
    }
    else
    {
      deviceaddress = NAND_DEVICE2;
 8006962:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006966:	617b      	str	r3, [r7, #20]
    }

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696e:	2290      	movs	r2, #144	; 0x90
 8006970:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006972:	f3bf 8f4f 	dsb	sy
}
 8006976:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006982:	f3bf 8f4f 	dsb	sy
}
 8006986:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d116      	bne.n	80069be <HAL_NAND_Read_ID+0xb8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	70da      	strb	r2, [r3, #3]
 80069bc:	e018      	b.n	80069f0 <HAL_NAND_Read_ID+0xea>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3310      	adds	r3, #16
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e000      	b.n	8006a06 <HAL_NAND_Read_ID+0x100>
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08c      	sub	sp, #48	; 0x30
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	61fb      	str	r3, [r7, #28]
  uint8_t *buff = pBuffer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	61bb      	str	r3, [r7, #24]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d101      	bne.n	8006a3a <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	e148      	b.n	8006ccc <HAL_NAND_Read_Page_8b+0x2bc>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	f040 8141 	bne.w	8006cca <HAL_NAND_Read_Page_8b+0x2ba>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_NAND_Read_Page_8b+0x46>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e13a      	b.n	8006ccc <HAL_NAND_Read_Page_8b+0x2bc>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Identify the device address */
    if (hnand->Init.NandBank == FSMC_NAND_BANK2)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d103      	bne.n	8006a76 <HAL_NAND_Read_Page_8b+0x66>
    {
      deviceaddress = NAND_DEVICE1;
 8006a6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a74:	e002      	b.n	8006a7c <HAL_NAND_Read_Page_8b+0x6c>
    }
    else
    {
      deviceaddress = NAND_DEVICE2;
 8006a76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	4619      	mov	r1, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	889b      	ldrh	r3, [r3, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	885b      	ldrh	r3, [r3, #2]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	fb00 f303 	mul.w	r3, r0, r3
 8006a96:	4413      	add	r3, r2
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	440b      	add	r3, r1
 8006aa2:	623b      	str	r3, [r7, #32]

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006aa4:	e0fa      	b.n	8006c9c <HAL_NAND_Read_Page_8b+0x28c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ab0:	f3bf 8f4f 	dsb	sy
}
 8006ab4:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006abe:	d848      	bhi.n	8006b52 <HAL_NAND_Read_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad0:	d21a      	bcs.n	8006b08 <HAL_NAND_Read_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006adc:	f3bf 8f4f 	dsb	sy
}
 8006ae0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae8:	6a3a      	ldr	r2, [r7, #32]
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006aee:	f3bf 8f4f 	dsb	sy
}
 8006af2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	0a1a      	lsrs	r2, r3, #8
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b02:	f3bf 8f4f 	dsb	sy
}
 8006b06:	e07d      	b.n	8006c04 <HAL_NAND_Read_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b12:	f3bf 8f4f 	dsb	sy
}
 8006b16:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b24:	f3bf 8f4f 	dsb	sy
}
 8006b28:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	0a1a      	lsrs	r2, r3, #8
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b38:	f3bf 8f4f 	dsb	sy
}
 8006b3c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	0c1a      	lsrs	r2, r3, #16
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b4c:	f3bf 8f4f 	dsb	sy
}
 8006b50:	e058      	b.n	8006c04 <HAL_NAND_Read_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b62:	d222      	bcs.n	8006baa <HAL_NAND_Read_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b6e:	f3bf 8f4f 	dsb	sy
}
 8006b72:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b7e:	f3bf 8f4f 	dsb	sy
}
 8006b82:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b90:	f3bf 8f4f 	dsb	sy
}
 8006b94:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	0a1a      	lsrs	r2, r3, #8
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ba4:	f3bf 8f4f 	dsb	sy
}
 8006ba8:	e02c      	b.n	8006c04 <HAL_NAND_Read_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bb4:	f3bf 8f4f 	dsb	sy
}
 8006bb8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bc4:	f3bf 8f4f 	dsb	sy
}
 8006bc8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bd6:	f3bf 8f4f 	dsb	sy
}
 8006bda:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	0a1a      	lsrs	r2, r3, #8
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bea:	f3bf 8f4f 	dsb	sy
}
 8006bee:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	0c1a      	lsrs	r2, r3, #16
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006bfe:	f3bf 8f4f 	dsb	sy
}
 8006c02:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0a:	2230      	movs	r2, #48	; 0x30
 8006c0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c0e:	f3bf 8f4f 	dsb	sy
}
 8006c12:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d123      	bne.n	8006c66 <HAL_NAND_Read_Page_8b+0x256>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7fd ffb1 	bl	8004b84 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006c24:	e011      	b.n	8006c4a <HAL_NAND_Read_Page_8b+0x23a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8006c26:	f7fd ffad 	bl	8004b84 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c34:	d909      	bls.n	8006c4a <HAL_NAND_Read_Page_8b+0x23a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2203      	movs	r2, #3
 8006c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e040      	b.n	8006ccc <HAL_NAND_Read_Page_8b+0x2bc>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9a2 	bl	8006f94 <HAL_NAND_Read_Status>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d1e7      	bne.n	8006c26 <HAL_NAND_Read_Page_8b+0x216>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c60:	f3bf 8f4f 	dsb	sy
}
 8006c64:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6a:	e009      	b.n	8006c80 <HAL_NAND_Read_Page_8b+0x270>
      {
        *buff = *(uint8_t *)deviceaddress;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	701a      	strb	r2, [r3, #0]
        buff++;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61bb      	str	r3, [r7, #24]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3f0      	bcc.n	8006c6c <HAL_NAND_Read_Page_8b+0x25c>
      }

      /* Increment read pages number */
      numpagesread++;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Decrement pages to read */
      nbpages--;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	623b      	str	r3, [r7, #32]
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_NAND_Read_Page_8b+0x2a6>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	f4ff aef8 	bcc.w	8006aa6 <HAL_NAND_Read_Page_8b+0x96>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e000      	b.n	8006ccc <HAL_NAND_Read_Page_8b+0x2bc>
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3730      	adds	r7, #48	; 0x30
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	; 0x30
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	61fb      	str	r3, [r7, #28]
  const uint8_t *buff = pBuffer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	61bb      	str	r3, [r7, #24]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d101      	bne.n	8006cfe <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e146      	b.n	8006f8c <HAL_NAND_Write_Page_8b+0x2b8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	f040 813f 	bne.w	8006f8a <HAL_NAND_Write_Page_8b+0x2b6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_NAND_Write_Page_8b+0x46>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e138      	b.n	8006f8c <HAL_NAND_Write_Page_8b+0x2b8>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Identify the device address */
    if (hnand->Init.NandBank == FSMC_NAND_BANK2)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d103      	bne.n	8006d3a <HAL_NAND_Write_Page_8b+0x66>
    {
      deviceaddress = NAND_DEVICE1;
 8006d32:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d38:	e002      	b.n	8006d40 <HAL_NAND_Write_Page_8b+0x6c>
    }
    else
    {
      deviceaddress = NAND_DEVICE2;
 8006d3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	4619      	mov	r1, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	889b      	ldrh	r3, [r3, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	4618      	mov	r0, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	fb00 f303 	mul.w	r3, r0, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	440b      	add	r3, r1
 8006d66:	623b      	str	r3, [r7, #32]

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006d68:	e0f8      	b.n	8006f5c <HAL_NAND_Write_Page_8b+0x288>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d74:	f3bf 8f4f 	dsb	sy
}
 8006d78:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d84:	f3bf 8f4f 	dsb	sy
}
 8006d88:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d92:	d848      	bhi.n	8006e26 <HAL_NAND_Write_Page_8b+0x152>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d9c:	fb02 f303 	mul.w	r3, r2, r3
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d21a      	bcs.n	8006ddc <HAL_NAND_Write_Page_8b+0x108>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006db0:	f3bf 8f4f 	dsb	sy
}
 8006db4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbc:	6a3a      	ldr	r2, [r7, #32]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dc2:	f3bf 8f4f 	dsb	sy
}
 8006dc6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	0a1a      	lsrs	r2, r3, #8
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dd6:	f3bf 8f4f 	dsb	sy
}
 8006dda:	e07d      	b.n	8006ed8 <HAL_NAND_Write_Page_8b+0x204>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006de6:	f3bf 8f4f 	dsb	sy
}
 8006dea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006df8:	f3bf 8f4f 	dsb	sy
}
 8006dfc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	0a1a      	lsrs	r2, r3, #8
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e0c:	f3bf 8f4f 	dsb	sy
}
 8006e10:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	0c1a      	lsrs	r2, r3, #16
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e20:	f3bf 8f4f 	dsb	sy
}
 8006e24:	e058      	b.n	8006ed8 <HAL_NAND_Write_Page_8b+0x204>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	d222      	bcs.n	8006e7e <HAL_NAND_Write_Page_8b+0x1aa>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e42:	f3bf 8f4f 	dsb	sy
}
 8006e46:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e52:	f3bf 8f4f 	dsb	sy
}
 8006e56:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e64:	f3bf 8f4f 	dsb	sy
}
 8006e68:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	0a1a      	lsrs	r2, r3, #8
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e78:	f3bf 8f4f 	dsb	sy
}
 8006e7c:	e02c      	b.n	8006ed8 <HAL_NAND_Write_Page_8b+0x204>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e88:	f3bf 8f4f 	dsb	sy
}
 8006e8c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e98:	f3bf 8f4f 	dsb	sy
}
 8006e9c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea4:	6a3a      	ldr	r2, [r7, #32]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006eaa:	f3bf 8f4f 	dsb	sy
}
 8006eae:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	0a1a      	lsrs	r2, r3, #8
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ebe:	f3bf 8f4f 	dsb	sy
}
 8006ec2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	0c1a      	lsrs	r2, r3, #16
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ed2:	f3bf 8f4f 	dsb	sy
}
 8006ed6:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006edc:	e00c      	b.n	8006ef8 <HAL_NAND_Write_Page_8b+0x224>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	701a      	strb	r2, [r3, #0]
        buff++;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8006eec:	f3bf 8f4f 	dsb	sy
}
 8006ef0:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3ed      	bcc.n	8006ede <HAL_NAND_Write_Page_8b+0x20a>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	2210      	movs	r2, #16
 8006f0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f0c:	f3bf 8f4f 	dsb	sy
}
 8006f10:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8006f12:	f7fd fe37 	bl	8004b84 <HAL_GetTick>
 8006f16:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006f18:	e011      	b.n	8006f3e <HAL_NAND_Write_Page_8b+0x26a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8006f1a:	f7fd fe33 	bl	8004b84 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f28:	d909      	bls.n	8006f3e <HAL_NAND_Write_Page_8b+0x26a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e026      	b.n	8006f8c <HAL_NAND_Write_Page_8b+0x2b8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f828 	bl	8006f94 <HAL_NAND_Read_Status>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d1e7      	bne.n	8006f1a <HAL_NAND_Write_Page_8b+0x246>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Decrement pages to write */
      nbpages--;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	623b      	str	r3, [r7, #32]
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <HAL_NAND_Write_Page_8b+0x2a2>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	f4ff aefa 	bcc.w	8006d6a <HAL_NAND_Write_Page_8b+0x96>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <HAL_NAND_Write_Page_8b+0x2b8>
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3730      	adds	r7, #48	; 0x30
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  if (hnand->Init.NandBank == FSMC_NAND_BANK2)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d103      	bne.n	8006fac <HAL_NAND_Read_Status+0x18>
  {
    deviceaddress = NAND_DEVICE1;
 8006fa4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e002      	b.n	8006fb2 <HAL_NAND_Read_Status+0x1e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8006fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	2270      	movs	r2, #112	; 0x70
 8006fba:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_NAND_Read_Status+0x3e>
  {
    return NAND_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e007      	b.n	8006fe2 <HAL_NAND_Read_Status+0x4e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <HAL_NAND_Read_Status+0x4c>
  {
    return NAND_READY;
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	e000      	b.n	8006fe2 <HAL_NAND_Read_Status+0x4e>
  }
  else
  {
    return NAND_BUSY;
 8006fe0:	2300      	movs	r3, #0
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e272      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8087 	beq.w	800711a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800700c:	4b92      	ldr	r3, [pc, #584]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b04      	cmp	r3, #4
 8007016:	d00c      	beq.n	8007032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007018:	4b8f      	ldr	r3, [pc, #572]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 030c 	and.w	r3, r3, #12
 8007020:	2b08      	cmp	r3, #8
 8007022:	d112      	bne.n	800704a <HAL_RCC_OscConfig+0x5e>
 8007024:	4b8c      	ldr	r3, [pc, #560]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	d10b      	bne.n	800704a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007032:	4b89      	ldr	r3, [pc, #548]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d06c      	beq.n	8007118 <HAL_RCC_OscConfig+0x12c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d168      	bne.n	8007118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e24c      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007052:	d106      	bne.n	8007062 <HAL_RCC_OscConfig+0x76>
 8007054:	4b80      	ldr	r3, [pc, #512]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a7f      	ldr	r2, [pc, #508]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800705a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e02e      	b.n	80070c0 <HAL_RCC_OscConfig+0xd4>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10c      	bne.n	8007084 <HAL_RCC_OscConfig+0x98>
 800706a:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7a      	ldr	r2, [pc, #488]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	4b78      	ldr	r3, [pc, #480]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a77      	ldr	r2, [pc, #476]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800707c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e01d      	b.n	80070c0 <HAL_RCC_OscConfig+0xd4>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800708c:	d10c      	bne.n	80070a8 <HAL_RCC_OscConfig+0xbc>
 800708e:	4b72      	ldr	r3, [pc, #456]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a71      	ldr	r2, [pc, #452]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b6f      	ldr	r3, [pc, #444]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6e      	ldr	r2, [pc, #440]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e00b      	b.n	80070c0 <HAL_RCC_OscConfig+0xd4>
 80070a8:	4b6b      	ldr	r3, [pc, #428]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6a      	ldr	r2, [pc, #424]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4b68      	ldr	r3, [pc, #416]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a67      	ldr	r2, [pc, #412]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d013      	beq.n	80070f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7fd fd5c 	bl	8004b84 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fd fd58 	bl	8004b84 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e200      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e2:	4b5d      	ldr	r3, [pc, #372]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0xe4>
 80070ee:	e014      	b.n	800711a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f0:	f7fd fd48 	bl	8004b84 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f8:	f7fd fd44 	bl	8004b84 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b64      	cmp	r3, #100	; 0x64
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e1ec      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800710a:	4b53      	ldr	r3, [pc, #332]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x10c>
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d063      	beq.n	80071ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007126:	4b4c      	ldr	r3, [pc, #304]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007132:	4b49      	ldr	r3, [pc, #292]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	2b08      	cmp	r3, #8
 800713c:	d11c      	bne.n	8007178 <HAL_RCC_OscConfig+0x18c>
 800713e:	4b46      	ldr	r3, [pc, #280]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d116      	bne.n	8007178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714a:	4b43      	ldr	r3, [pc, #268]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCC_OscConfig+0x176>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d001      	beq.n	8007162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1c0      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007162:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	4939      	ldr	r1, [pc, #228]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007172:	4313      	orrs	r3, r2
 8007174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007176:	e03a      	b.n	80071ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d020      	beq.n	80071c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007180:	4b36      	ldr	r3, [pc, #216]	; (800725c <HAL_RCC_OscConfig+0x270>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007186:	f7fd fcfd 	bl	8004b84 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718e:	f7fd fcf9 	bl	8004b84 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e1a1      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	4b2a      	ldr	r3, [pc, #168]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	4927      	ldr	r1, [pc, #156]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	600b      	str	r3, [r1, #0]
 80071c0:	e015      	b.n	80071ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <HAL_RCC_OscConfig+0x270>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7fd fcdc 	bl	8004b84 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d0:	f7fd fcd8 	bl	8004b84 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e180      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e2:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d03a      	beq.n	8007270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d019      	beq.n	8007236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007202:	4b17      	ldr	r3, [pc, #92]	; (8007260 <HAL_RCC_OscConfig+0x274>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007208:	f7fd fcbc 	bl	8004b84 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fd fcb8 	bl	8004b84 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e160      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <HAL_RCC_OscConfig+0x26c>)
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800722e:	2001      	movs	r0, #1
 8007230:	f000 face 	bl	80077d0 <RCC_Delay>
 8007234:	e01c      	b.n	8007270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_RCC_OscConfig+0x274>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800723c:	f7fd fca2 	bl	8004b84 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007242:	e00f      	b.n	8007264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007244:	f7fd fc9e 	bl	8004b84 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d908      	bls.n	8007264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e146      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
 8007256:	bf00      	nop
 8007258:	40021000 	.word	0x40021000
 800725c:	42420000 	.word	0x42420000
 8007260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007264:	4b92      	ldr	r3, [pc, #584]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e9      	bne.n	8007244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80a6 	beq.w	80073ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007282:	4b8b      	ldr	r3, [pc, #556]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4b88      	ldr	r3, [pc, #544]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	4a87      	ldr	r2, [pc, #540]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	61d3      	str	r3, [r2, #28]
 800729a:	4b85      	ldr	r3, [pc, #532]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072aa:	4b82      	ldr	r3, [pc, #520]	; (80074b4 <HAL_RCC_OscConfig+0x4c8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d118      	bne.n	80072e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b6:	4b7f      	ldr	r3, [pc, #508]	; (80074b4 <HAL_RCC_OscConfig+0x4c8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a7e      	ldr	r2, [pc, #504]	; (80074b4 <HAL_RCC_OscConfig+0x4c8>)
 80072bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c2:	f7fd fc5f 	bl	8004b84 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ca:	f7fd fc5b 	bl	8004b84 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b64      	cmp	r3, #100	; 0x64
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e103      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072dc:	4b75      	ldr	r3, [pc, #468]	; (80074b4 <HAL_RCC_OscConfig+0x4c8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d106      	bne.n	80072fe <HAL_RCC_OscConfig+0x312>
 80072f0:	4b6f      	ldr	r3, [pc, #444]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	4a6e      	ldr	r2, [pc, #440]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	6213      	str	r3, [r2, #32]
 80072fc:	e02d      	b.n	800735a <HAL_RCC_OscConfig+0x36e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0x334>
 8007306:	4b6a      	ldr	r3, [pc, #424]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	4a69      	ldr	r2, [pc, #420]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	6213      	str	r3, [r2, #32]
 8007312:	4b67      	ldr	r3, [pc, #412]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	4a66      	ldr	r2, [pc, #408]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	6213      	str	r3, [r2, #32]
 800731e:	e01c      	b.n	800735a <HAL_RCC_OscConfig+0x36e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b05      	cmp	r3, #5
 8007326:	d10c      	bne.n	8007342 <HAL_RCC_OscConfig+0x356>
 8007328:	4b61      	ldr	r3, [pc, #388]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	4a60      	ldr	r2, [pc, #384]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800732e:	f043 0304 	orr.w	r3, r3, #4
 8007332:	6213      	str	r3, [r2, #32]
 8007334:	4b5e      	ldr	r3, [pc, #376]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	4a5d      	ldr	r2, [pc, #372]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	6213      	str	r3, [r2, #32]
 8007340:	e00b      	b.n	800735a <HAL_RCC_OscConfig+0x36e>
 8007342:	4b5b      	ldr	r3, [pc, #364]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	4a5a      	ldr	r2, [pc, #360]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	6213      	str	r3, [r2, #32]
 800734e:	4b58      	ldr	r3, [pc, #352]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4a57      	ldr	r2, [pc, #348]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007354:	f023 0304 	bic.w	r3, r3, #4
 8007358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d015      	beq.n	800738e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007362:	f7fd fc0f 	bl	8004b84 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007368:	e00a      	b.n	8007380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fd fc0b 	bl	8004b84 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f241 3288 	movw	r2, #5000	; 0x1388
 8007378:	4293      	cmp	r3, r2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e0b1      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007380:	4b4b      	ldr	r3, [pc, #300]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0ee      	beq.n	800736a <HAL_RCC_OscConfig+0x37e>
 800738c:	e014      	b.n	80073b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738e:	f7fd fbf9 	bl	8004b84 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007394:	e00a      	b.n	80073ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007396:	f7fd fbf5 	bl	8004b84 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e09b      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ac:	4b40      	ldr	r3, [pc, #256]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1ee      	bne.n	8007396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d105      	bne.n	80073ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073be:	4b3c      	ldr	r3, [pc, #240]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4a3b      	ldr	r2, [pc, #236]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80073c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8087 	beq.w	80074e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073d4:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d061      	beq.n	80074a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d146      	bne.n	8007476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e8:	4b33      	ldr	r3, [pc, #204]	; (80074b8 <HAL_RCC_OscConfig+0x4cc>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ee:	f7fd fbc9 	bl	8004b84 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f6:	f7fd fbc5 	bl	8004b84 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e06d      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007408:	4b29      	ldr	r3, [pc, #164]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f0      	bne.n	80073f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741c:	d108      	bne.n	8007430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800741e:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	4921      	ldr	r1, [pc, #132]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800742c:	4313      	orrs	r3, r2
 800742e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007430:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a19      	ldr	r1, [r3, #32]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	430b      	orrs	r3, r1
 8007442:	491b      	ldr	r1, [pc, #108]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007444:	4313      	orrs	r3, r2
 8007446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007448:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <HAL_RCC_OscConfig+0x4cc>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744e:	f7fd fb99 	bl	8004b84 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007456:	f7fd fb95 	bl	8004b84 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e03d      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007468:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x46a>
 8007474:	e035      	b.n	80074e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <HAL_RCC_OscConfig+0x4cc>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747c:	f7fd fb82 	bl	8004b84 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007484:	f7fd fb7e 	bl	8004b84 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e026      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007496:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_RCC_OscConfig+0x4c4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x498>
 80074a2:	e01e      	b.n	80074e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e019      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
 80074b0:	40021000 	.word	0x40021000
 80074b4:	40007000 	.word	0x40007000
 80074b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCC_OscConfig+0x500>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074da:	429a      	cmp	r2, r3
 80074dc:	d001      	beq.n	80074e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000

080074f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0d0      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007504:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d910      	bls.n	8007534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007512:	4b67      	ldr	r3, [pc, #412]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f023 0207 	bic.w	r2, r3, #7
 800751a:	4965      	ldr	r1, [pc, #404]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	4313      	orrs	r3, r2
 8007520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007522:	4b63      	ldr	r3, [pc, #396]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d001      	beq.n	8007534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e0b8      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d020      	beq.n	8007582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800754c:	4b59      	ldr	r3, [pc, #356]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a58      	ldr	r2, [pc, #352]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007564:	4b53      	ldr	r3, [pc, #332]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4a52      	ldr	r2, [pc, #328]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800756a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800756e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007570:	4b50      	ldr	r3, [pc, #320]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	494d      	ldr	r1, [pc, #308]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800757e:	4313      	orrs	r3, r2
 8007580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d040      	beq.n	8007610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d107      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007596:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d115      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e07f      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ae:	4b41      	ldr	r3, [pc, #260]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e073      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075be:	4b3d      	ldr	r3, [pc, #244]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e06b      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ce:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f023 0203 	bic.w	r2, r3, #3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4936      	ldr	r1, [pc, #216]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075e0:	f7fd fad0 	bl	8004b84 <HAL_GetTick>
 80075e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	e00a      	b.n	80075fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e8:	f7fd facc 	bl	8004b84 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e053      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fe:	4b2d      	ldr	r3, [pc, #180]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 020c 	and.w	r2, r3, #12
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	429a      	cmp	r2, r3
 800760e:	d1eb      	bne.n	80075e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007610:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d210      	bcs.n	8007640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 0207 	bic.w	r2, r3, #7
 8007626:	4922      	ldr	r1, [pc, #136]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	4313      	orrs	r3, r2
 800762c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800762e:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d001      	beq.n	8007640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e032      	b.n	80076a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800764c:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4916      	ldr	r1, [pc, #88]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800765a:	4313      	orrs	r3, r2
 800765c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	490e      	ldr	r1, [pc, #56]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800767a:	4313      	orrs	r3, r2
 800767c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800767e:	f000 f821 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 8007682:	4602      	mov	r2, r0
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	091b      	lsrs	r3, r3, #4
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	490a      	ldr	r1, [pc, #40]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007690:	5ccb      	ldrb	r3, [r1, r3]
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	4a09      	ldr	r2, [pc, #36]	; (80076bc <HAL_RCC_ClockConfig+0x1cc>)
 8007698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <HAL_RCC_ClockConfig+0x1d0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd fa2e 	bl	8004b00 <HAL_InitTick>

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40022000 	.word	0x40022000
 80076b4:	40021000 	.word	0x40021000
 80076b8:	080127a4 	.word	0x080127a4
 80076bc:	20000048 	.word	0x20000048
 80076c0:	2000004c 	.word	0x2000004c

080076c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076de:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <HAL_RCC_GetSysClockFreq+0x94>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d002      	beq.n	80076f4 <HAL_RCC_GetSysClockFreq+0x30>
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d003      	beq.n	80076fa <HAL_RCC_GetSysClockFreq+0x36>
 80076f2:	e027      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076f4:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_RCC_GetSysClockFreq+0x98>)
 80076f6:	613b      	str	r3, [r7, #16]
      break;
 80076f8:	e027      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	0c9b      	lsrs	r3, r3, #18
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007704:	5cd3      	ldrb	r3, [r2, r3]
 8007706:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <HAL_RCC_GetSysClockFreq+0x94>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	0c5b      	lsrs	r3, r3, #17
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	4a11      	ldr	r2, [pc, #68]	; (8007764 <HAL_RCC_GetSysClockFreq+0xa0>)
 800771e:	5cd3      	ldrb	r3, [r2, r3]
 8007720:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a0d      	ldr	r2, [pc, #52]	; (800775c <HAL_RCC_GetSysClockFreq+0x98>)
 8007726:	fb03 f202 	mul.w	r2, r3, r2
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e004      	b.n	800773e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	613b      	str	r3, [r7, #16]
      break;
 8007742:	e002      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <HAL_RCC_GetSysClockFreq+0x98>)
 8007746:	613b      	str	r3, [r7, #16]
      break;
 8007748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800774a:	693b      	ldr	r3, [r7, #16]
}
 800774c:	4618      	mov	r0, r3
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40021000 	.word	0x40021000
 800775c:	007a1200 	.word	0x007a1200
 8007760:	080127bc 	.word	0x080127bc
 8007764:	080127cc 	.word	0x080127cc
 8007768:	003d0900 	.word	0x003d0900

0800776c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <HAL_RCC_GetHCLKFreq+0x10>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr
 800777c:	20000048 	.word	0x20000048

08007780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007784:	f7ff fff2 	bl	800776c <HAL_RCC_GetHCLKFreq>
 8007788:	4602      	mov	r2, r0
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	4903      	ldr	r1, [pc, #12]	; (80077a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007796:	5ccb      	ldrb	r3, [r1, r3]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800779c:	4618      	mov	r0, r3
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	40021000 	.word	0x40021000
 80077a4:	080127b4 	.word	0x080127b4

080077a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077ac:	f7ff ffde 	bl	800776c <HAL_RCC_GetHCLKFreq>
 80077b0:	4602      	mov	r2, r0
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	0adb      	lsrs	r3, r3, #11
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	4903      	ldr	r1, [pc, #12]	; (80077cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077be:	5ccb      	ldrb	r3, [r1, r3]
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40021000 	.word	0x40021000
 80077cc:	080127b4 	.word	0x080127b4

080077d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <RCC_Delay+0x34>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a0a      	ldr	r2, [pc, #40]	; (8007808 <RCC_Delay+0x38>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	0a5b      	lsrs	r3, r3, #9
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	fb02 f303 	mul.w	r3, r2, r3
 80077ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077ec:	bf00      	nop
  }
  while (Delay --);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	60fa      	str	r2, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f9      	bne.n	80077ec <RCC_Delay+0x1c>
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	20000048 	.word	0x20000048
 8007808:	10624dd3 	.word	0x10624dd3

0800780c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e076      	b.n	800790c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782e:	d009      	beq.n	8007844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	61da      	str	r2, [r3, #28]
 8007836:	e005      	b.n	8007844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fc ff32 	bl	80046c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800787a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c8:	ea42 0103 	orr.w	r1, r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	0c1a      	lsrs	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f002 0204 	and.w	r2, r2, #4
 80078ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Transmit+0x22>
 8007932:	2302      	movs	r3, #2
 8007934:	e12d      	b.n	8007b92 <HAL_SPI_Transmit+0x27e>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793e:	f7fd f921 	bl	8004b84 <HAL_GetTick>
 8007942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	d002      	beq.n	800795a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007954:	2302      	movs	r3, #2
 8007956:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007958:	e116      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Transmit+0x52>
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800796a:	e10d      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2203      	movs	r2, #3
 8007970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b2:	d10f      	bne.n	80079d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d007      	beq.n	80079f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fa:	d14f      	bne.n	8007a9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_SPI_Transmit+0xf6>
 8007a04:	8afb      	ldrh	r3, [r7, #22]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d142      	bne.n	8007a90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a2e:	e02f      	b.n	8007a90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d112      	bne.n	8007a64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a62:	e015      	b.n	8007a90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a64:	f7fd f88e 	bl	8004b84 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d803      	bhi.n	8007a7c <HAL_SPI_Transmit+0x168>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Transmit+0x16e>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007a8e:	e07b      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1ca      	bne.n	8007a30 <HAL_SPI_Transmit+0x11c>
 8007a9a:	e050      	b.n	8007b3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_Transmit+0x196>
 8007aa4:	8afb      	ldrh	r3, [r7, #22]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d144      	bne.n	8007b34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ad0:	e030      	b.n	8007b34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d113      	bne.n	8007b08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b06:	e015      	b.n	8007b34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b08:	f7fd f83c 	bl	8004b84 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d803      	bhi.n	8007b20 <HAL_SPI_Transmit+0x20c>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1e:	d102      	bne.n	8007b26 <HAL_SPI_Transmit+0x212>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007b32:	e029      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1c9      	bne.n	8007ad2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fbd8 	bl	80082f8 <SPI_EndRxTxTransaction>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e003      	b.n	8007b88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b088      	sub	sp, #32
 8007b9e:	af02      	add	r7, sp, #8
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	603b      	str	r3, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bbe:	e0fb      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc8:	d112      	bne.n	8007bf0 <HAL_SPI_Receive+0x56>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f8ef 	bl	8007dca <HAL_SPI_TransmitReceive>
 8007bec:	4603      	mov	r3, r0
 8007bee:	e0e8      	b.n	8007dc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_SPI_Receive+0x64>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e0e1      	b.n	8007dc2 <HAL_SPI_Receive+0x228>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c06:	f7fc ffbd 	bl	8004b84 <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_SPI_Receive+0x7e>
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c1c:	e0cc      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2204      	movs	r2, #4
 8007c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c64:	d10f      	bne.n	8007c86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d007      	beq.n	8007ca4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d16a      	bne.n	8007d82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cac:	e032      	b.n	8007d14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d115      	bne.n	8007ce8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f103 020c 	add.w	r2, r3, #12
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ce6:	e015      	b.n	8007d14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce8:	f7fc ff4c 	bl	8004b84 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d803      	bhi.n	8007d00 <HAL_SPI_Receive+0x166>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d102      	bne.n	8007d06 <HAL_SPI_Receive+0x16c>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007d12:	e051      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1c7      	bne.n	8007cae <HAL_SPI_Receive+0x114>
 8007d1e:	e035      	b.n	8007d8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d113      	bne.n	8007d56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	b292      	uxth	r2, r2
 8007d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	1c9a      	adds	r2, r3, #2
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d54:	e015      	b.n	8007d82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d56:	f7fc ff15 	bl	8004b84 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d803      	bhi.n	8007d6e <HAL_SPI_Receive+0x1d4>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d102      	bne.n	8007d74 <HAL_SPI_Receive+0x1da>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007d80:	e01a      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1c9      	bne.n	8007d20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fa5f 	bl	8008254 <SPI_EndRxTransaction>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
 8007dae:	e003      	b.n	8007db8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b08c      	sub	sp, #48	; 0x30
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x26>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e198      	b.n	8008122 <HAL_SPI_TransmitReceive+0x358>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df8:	f7fc fec4 	bl	8004b84 <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d00f      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x70>
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e20:	d107      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x68>
 8007e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d003      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e32:	2302      	movs	r3, #2
 8007e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e38:	e16d      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x82>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x82>
 8007e46:	887b      	ldrh	r3, [r7, #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e52:	e160      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d003      	beq.n	8007e68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2205      	movs	r2, #5
 8007e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	887a      	ldrh	r2, [r7, #2]
 8007e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	887a      	ldrh	r2, [r7, #2]
 8007e8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	887a      	ldrh	r2, [r7, #2]
 8007e90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d007      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec4:	d17c      	bne.n	8007fc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_TransmitReceive+0x10a>
 8007ece:	8b7b      	ldrh	r3, [r7, #26]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d16a      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	881a      	ldrh	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef8:	e057      	b.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d11b      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d016      	beq.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d113      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	881a      	ldrh	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	1c9a      	adds	r2, r3, #2
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d119      	bne.n	8007f82 <HAL_SPI_TransmitReceive+0x1b8>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d014      	beq.n	8007f82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	b292      	uxth	r2, r2
 8007f64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	1c9a      	adds	r2, r3, #2
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f82:	f7fc fdff 	bl	8004b84 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d80b      	bhi.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d007      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007fa8:	e0b5      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1a2      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x130>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d19d      	bne.n	8007efa <HAL_SPI_TransmitReceive+0x130>
 8007fbe:	e080      	b.n	80080c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x204>
 8007fc8:	8b7b      	ldrh	r3, [r7, #26]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d16f      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ff4:	e05b      	b.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b02      	cmp	r3, #2
 8008002:	d11c      	bne.n	800803e <HAL_SPI_TransmitReceive+0x274>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d017      	beq.n	800803e <HAL_SPI_TransmitReceive+0x274>
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d114      	bne.n	800803e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d119      	bne.n	8008080 <HAL_SPI_TransmitReceive+0x2b6>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d014      	beq.n	8008080 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800807c:	2301      	movs	r3, #1
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008080:	f7fc fd80 	bl	8004b84 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808c:	429a      	cmp	r2, r3
 800808e:	d803      	bhi.n	8008098 <HAL_SPI_TransmitReceive+0x2ce>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d102      	bne.n	800809e <HAL_SPI_TransmitReceive+0x2d4>
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80080ac:	e033      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d19e      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x22c>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d199      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f916 	bl	80082f8 <SPI_EndRxTxTransaction>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080de:	e01a      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080e8:	2300      	movs	r3, #0
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810c:	e003      	b.n	8008116 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800811e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008122:	4618      	mov	r0, r3
 8008124:	3730      	adds	r7, #48	; 0x30
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008138:	b2db      	uxtb	r3, r3
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008154:	f7fc fd16 	bl	8004b84 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4413      	add	r3, r2
 8008162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008164:	f7fc fd0e 	bl	8004b84 <HAL_GetTick>
 8008168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800816a:	4b39      	ldr	r3, [pc, #228]	; (8008250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	015b      	lsls	r3, r3, #5
 8008170:	0d1b      	lsrs	r3, r3, #20
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800817a:	e054      	b.n	8008226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d050      	beq.n	8008226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008184:	f7fc fcfe 	bl	8004b84 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	429a      	cmp	r2, r3
 8008192:	d902      	bls.n	800819a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d13d      	bne.n	8008216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b2:	d111      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081bc:	d004      	beq.n	80081c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c6:	d107      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e0:	d10f      	bne.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e017      	b.n	8008246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3b01      	subs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4013      	ands	r3, r2
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	429a      	cmp	r2, r3
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	429a      	cmp	r2, r3
 8008242:	d19b      	bne.n	800817c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000048 	.word	0x20000048

08008254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008268:	d111      	bne.n	800828e <SPI_EndRxTransaction+0x3a>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008272:	d004      	beq.n	800827e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d107      	bne.n	800828e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008296:	d117      	bne.n	80082c8 <SPI_EndRxTransaction+0x74>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a0:	d112      	bne.n	80082c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2101      	movs	r1, #1
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ff49 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01a      	beq.n	80082ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e013      	b.n	80082f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff ff36 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f043 0220 	orr.w	r2, r3, #32
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e000      	b.n	80082f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff ff18 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e000      	b.n	800832c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e042      	b.n	80083cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fc fa00 	bl	8004760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2224      	movs	r2, #36	; 0x24
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f91d 	bl	80085b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800838c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800839c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af02      	add	r7, sp, #8
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d16d      	bne.n	80084d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_UART_Transmit+0x2c>
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e066      	b.n	80084d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2221      	movs	r2, #33	; 0x21
 800840e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008412:	f7fc fbb7 	bl	8004b84 <HAL_GetTick>
 8008416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	88fa      	ldrh	r2, [r7, #6]
 800841c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	88fa      	ldrh	r2, [r7, #6]
 8008422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800842c:	d108      	bne.n	8008440 <HAL_UART_Transmit+0x6c>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	e003      	b.n	8008448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008448:	e02a      	b.n	80084a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2200      	movs	r2, #0
 8008452:	2180      	movs	r1, #128	; 0x80
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 f840 	bl	80084da <UART_WaitOnFlagUntilTimeout>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e036      	b.n	80084d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	3302      	adds	r3, #2
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e007      	b.n	8008492 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	3301      	adds	r3, #1
 8008490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1cf      	bne.n	800844a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2140      	movs	r1, #64	; 0x40
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f810 	bl	80084da <UART_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e006      	b.n	80084d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e000      	b.n	80084d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
  }
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3720      	adds	r7, #32
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b090      	sub	sp, #64	; 0x40
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ea:	e050      	b.n	800858e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f2:	d04c      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <UART_WaitOnFlagUntilTimeout+0x30>
 80084fa:	f7fc fb43 	bl	8004b84 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008506:	429a      	cmp	r2, r3
 8008508:	d241      	bcs.n	800858e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852a:	637a      	str	r2, [r7, #52]	; 0x34
 800852c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3314      	adds	r3, #20
 8008544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	613b      	str	r3, [r7, #16]
   return(result);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f023 0301 	bic.w	r3, r3, #1
 8008554:	63bb      	str	r3, [r7, #56]	; 0x38
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800855e:	623a      	str	r2, [r7, #32]
 8008560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	69f9      	ldr	r1, [r7, #28]
 8008564:	6a3a      	ldr	r2, [r7, #32]
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	61bb      	str	r3, [r7, #24]
   return(result);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e5      	bne.n	800853e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2220      	movs	r2, #32
 800857e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e00f      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4013      	ands	r3, r2
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	429a      	cmp	r2, r3
 800859c:	bf0c      	ite	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	2300      	movne	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d09f      	beq.n	80084ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3740      	adds	r7, #64	; 0x40
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80085f2:	f023 030c 	bic.w	r3, r3, #12
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	430b      	orrs	r3, r1
 80085fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <UART_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d103      	bne.n	8008628 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008620:	f7ff f8c2 	bl	80077a8 <HAL_RCC_GetPCLK2Freq>
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	e002      	b.n	800862e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008628:	f7ff f8aa 	bl	8007780 <HAL_RCC_GetPCLK1Freq>
 800862c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009a      	lsls	r2, r3, #2
 8008638:	441a      	add	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	fbb2 f3f3 	udiv	r3, r2, r3
 8008644:	4a22      	ldr	r2, [pc, #136]	; (80086d0 <UART_SetConfig+0x118>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	0119      	lsls	r1, r3, #4
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009a      	lsls	r2, r3, #2
 8008658:	441a      	add	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	fbb2 f2f3 	udiv	r2, r2, r3
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <UART_SetConfig+0x118>)
 8008666:	fba3 0302 	umull	r0, r3, r3, r2
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2064      	movs	r0, #100	; 0x64
 800866e:	fb00 f303 	mul.w	r3, r0, r3
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	3332      	adds	r3, #50	; 0x32
 8008678:	4a15      	ldr	r2, [pc, #84]	; (80086d0 <UART_SetConfig+0x118>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008684:	4419      	add	r1, r3
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	009a      	lsls	r2, r3, #2
 8008690:	441a      	add	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	fbb2 f2f3 	udiv	r2, r2, r3
 800869c:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <UART_SetConfig+0x118>)
 800869e:	fba3 0302 	umull	r0, r3, r3, r2
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	2064      	movs	r0, #100	; 0x64
 80086a6:	fb00 f303 	mul.w	r3, r0, r3
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	3332      	adds	r3, #50	; 0x32
 80086b0:	4a07      	ldr	r2, [pc, #28]	; (80086d0 <UART_SetConfig+0x118>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	f003 020f 	and.w	r2, r3, #15
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	440a      	add	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40013800 	.word	0x40013800
 80086d0:	51eb851f 	.word	0x51eb851f

080086d4 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d11c      	bne.n	8008720 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <FSMC_NAND_Init+0x90>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	6851      	ldr	r1, [r2, #4]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	6892      	ldr	r2, [r2, #8]
 80086f6:	4311      	orrs	r1, r2
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	68d2      	ldr	r2, [r2, #12]
 80086fc:	4311      	orrs	r1, r2
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	6912      	ldr	r2, [r2, #16]
 8008702:	4311      	orrs	r1, r2
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	6952      	ldr	r2, [r2, #20]
 8008708:	0252      	lsls	r2, r2, #9
 800870a:	4311      	orrs	r1, r2
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	6992      	ldr	r2, [r2, #24]
 8008710:	0352      	lsls	r2, r2, #13
 8008712:	430a      	orrs	r2, r1
 8008714:	4313      	orrs	r3, r2
 8008716:	f043 0208 	orr.w	r2, r3, #8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e01b      	b.n	8008758 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1a      	ldr	r2, [r3, #32]
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <FSMC_NAND_Init+0x90>)
 8008726:	4013      	ands	r3, r2
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	6851      	ldr	r1, [r2, #4]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6892      	ldr	r2, [r2, #8]
 8008730:	4311      	orrs	r1, r2
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	68d2      	ldr	r2, [r2, #12]
 8008736:	4311      	orrs	r1, r2
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	6912      	ldr	r2, [r2, #16]
 800873c:	4311      	orrs	r1, r2
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	6952      	ldr	r2, [r2, #20]
 8008742:	0252      	lsls	r2, r2, #9
 8008744:	4311      	orrs	r1, r2
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	6992      	ldr	r2, [r2, #24]
 800874a:	0352      	lsls	r2, r2, #13
 800874c:	430a      	orrs	r2, r1
 800874e:	4313      	orrs	r3, r2
 8008750:	f043 0208 	orr.w	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCRx_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCRx_TAR_Pos)));
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	fff00181 	.word	0xfff00181

08008768 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b10      	cmp	r3, #16
 8008778:	d112      	bne.n	80087a0 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	431a      	orrs	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	431a      	orrs	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	431a      	orrs	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	609a      	str	r2, [r3, #8]
 800879e:	e011      	b.n	80087c4 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	431a      	orrs	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	061b      	lsls	r3, r3, #24
 80087be:	431a      	orrs	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEMx_MEMWAITx_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEMx_MEMHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEMx_MEMHIZx_Pos)));
  }

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr

080087d0 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b10      	cmp	r3, #16
 80087e0:	d112      	bne.n	8008808 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	431a      	orrs	r2, r3
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	041b      	lsls	r3, r3, #16
 80087f8:	431a      	orrs	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	061b      	lsls	r3, r3, #24
 8008800:	431a      	orrs	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	60da      	str	r2, [r3, #12]
 8008806:	e011      	b.n	800882c <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	431a      	orrs	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	061b      	lsls	r3, r3, #24
 8008826:	431a      	orrs	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATTx_ATTWAITx_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATTx_ATTHOLDx_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATTx_ATTHIZx_Pos)));
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <MX_FATFS_Init>:
void NAND_FlashDiskInit(void);
//	retUSER = FATFS_LinkDriver(&NandFlash_Driver, NANDFLASHDISKPath);
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&NandFlash_Driver, NANDFLASHDISKPath);
 800883c:	4905      	ldr	r1, [pc, #20]	; (8008854 <MX_FATFS_Init+0x1c>)
 800883e:	4806      	ldr	r0, [pc, #24]	; (8008858 <MX_FATFS_Init+0x20>)
 8008840:	f004 fb9c 	bl	800cf7c <FATFS_LinkDriver>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <MX_FATFS_Init+0x24>)
 800884a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
    /* additional user code for init */
    NAND_FlashDiskInit();
 800884c:	f000 f810 	bl	8008870 <NAND_FlashDiskInit>
  /* USER CODE END Init */
}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20003d70 	.word	0x20003d70
 8008858:	20000030 	.word	0x20000030
 800885c:	20003538 	.word	0x20003538

08008860 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
    return 0;
 8008864:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008866:	4618      	mov	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
	...

08008870 <NAND_FlashDiskInit>:

/* USER CODE BEGIN Application */
void NAND_FlashDiskInit(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
    FRESULT fres;    
    
    fres = f_mount(&NANDFLASHDISKFatFS, NANDFLASHDISKPath, 0);
 8008876:	2200      	movs	r2, #0
 8008878:	491c      	ldr	r1, [pc, #112]	; (80088ec <NAND_FlashDiskInit+0x7c>)
 800887a:	481d      	ldr	r0, [pc, #116]	; (80088f0 <NAND_FlashDiskInit+0x80>)
 800887c:	f002 fd08 	bl	800b290 <f_mount>
 8008880:	4603      	mov	r3, r0
 8008882:	71fb      	strb	r3, [r7, #7]

    if (fres != FR_OK)
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <NAND_FlashDiskInit+0x22>
        printf("- NandFlash mount error.\r\n");
 800888a:	481a      	ldr	r0, [pc, #104]	; (80088f4 <NAND_FlashDiskInit+0x84>)
 800888c:	f005 fb5c 	bl	800df48 <puts>
        else {
            printf("- f_opendir error = %d.\r\n", fres);
        }
        f_closedir(&dir);
    }
}
 8008890:	e027      	b.n	80088e2 <NAND_FlashDiskInit+0x72>
        fres = f_opendir(&dir, (TCHAR const*)NANDFLASHDISKPath);        
 8008892:	4916      	ldr	r1, [pc, #88]	; (80088ec <NAND_FlashDiskInit+0x7c>)
 8008894:	4818      	ldr	r0, [pc, #96]	; (80088f8 <NAND_FlashDiskInit+0x88>)
 8008896:	f003 fbbe 	bl	800c016 <f_opendir>
 800889a:	4603      	mov	r3, r0
 800889c:	71fb      	strb	r3, [r7, #7]
        if (fres == FR_OK) {
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <NAND_FlashDiskInit+0x3e>
            printf("- Nand Flash mount ok. volum is \"%s\".\r\n", NANDFLASHDISKPath);
 80088a4:	4911      	ldr	r1, [pc, #68]	; (80088ec <NAND_FlashDiskInit+0x7c>)
 80088a6:	4815      	ldr	r0, [pc, #84]	; (80088fc <NAND_FlashDiskInit+0x8c>)
 80088a8:	f005 fab4 	bl	800de14 <iprintf>
 80088ac:	e016      	b.n	80088dc <NAND_FlashDiskInit+0x6c>
        else if (fres == FR_NO_FILESYSTEM) {
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	2b0d      	cmp	r3, #13
 80088b2:	d10e      	bne.n	80088d2 <NAND_FlashDiskInit+0x62>
            FSMC_NAND_AllErase();
 80088b4:	f7fb f8fe 	bl	8003ab4 <FSMC_NAND_AllErase>
            fres = f_mkfs(NANDFLASHDISKPath, 0, 0);
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	480b      	ldr	r0, [pc, #44]	; (80088ec <NAND_FlashDiskInit+0x7c>)
 80088be:	f003 fe5b 	bl	800c578 <f_mkfs>
 80088c2:	4603      	mov	r3, r0
 80088c4:	71fb      	strb	r3, [r7, #7]
            printf("f_mkfs = %d\r\n", fres);            
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4619      	mov	r1, r3
 80088ca:	480d      	ldr	r0, [pc, #52]	; (8008900 <NAND_FlashDiskInit+0x90>)
 80088cc:	f005 faa2 	bl	800de14 <iprintf>
 80088d0:	e004      	b.n	80088dc <NAND_FlashDiskInit+0x6c>
            printf("- f_opendir error = %d.\r\n", fres);
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	4619      	mov	r1, r3
 80088d6:	480b      	ldr	r0, [pc, #44]	; (8008904 <NAND_FlashDiskInit+0x94>)
 80088d8:	f005 fa9c 	bl	800de14 <iprintf>
        f_closedir(&dir);
 80088dc:	4806      	ldr	r0, [pc, #24]	; (80088f8 <NAND_FlashDiskInit+0x88>)
 80088de:	f003 fc84 	bl	800c1ea <f_closedir>
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20003d70 	.word	0x20003d70
 80088f0:	2000353c 	.word	0x2000353c
 80088f4:	0801236c 	.word	0x0801236c
 80088f8:	20003d74 	.word	0x20003d74
 80088fc:	08012388 	.word	0x08012388
 8008900:	080123b0 	.word	0x080123b0
 8008904:	080123c0 	.word	0x080123c0

08008908 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	4a08      	ldr	r2, [pc, #32]	; (8008938 <disk_status+0x30>)
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	79fa      	ldrb	r2, [r7, #7]
 8008920:	4905      	ldr	r1, [pc, #20]	; (8008938 <disk_status+0x30>)
 8008922:	440a      	add	r2, r1
 8008924:	7a12      	ldrb	r2, [r2, #8]
 8008926:	4610      	mov	r0, r2
 8008928:	4798      	blx	r3
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200045c0 	.word	0x200045c0

0800893c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	4a0d      	ldr	r2, [pc, #52]	; (8008984 <disk_initialize+0x48>)
 800894e:	5cd3      	ldrb	r3, [r2, r3]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d111      	bne.n	8008978 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	4a0b      	ldr	r2, [pc, #44]	; (8008984 <disk_initialize+0x48>)
 8008958:	2101      	movs	r1, #1
 800895a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	4a09      	ldr	r2, [pc, #36]	; (8008984 <disk_initialize+0x48>)
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	79fa      	ldrb	r2, [r7, #7]
 800896a:	4906      	ldr	r1, [pc, #24]	; (8008984 <disk_initialize+0x48>)
 800896c:	440a      	add	r2, r1
 800896e:	7a12      	ldrb	r2, [r2, #8]
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	200045c0 	.word	0x200045c0

08008988 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008988:	b590      	push	{r4, r7, lr}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	4a0a      	ldr	r2, [pc, #40]	; (80089c4 <disk_read+0x3c>)
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	689c      	ldr	r4, [r3, #8]
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <disk_read+0x3c>)
 80089a8:	4413      	add	r3, r2
 80089aa:	7a18      	ldrb	r0, [r3, #8]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	47a0      	blx	r4
 80089b4:	4603      	mov	r3, r0
 80089b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd90      	pop	{r4, r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200045c0 	.word	0x200045c0

080089c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4a0a      	ldr	r2, [pc, #40]	; (8008a04 <disk_write+0x3c>)
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	68dc      	ldr	r4, [r3, #12]
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4a07      	ldr	r2, [pc, #28]	; (8008a04 <disk_write+0x3c>)
 80089e8:	4413      	add	r3, r2
 80089ea:	7a18      	ldrb	r0, [r3, #8]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	47a0      	blx	r4
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd90      	pop	{r4, r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200045c0 	.word	0x200045c0

08008a08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	603a      	str	r2, [r7, #0]
 8008a12:	71fb      	strb	r3, [r7, #7]
 8008a14:	460b      	mov	r3, r1
 8008a16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <disk_ioctl+0x38>)
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	4906      	ldr	r1, [pc, #24]	; (8008a40 <disk_ioctl+0x38>)
 8008a28:	440a      	add	r2, r1
 8008a2a:	7a10      	ldrb	r0, [r2, #8]
 8008a2c:	79b9      	ldrb	r1, [r7, #6]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4798      	blx	r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200045c0 	.word	0x200045c0

08008a44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008a58:	e007      	b.n	8008a6a <mem_cpy+0x26>
		*d++ = *s++;
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	1c53      	adds	r3, r2, #1
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	6179      	str	r1, [r7, #20]
 8008a66:	7812      	ldrb	r2, [r2, #0]
 8008a68:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	1e5a      	subs	r2, r3, #1
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f2      	bne.n	8008a5a <mem_cpy+0x16>
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr

08008a80 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008a90:	e005      	b.n	8008a9e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	617a      	str	r2, [r7, #20]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f4      	bne.n	8008a92 <mem_set+0x12>
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008acc:	bf00      	nop
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00d      	beq.n	8008af4 <mem_cmp+0x40>
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	61fa      	str	r2, [r7, #28]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	61ba      	str	r2, [r7, #24]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	1acb      	subs	r3, r1, r3
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0ec      	beq.n	8008ace <mem_cmp+0x1a>
	return r;
 8008af4:	697b      	ldr	r3, [r7, #20]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3724      	adds	r7, #36	; 0x24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b0a:	e002      	b.n	8008b12 <chk_chr+0x12>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <chk_chr+0x26>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d1f2      	bne.n	8008b0c <chk_chr+0xc>
	return *str;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	781b      	ldrb	r3, [r3, #0]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e038      	b.n	8008bba <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8008b48:	492f      	ldr	r1, [pc, #188]	; (8008c08 <chk_lock+0xd4>)
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d029      	beq.n	8008bb0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008b5c:	492a      	ldr	r1, [pc, #168]	; (8008c08 <chk_lock+0xd4>)
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4613      	mov	r3, r2
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d11e      	bne.n	8008bb4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8008b76:	4924      	ldr	r1, [pc, #144]	; (8008c08 <chk_lock+0xd4>)
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3304      	adds	r3, #4
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d110      	bne.n	8008bb4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008b92:	491d      	ldr	r1, [pc, #116]	; (8008c08 <chk_lock+0xd4>)
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4613      	mov	r3, r2
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	881a      	ldrh	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
				Files[i].clu == dp->sclust &&
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d102      	bne.n	8008bb4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008bae:	e007      	b.n	8008bc0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d9c3      	bls.n	8008b48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d109      	bne.n	8008bda <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <chk_lock+0x9e>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d101      	bne.n	8008bd6 <chk_lock+0xa2>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e013      	b.n	8008bfe <chk_lock+0xca>
 8008bd6:	2312      	movs	r3, #18
 8008bd8:	e011      	b.n	8008bfe <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10b      	bne.n	8008bf8 <chk_lock+0xc4>
 8008be0:	4909      	ldr	r1, [pc, #36]	; (8008c08 <chk_lock+0xd4>)
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4613      	mov	r3, r2
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	330a      	adds	r3, #10
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf6:	d101      	bne.n	8008bfc <chk_lock+0xc8>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	e000      	b.n	8008bfe <chk_lock+0xca>
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr
 8008c08:	200045a8 	.word	0x200045a8

08008c0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	e002      	b.n	8008c1e <enq_lock+0x12>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d809      	bhi.n	8008c38 <enq_lock+0x2c>
 8008c24:	490a      	ldr	r1, [pc, #40]	; (8008c50 <enq_lock+0x44>)
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1ef      	bne.n	8008c18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	bf14      	ite	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	2300      	moveq	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc80      	pop	{r7}
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	200045a8 	.word	0x200045a8

08008c54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e02b      	b.n	8008cbc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8008c64:	4955      	ldr	r1, [pc, #340]	; (8008dbc <inc_lock+0x168>)
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d11b      	bne.n	8008cb6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8008c7e:	494f      	ldr	r1, [pc, #316]	; (8008dbc <inc_lock+0x168>)
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4613      	mov	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
		if (Files[i].fs == dp->fs &&
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d10d      	bne.n	8008cb6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8008c9a:	4948      	ldr	r1, [pc, #288]	; (8008dbc <inc_lock+0x168>)
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	3308      	adds	r3, #8
 8008caa:	881a      	ldrh	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
			Files[i].clu == dp->sclust &&
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d006      	beq.n	8008cc4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d9d0      	bls.n	8008c64 <inc_lock+0x10>
 8008cc2:	e000      	b.n	8008cc6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8008cc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d145      	bne.n	8008d58 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e002      	b.n	8008cd8 <inc_lock+0x84>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d809      	bhi.n	8008cf2 <inc_lock+0x9e>
 8008cde:	4937      	ldr	r1, [pc, #220]	; (8008dbc <inc_lock+0x168>)
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ef      	bne.n	8008cd2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d101      	bne.n	8008cfc <inc_lock+0xa8>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e05a      	b.n	8008db2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8008d02:	482e      	ldr	r0, [pc, #184]	; (8008dbc <inc_lock+0x168>)
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4613      	mov	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4403      	add	r3, r0
 8008d10:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8008d18:	4828      	ldr	r0, [pc, #160]	; (8008dbc <inc_lock+0x168>)
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4403      	add	r3, r0
 8008d26:	3304      	adds	r3, #4
 8008d28:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 0806 	ldrh.w	r0, [r3, #2054]	; 0x806
 8008d30:	4922      	ldr	r1, [pc, #136]	; (8008dbc <inc_lock+0x168>)
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4613      	mov	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3308      	adds	r3, #8
 8008d40:	4602      	mov	r2, r0
 8008d42:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008d44:	491d      	ldr	r1, [pc, #116]	; (8008dbc <inc_lock+0x168>)
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	330a      	adds	r3, #10
 8008d54:	2200      	movs	r2, #0
 8008d56:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00c      	beq.n	8008d78 <inc_lock+0x124>
 8008d5e:	4917      	ldr	r1, [pc, #92]	; (8008dbc <inc_lock+0x168>)
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4613      	mov	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	330a      	adds	r3, #10
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <inc_lock+0x124>
 8008d74:	2300      	movs	r3, #0
 8008d76:	e01c      	b.n	8008db2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <inc_lock+0x142>
 8008d7e:	490f      	ldr	r1, [pc, #60]	; (8008dbc <inc_lock+0x168>)
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4613      	mov	r3, r2
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	330a      	adds	r3, #10
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	b299      	uxth	r1, r3
 8008d94:	e001      	b.n	8008d9a <inc_lock+0x146>
 8008d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <inc_lock+0x168>)
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4403      	add	r3, r0
 8008da8:	330a      	adds	r3, #10
 8008daa:	460a      	mov	r2, r1
 8008dac:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr
 8008dbc:	200045a8 	.word	0x200045a8

08008dc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d82e      	bhi.n	8008e32 <dec_lock+0x72>
		n = Files[i].ctr;
 8008dd4:	491b      	ldr	r1, [pc, #108]	; (8008e44 <dec_lock+0x84>)
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	330a      	adds	r3, #10
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008de8:	89fb      	ldrh	r3, [r7, #14]
 8008dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dee:	d101      	bne.n	8008df4 <dec_lock+0x34>
 8008df0:	2300      	movs	r3, #0
 8008df2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <dec_lock+0x40>
 8008dfa:	89fb      	ldrh	r3, [r7, #14]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e00:	4910      	ldr	r1, [pc, #64]	; (8008e44 <dec_lock+0x84>)
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	330a      	adds	r3, #10
 8008e10:	89fa      	ldrh	r2, [r7, #14]
 8008e12:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d108      	bne.n	8008e2c <dec_lock+0x6c>
 8008e1a:	490a      	ldr	r1, [pc, #40]	; (8008e44 <dec_lock+0x84>)
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	737b      	strb	r3, [r7, #13]
 8008e30:	e001      	b.n	8008e36 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e32:	2302      	movs	r3, #2
 8008e34:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e36:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	200045a8 	.word	0x200045a8

08008e48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e016      	b.n	8008e84 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e56:	4910      	ldr	r1, [pc, #64]	; (8008e98 <clear_lock+0x50>)
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d108      	bne.n	8008e7e <clear_lock+0x36>
 8008e6c:	490a      	ldr	r1, [pc, #40]	; (8008e98 <clear_lock+0x50>)
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4613      	mov	r3, r2
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d9e5      	bls.n	8008e56 <clear_lock+0xe>
	}
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200045a8 	.word	0x200045a8

08008e9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d038      	beq.n	8008f24 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
 8008eb8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	f7ff fd7f 	bl	80089c8 <disk_write>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	e026      	b.n	8008f24 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	1ad2      	subs	r2, r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d218      	bcs.n	8008f24 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 8008ef8:	613b      	str	r3, [r7, #16]
 8008efa:	e010      	b.n	8008f1e <sync_window+0x82>
					wsect += fs->fsize;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4413      	add	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	2301      	movs	r3, #1
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	f7ff fd58 	bl	80089c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d8eb      	bhi.n	8008efc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d01b      	beq.n	8008f80 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ffa7 	bl	8008e9c <sync_window>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d113      	bne.n	8008f80 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	2301      	movs	r3, #1
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	f7ff fd10 	bl	8008988 <disk_read>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d004      	beq.n	8008f78 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f72:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
		}
	}
	return res;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ff82 	bl	8008e9c <sync_window>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 809b 	bne.w	80090da <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	f040 8088 	bne.w	80090c0 <sync_fs+0x136>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3805 	ldrb.w	r3, [r3, #2053]	; 0x805
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	f040 8082 	bne.w	80090c0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff fd5b 	bl	8008a80 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2255      	movs	r2, #85	; 0x55
 8008fce:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	22aa      	movs	r2, #170	; 0xaa
 8008fd6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2252      	movs	r2, #82	; 0x52
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2252      	movs	r2, #82	; 0x52
 8008fe4:	705a      	strb	r2, [r3, #1]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2261      	movs	r2, #97	; 0x61
 8008fea:	709a      	strb	r2, [r3, #2]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2241      	movs	r2, #65	; 0x41
 8008ff0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2272      	movs	r2, #114	; 0x72
 8008ff6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2272      	movs	r2, #114	; 0x72
 8008ffe:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2241      	movs	r2, #65	; 0x41
 8009006:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2261      	movs	r2, #97	; 0x61
 800900e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8009026:	b29b      	uxth	r3, r3
 8009028:	0a1b      	lsrs	r3, r3, #8
 800902a:	b29b      	uxth	r3, r3
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800903a:	0c1b      	lsrs	r3, r3, #16
 800903c:	b2da      	uxtb	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800904a:	0e1b      	lsrs	r3, r3, #24
 800904c:	b2da      	uxtb	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800905a:	b2da      	uxtb	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8009068:	b29b      	uxth	r3, r3
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	b29b      	uxth	r3, r3
 800906e:	b2da      	uxtb	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800907c:	0c1b      	lsrs	r3, r3, #16
 800907e:	b2da      	uxtb	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800908c:	0e1b      	lsrs	r3, r3, #24
 800908e:	b2da      	uxtb	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80090b2:	2301      	movs	r3, #1
 80090b4:	f7ff fc88 	bl	80089c8 <disk_write>
			fs->fsi_flag = 0;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff fc9c 	bl	8008a08 <disk_ioctl>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <sync_fs+0x150>
			res = FR_DISK_ERR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	3b02      	subs	r3, #2
 80090f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80090fa:	3b02      	subs	r3, #2
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d301      	bcc.n	8009106 <clust2sect+0x22>
 8009102:	2300      	movs	r3, #0
 8009104:	e00a      	b.n	800911c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800910c:	461a      	mov	r2, r3
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	fb03 f202 	mul.w	r2, r3, r2
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
 800911a:	4413      	add	r3, r2
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d905      	bls.n	8009142 <get_fat+0x1c>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d302      	bcc.n	8009148 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009142:	2301      	movs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e0a5      	b.n	8009294 <get_fat+0x16e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009148:	f04f 33ff 	mov.w	r3, #4294967295
 800914c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8009154:	2b03      	cmp	r3, #3
 8009156:	d069      	beq.n	800922c <get_fat+0x106>
 8009158:	2b03      	cmp	r3, #3
 800915a:	f300 8091 	bgt.w	8009280 <get_fat+0x15a>
 800915e:	2b01      	cmp	r3, #1
 8009160:	d002      	beq.n	8009168 <get_fat+0x42>
 8009162:	2b02      	cmp	r3, #2
 8009164:	d040      	beq.n	80091e8 <get_fat+0xc2>
 8009166:	e08b      	b.n	8009280 <get_fat+0x15a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0adb      	lsrs	r3, r3, #11
 8009180:	4413      	add	r3, r2
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff fed2 	bl	8008f2e <move_window>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d17a      	bne.n	8009286 <get_fat+0x160>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	60fa      	str	r2, [r7, #12]
 8009196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	5cd3      	ldrb	r3, [r2, r3]
 800919e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	0adb      	lsrs	r3, r3, #11
 80091aa:	4413      	add	r3, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff febd 	bl	8008f2e <move_window>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d167      	bne.n	800928a <get_fat+0x164>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	5cd3      	ldrb	r3, [r2, r3]
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	461a      	mov	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <get_fat+0xb8>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	091b      	lsrs	r3, r3, #4
 80091dc:	e002      	b.n	80091e4 <get_fat+0xbe>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e4:	617b      	str	r3, [r7, #20]
			break;
 80091e6:	e055      	b.n	8009294 <get_fat+0x16e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	0a9b      	lsrs	r3, r3, #10
 80091f2:	4413      	add	r3, r2
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fe99 	bl	8008f2e <move_window>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d145      	bne.n	800928e <get_fat+0x168>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	005a      	lsls	r2, r3, #1
 8009206:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800920a:	4013      	ands	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	3301      	adds	r3, #1
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	b21a      	sxth	r2, r3
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b21b      	sxth	r3, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	b21b      	sxth	r3, r3
 8009226:	b29b      	uxth	r3, r3
 8009228:	617b      	str	r3, [r7, #20]
			break;
 800922a:	e033      	b.n	8009294 <get_fat+0x16e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	0a5b      	lsrs	r3, r3, #9
 8009236:	4413      	add	r3, r2
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff fe77 	bl	8008f2e <move_window>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d125      	bne.n	8009292 <get_fat+0x16c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	009a      	lsls	r2, r3, #2
 800924a:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800924e:	4013      	ands	r3, r2
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	3303      	adds	r3, #3
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	061a      	lsls	r2, r3, #24
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	3302      	adds	r3, #2
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	041b      	lsls	r3, r3, #16
 8009266:	4313      	orrs	r3, r2
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	3201      	adds	r2, #1
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	0212      	lsls	r2, r2, #8
 8009270:	4313      	orrs	r3, r2
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	4313      	orrs	r3, r2
 8009278:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800927c:	617b      	str	r3, [r7, #20]
			break;
 800927e:	e009      	b.n	8009294 <get_fat+0x16e>

		default:
			val = 1;	/* Internal error */
 8009280:	2301      	movs	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	e006      	b.n	8009294 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009286:	bf00      	nop
 8009288:	e004      	b.n	8009294 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800928a:	bf00      	nop
 800928c:	e002      	b.n	8009294 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800928e:	bf00      	nop
 8009290:	e000      	b.n	8009294 <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009292:	bf00      	nop
		}
	}

	return val;
 8009294:	697b      	ldr	r3, [r7, #20]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d905      	bls.n	80092bc <put_fat+0x1e>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d302      	bcc.n	80092c2 <put_fat+0x24>
		res = FR_INT_ERR;
 80092bc:	2302      	movs	r3, #2
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	e0f8      	b.n	80094b4 <put_fat+0x216>

	} else {
		switch (fs->fs_type) {
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	f000 809f 	beq.w	800940c <put_fat+0x16e>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	f300 80e6 	bgt.w	80094a0 <put_fat+0x202>
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d002      	beq.n	80092de <put_fat+0x40>
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d06f      	beq.n	80093bc <put_fat+0x11e>
 80092dc:	e0e0      	b.n	80094a0 <put_fat+0x202>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	085b      	lsrs	r3, r3, #1
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4413      	add	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	0adb      	lsrs	r3, r3, #11
 80092f6:	4413      	add	r3, r2
 80092f8:	4619      	mov	r1, r3
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fe17 	bl	8008f2e <move_window>
 8009300:	4603      	mov	r3, r0
 8009302:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009304:	7ffb      	ldrb	r3, [r7, #31]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 80cd 	bne.w	80094a6 <put_fat+0x208>
			p = &fs->win.d8[bc++ % SS(fs)];
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	617a      	str	r2, [r7, #20]
 8009312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <put_fat+0xa4>
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	b25b      	sxtb	r3, r3
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	b25a      	sxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	b25b      	sxtb	r3, r3
 800933a:	4313      	orrs	r3, r2
 800933c:	b25b      	sxtb	r3, r3
 800933e:	b2db      	uxtb	r3, r3
 8009340:	e001      	b.n	8009346 <put_fat+0xa8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	0adb      	lsrs	r3, r3, #11
 800935c:	4413      	add	r3, r2
 800935e:	4619      	mov	r1, r3
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fde4 	bl	8008f2e <move_window>
 8009366:	4603      	mov	r3, r0
 8009368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800936a:	7ffb      	ldrb	r3, [r7, #31]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f040 809c 	bne.w	80094aa <put_fat+0x20c>
			p = &fs->win.d8[bc % SS(fs)];
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4413      	add	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <put_fat+0xf2>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	091b      	lsrs	r3, r3, #4
 800938c:	b2db      	uxtb	r3, r3
 800938e:	e00e      	b.n	80093ae <put_fat+0x110>
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b25b      	sxtb	r3, r3
 8009396:	f023 030f 	bic.w	r3, r3, #15
 800939a:	b25a      	sxtb	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	b25b      	sxtb	r3, r3
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	b25b      	sxtb	r3, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			break;
 80093ba:	e07b      	b.n	80094b4 <put_fat+0x216>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	0a9b      	lsrs	r3, r3, #10
 80093c6:	4413      	add	r3, r2
 80093c8:	4619      	mov	r1, r3
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff fdaf 	bl	8008f2e <move_window>
 80093d0:	4603      	mov	r3, r0
 80093d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093d4:	7ffb      	ldrb	r3, [r7, #31]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d169      	bne.n	80094ae <put_fat+0x210>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	005a      	lsls	r2, r3, #1
 80093de:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80093e2:	4013      	ands	r3, r2
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	0a1b      	lsrs	r3, r3, #8
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	3301      	adds	r3, #1
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			break;
 800940a:	e053      	b.n	80094b4 <put_fat+0x216>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	0a5b      	lsrs	r3, r3, #9
 8009416:	4413      	add	r3, r2
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fd87 	bl	8008f2e <move_window>
 8009420:	4603      	mov	r3, r0
 8009422:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009424:	7ffb      	ldrb	r3, [r7, #31]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d143      	bne.n	80094b2 <put_fat+0x214>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	009a      	lsls	r2, r3, #2
 800942e:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8009432:	4013      	ands	r3, r2
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4413      	add	r3, r2
 8009438:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	3303      	adds	r3, #3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	061a      	lsls	r2, r3, #24
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	3302      	adds	r3, #2
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	041b      	lsls	r3, r3, #16
 800944a:	4313      	orrs	r3, r2
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	3201      	adds	r2, #1
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	0212      	lsls	r2, r2, #8
 8009454:	4313      	orrs	r3, r2
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	4313      	orrs	r3, r2
 8009464:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	b29b      	uxth	r3, r3
 8009472:	0a1b      	lsrs	r3, r3, #8
 8009474:	b29a      	uxth	r2, r3
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3301      	adds	r3, #1
 800947a:	b2d2      	uxtb	r2, r2
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	0c1a      	lsrs	r2, r3, #16
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	3302      	adds	r3, #2
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	0e1a      	lsrs	r2, r3, #24
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	3303      	adds	r3, #3
 8009492:	b2d2      	uxtb	r2, r2
 8009494:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			break;
 800949e:	e009      	b.n	80094b4 <put_fat+0x216>

		default :
			res = FR_INT_ERR;
 80094a0:	2302      	movs	r3, #2
 80094a2:	77fb      	strb	r3, [r7, #31]
 80094a4:	e006      	b.n	80094b4 <put_fat+0x216>
			if (res != FR_OK) break;
 80094a6:	bf00      	nop
 80094a8:	e004      	b.n	80094b4 <put_fat+0x216>
			if (res != FR_OK) break;
 80094aa:	bf00      	nop
 80094ac:	e002      	b.n	80094b4 <put_fat+0x216>
			if (res != FR_OK) break;
 80094ae:	bf00      	nop
 80094b0:	e000      	b.n	80094b4 <put_fat+0x216>
			if (res != FR_OK) break;
 80094b2:	bf00      	nop
		}
	}

	return res;
 80094b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b088      	sub	sp, #32
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	617b      	str	r3, [r7, #20]
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d905      	bls.n	80094e2 <remove_chain+0x24>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d302      	bcc.n	80094e8 <remove_chain+0x2a>
		res = FR_INT_ERR;
 80094e2:	2302      	movs	r3, #2
 80094e4:	77fb      	strb	r3, [r7, #31]
 80094e6:	e069      	b.n	80095bc <remove_chain+0xfe>

	} else {
		res = FR_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	77fb      	strb	r3, [r7, #31]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80094ec:	e05c      	b.n	80095a8 <remove_chain+0xea>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fe18 	bl	8009126 <get_fat>
 80094f6:	6138      	str	r0, [r7, #16]
			if (nxt == 0) break;				/* Empty cluster? */
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d05b      	beq.n	80095b6 <remove_chain+0xf8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d102      	bne.n	800950a <remove_chain+0x4c>
 8009504:	2302      	movs	r3, #2
 8009506:	77fb      	strb	r3, [r7, #31]
 8009508:	e058      	b.n	80095bc <remove_chain+0xfe>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d102      	bne.n	8009518 <remove_chain+0x5a>
 8009512:	2301      	movs	r3, #1
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e051      	b.n	80095bc <remove_chain+0xfe>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009518:	2200      	movs	r2, #0
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff febe 	bl	800929e <put_fat>
 8009522:	4603      	mov	r3, r0
 8009524:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009526:	7ffb      	ldrb	r3, [r7, #31]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d146      	bne.n	80095ba <remove_chain+0xfc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d00f      	beq.n	8009558 <remove_chain+0x9a>
				fs->free_clust++;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
				fs->fsi_flag |= 1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 3805 	ldrb.w	r3, [r3, #2053]	; 0x805
 800954c:	f043 0301 	orr.w	r3, r3, #1
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
			}
#if _USE_TRIM
			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	3301      	adds	r3, #1
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	429a      	cmp	r2, r3
 8009560:	d102      	bne.n	8009568 <remove_chain+0xaa>
				ecl = nxt;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	e01d      	b.n	80095a4 <remove_chain+0xe6>
			} else {				/* End of contiguous clusters */ 
				rt[0] = clust2sect(fs, scl);					/* Start sector */
 8009568:	69b9      	ldr	r1, [r7, #24]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fdba 	bl	80090e4 <clust2sect>
 8009570:	4603      	mov	r3, r0
 8009572:	60bb      	str	r3, [r7, #8]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 8009574:	6979      	ldr	r1, [r7, #20]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fdb4 	bl	80090e4 <clust2sect>
 800957c:	4602      	mov	r2, r0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 8009584:	4413      	add	r3, r2
 8009586:	3b01      	subs	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	2104      	movs	r1, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fa36 	bl	8008a08 <disk_ioctl>
				scl = ecl = nxt;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	61bb      	str	r3, [r7, #24]
			}
#endif
			clst = nxt;	/* Next cluster */
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d39c      	bcc.n	80094ee <remove_chain+0x30>
 80095b4:	e002      	b.n	80095bc <remove_chain+0xfe>
			if (nxt == 0) break;				/* Empty cluster? */
 80095b6:	bf00      	nop
 80095b8:	e000      	b.n	80095bc <remove_chain+0xfe>
			if (res != FR_OK) break;
 80095ba:	bf00      	nop
		}
	}

	return res;
 80095bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10f      	bne.n	80095f6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80095dc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <create_chain+0x2a>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d31c      	bcc.n	800962a <create_chain+0x64>
 80095f0:	2301      	movs	r3, #1
 80095f2:	613b      	str	r3, [r7, #16]
 80095f4:	e019      	b.n	800962a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fd94 	bl	8009126 <get_fat>
 80095fe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d801      	bhi.n	800960a <create_chain+0x44>
 8009606:	2301      	movs	r3, #1
 8009608:	e076      	b.n	80096f8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d101      	bne.n	8009616 <create_chain+0x50>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	e070      	b.n	80096f8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d201      	bcs.n	8009626 <create_chain+0x60>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	e068      	b.n	80096f8 <create_chain+0x132>
		scl = clst;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	3301      	adds	r3, #1
 8009632:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	429a      	cmp	r2, r3
 800963e:	d307      	bcc.n	8009650 <create_chain+0x8a>
			ncl = 2;
 8009640:	2302      	movs	r3, #2
 8009642:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	429a      	cmp	r2, r3
 800964a:	d901      	bls.n	8009650 <create_chain+0x8a>
 800964c:	2300      	movs	r3, #0
 800964e:	e053      	b.n	80096f8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009650:	6979      	ldr	r1, [r7, #20]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff fd67 	bl	8009126 <get_fat>
 8009658:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00e      	beq.n	800967e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d002      	beq.n	800966e <create_chain+0xa8>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <create_chain+0xac>
			return cs;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	e042      	b.n	80096f8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d1d9      	bne.n	800962e <create_chain+0x68>
 800967a:	2300      	movs	r3, #0
 800967c:	e03c      	b.n	80096f8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800967e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009680:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009684:	6979      	ldr	r1, [r7, #20]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fe09 	bl	800929e <put_fat>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <create_chain+0xe4>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d006      	beq.n	80096aa <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fdfc 	bl	800929e <put_fat>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11a      	bne.n	80096e6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
		if (fs->free_clust != 0xFFFFFFFF) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d018      	beq.n	80096f6 <create_chain+0x130>
			fs->free_clust--;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80096ca:	1e5a      	subs	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
			fs->fsi_flag |= 1;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3805 	ldrb.w	r3, [r3, #2053]	; 0x805
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
 80096e4:	e007      	b.n	80096f6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d102      	bne.n	80096f2 <create_chain+0x12c>
 80096ec:	f04f 33ff 	mov.w	r3, #4294967295
 80096f0:	e000      	b.n	80096f4 <create_chain+0x12e>
 80096f2:	2301      	movs	r3, #1
 80096f4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80096f6:	697b      	ldr	r3, [r7, #20]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8009710:	3304      	adds	r3, #4
 8009712:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	0adb      	lsrs	r3, r3, #11
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
 800971e:	f892 2802 	ldrb.w	r2, [r2, #2050]	; 0x802
 8009722:	fbb3 f3f2 	udiv	r3, r3, r2
 8009726:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	613a      	str	r2, [r7, #16]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <clmt_clust+0x3c>
 8009738:	2300      	movs	r3, #0
 800973a:	e010      	b.n	800975e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	d307      	bcc.n	8009754 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3304      	adds	r3, #4
 8009750:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009752:	e7e9      	b.n	8009728 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8009754:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
}
 800975e:	4618      	mov	r0, r3
 8009760:	371c      	adds	r7, #28
 8009762:	46bd      	mov	sp, r7
 8009764:	bc80      	pop	{r7}
 8009766:	4770      	bx	lr

08009768 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	b29a      	uxth	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009782:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d007      	beq.n	800979a <dir_sdi+0x32>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009790:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	429a      	cmp	r2, r3
 8009798:	d301      	bcc.n	800979e <dir_sdi+0x36>
		return FR_INT_ERR;
 800979a:	2302      	movs	r3, #2
 800979c:	e074      	b.n	8009888 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10c      	bne.n	80097be <dir_sdi+0x56>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097aa:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d105      	bne.n	80097be <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097b8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 80097bc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d111      	bne.n	80097e8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097ca:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80097ce:	461a      	mov	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d301      	bcc.n	80097da <dir_sdi+0x72>
			return FR_INT_ERR;
 80097d6:	2302      	movs	r3, #2
 80097d8:	e056      	b.n	8009888 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097e0:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e032      	b.n	800984e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097ee:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 80097f2:	019b      	lsls	r3, r3, #6
 80097f4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80097f6:	e01e      	b.n	8009836 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80097fe:	6979      	ldr	r1, [r7, #20]
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fc90 	bl	8009126 <get_fat>
 8009806:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d101      	bne.n	8009814 <dir_sdi+0xac>
 8009810:	2301      	movs	r3, #1
 8009812:	e039      	b.n	8009888 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d907      	bls.n	800982a <dir_sdi+0xc2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009820:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	429a      	cmp	r2, r3
 8009828:	d301      	bcc.n	800982e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800982a:	2302      	movs	r3, #2
 800982c:	e02c      	b.n	8009888 <dir_sdi+0x120>
			idx -= ic;
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	429a      	cmp	r2, r3
 800983c:	d2dc      	bcs.n	80097f8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009844:	6979      	ldr	r1, [r7, #20]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fc4c 	bl	80090e4 <clust2sect>
 800984c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	if (!sect) return FR_INT_ERR;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <dir_sdi+0xf8>
 800985c:	2302      	movs	r3, #2
 800985e:	e013      	b.n	8009888 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	099a      	lsrs	r2, r3, #6
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	441a      	add	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009874:	461a      	mov	r2, r3
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800987c:	015b      	lsls	r3, r3, #5
 800987e:	441a      	add	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814

	return FR_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009890:	b590      	push	{r4, r7, lr}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <dir_next+0x26>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <dir_next+0x2a>
		return FR_NO_FILE;
 80098b6:	2304      	movs	r3, #4
 80098b8:	e0dd      	b.n	8009a76 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 80c6 	bne.w	8009a52 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810

		if (!dp->clust) {		/* Static table */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10b      	bne.n	80098f6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80098e4:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80098e8:	461a      	mov	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f0c0 80b0 	bcc.w	8009a52 <dir_next+0x1c2>
				return FR_NO_FILE;
 80098f2:	2304      	movs	r3, #4
 80098f4:	e0bf      	b.n	8009a76 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	099b      	lsrs	r3, r3, #6
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
 8009900:	f892 2802 	ldrb.w	r2, [r2, #2050]	; 0x802
 8009904:	3a01      	subs	r2, #1
 8009906:	4013      	ands	r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	f040 80a2 	bne.w	8009a52 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800991a:	4619      	mov	r1, r3
 800991c:	4610      	mov	r0, r2
 800991e:	f7ff fc02 	bl	8009126 <get_fat>
 8009922:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d801      	bhi.n	800992e <dir_next+0x9e>
 800992a:	2302      	movs	r3, #2
 800992c:	e0a3      	b.n	8009a76 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d101      	bne.n	800993a <dir_next+0xaa>
 8009936:	2301      	movs	r3, #1
 8009938:	e09d      	b.n	8009a76 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009940:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	429a      	cmp	r2, r3
 8009948:	d374      	bcc.n	8009a34 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <dir_next+0xc4>
 8009950:	2304      	movs	r3, #4
 8009952:	e090      	b.n	8009a76 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7ff fe2f 	bl	80095c6 <create_chain>
 8009968:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <dir_next+0xe4>
 8009970:	2307      	movs	r3, #7
 8009972:	e080      	b.n	8009a76 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <dir_next+0xee>
 800997a:	2302      	movs	r3, #2
 800997c:	e07b      	b.n	8009a76 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d101      	bne.n	800998a <dir_next+0xfa>
 8009986:	2301      	movs	r3, #1
 8009988:	e075      	b.n	8009a76 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff fa83 	bl	8008e9c <sync_window>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <dir_next+0x110>
 800999c:	2301      	movs	r3, #1
 800999e:	e06a      	b.n	8009a76 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80099a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff f867 	bl	8008a80 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 4800 	ldr.w	r4, [r3, #2048]	; 0x800
 80099be:	6979      	ldr	r1, [r7, #20]
 80099c0:	4610      	mov	r0, r2
 80099c2:	f7ff fb8f 	bl	80090e4 <clust2sect>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e01b      	b.n	8009a0a <dir_next+0x17a>
						dp->fs->wflag = 1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fa59 	bl	8008e9c <sync_window>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <dir_next+0x164>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e040      	b.n	8009a76 <dir_next+0x1e6>
						dp->fs->winsect++;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80099fa:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80099fe:	3201      	adds	r2, #1
 8009a00:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	3301      	adds	r3, #1
 8009a08:	613b      	str	r3, [r7, #16]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009a10:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 8009a14:	461a      	mov	r2, r3
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d3da      	bcc.n	80099d2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009a22:	f8d3 1830 	ldr.w	r1, [r3, #2096]	; 0x830
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	1a8a      	subs	r2, r1, r2
 8009a30:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				dp->sect = clust2sect(dp->fs, clst);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009a42:	6979      	ldr	r1, [r7, #20]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff fb4d 	bl	80090e4 <clust2sect>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8009a62:	461a      	mov	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a6a:	015b      	lsls	r3, r3, #5
 8009a6c:	441a      	add	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814

	return FR_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd90      	pop	{r4, r7, pc}

08009a7e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009a88:	2100      	movs	r1, #0
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fe6c 	bl	8009768 <dir_sdi>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d131      	bne.n	8009afe <dir_alloc+0x80>
		n = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f7ff fa3e 	bl	8008f2e <move_window>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d11f      	bne.n	8009afc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2be5      	cmp	r3, #229	; 0xe5
 8009ac6:	d005      	beq.n	8009ad4 <dir_alloc+0x56>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d107      	bne.n	8009ae4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d102      	bne.n	8009ae8 <dir_alloc+0x6a>
 8009ae2:	e00c      	b.n	8009afe <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fed0 	bl	8009890 <dir_next>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0d1      	beq.n	8009a9e <dir_alloc+0x20>
 8009afa:	e000      	b.n	8009afe <dir_alloc+0x80>
			if (res != FR_OK) break;
 8009afc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d101      	bne.n	8009b08 <dir_alloc+0x8a>
 8009b04:	2307      	movs	r3, #7
 8009b06:	73fb      	strb	r3, [r7, #15]
	return res;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	331b      	adds	r3, #27
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b21a      	sxth	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	331a      	adds	r3, #26
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	b21b      	sxth	r3, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d10f      	bne.n	8009b60 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3315      	adds	r3, #21
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	b21a      	sxth	r2, r3
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b21b      	sxth	r3, r3
 8009b52:	4313      	orrs	r3, r2
 8009b54:	b21b      	sxth	r3, r3
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	041b      	lsls	r3, r3, #16
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]

	return cl;
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bc80      	pop	{r7}
 8009b6a:	4770      	bx	lr

08009b6c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	331a      	adds	r3, #26
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	0a1b      	lsrs	r3, r3, #8
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	331b      	adds	r3, #27
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	0c1a      	lsrs	r2, r3, #16
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3314      	adds	r3, #20
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	701a      	strb	r2, [r3, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	0c1b      	lsrs	r3, r3, #16
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3315      	adds	r3, #21
 8009baa:	b2d2      	uxtb	r2, r2
 8009bac:	701a      	strb	r2, [r3, #0]
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bca:	1e5a      	subs	r2, r3, #1
 8009bcc:	4613      	mov	r3, r2
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009be0:	4a2b      	ldr	r2, [pc, #172]	; (8009c90 <cmp_lfn+0xd8>)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	b21a      	sxth	r2, r3
 8009bf4:	4926      	ldr	r1, [pc, #152]	; (8009c90 <cmp_lfn+0xd8>)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	440b      	add	r3, r1
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	440b      	add	r3, r1
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b21b      	sxth	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b21b      	sxth	r3, r3
 8009c0a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d019      	beq.n	8009c46 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009c12:	89bb      	ldrh	r3, [r7, #12]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f003 fa1d 	bl	800d054 <ff_wtoupper>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2bfe      	cmp	r3, #254	; 0xfe
 8009c22:	d80e      	bhi.n	8009c42 <cmp_lfn+0x8a>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	617a      	str	r2, [r7, #20]
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f003 fa0e 	bl	800d054 <ff_wtoupper>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	89fb      	ldrh	r3, [r7, #14]
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d008      	beq.n	8009c54 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8009c42:	2300      	movs	r3, #0
 8009c44:	e01f      	b.n	8009c86 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8009c46:	89bb      	ldrh	r3, [r7, #12]
 8009c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d001      	beq.n	8009c54 <cmp_lfn+0x9c>
 8009c50:	2300      	movs	r3, #0
 8009c52:	e018      	b.n	8009c86 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	3301      	adds	r3, #1
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b0c      	cmp	r3, #12
 8009c5e:	d9bf      	bls.n	8009be0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <cmp_lfn+0xcc>
 8009c6c:	89fb      	ldrh	r3, [r7, #14]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d008      	beq.n	8009c84 <cmp_lfn+0xcc>
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <cmp_lfn+0xcc>
		return 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e000      	b.n	8009c86 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8009c84:	2301      	movs	r3, #1
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	080127d0 	.word	0x080127d0

08009c94 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	4613      	mov	r3, r2
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8009cbc:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <pick_lfn+0xc4>)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4413      	add	r3, r2
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	b21a      	sxth	r2, r3
 8009cd0:	4921      	ldr	r1, [pc, #132]	; (8009d58 <pick_lfn+0xc4>)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	440b      	add	r3, r1
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	440b      	add	r3, r1
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	b21b      	sxth	r3, r3
 8009ce6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009ce8:	89fb      	ldrh	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00f      	beq.n	8009d0e <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2bfe      	cmp	r3, #254	; 0xfe
 8009cf2:	d901      	bls.n	8009cf8 <pick_lfn+0x64>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e029      	b.n	8009d4c <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009cf8:	89bb      	ldrh	r3, [r7, #12]
 8009cfa:	81fb      	strh	r3, [r7, #14]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	617a      	str	r2, [r7, #20]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	4413      	add	r3, r2
 8009d08:	89fa      	ldrh	r2, [r7, #14]
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	e006      	b.n	8009d1c <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009d0e:	89bb      	ldrh	r3, [r7, #12]
 8009d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d001      	beq.n	8009d1c <pick_lfn+0x88>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e017      	b.n	8009d4c <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d9c9      	bls.n	8009cbc <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00a      	beq.n	8009d4a <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2bfe      	cmp	r3, #254	; 0xfe
 8009d38:	d901      	bls.n	8009d3e <pick_lfn+0xaa>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e006      	b.n	8009d4c <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	2200      	movs	r2, #0
 8009d48:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 8009d4a:	2301      	movs	r3, #1
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	371c      	adds	r7, #28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	080127d0 	.word	0x080127d0

08009d5c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b089      	sub	sp, #36	; 0x24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4611      	mov	r1, r2
 8009d68:	461a      	mov	r2, r3
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	71fb      	strb	r3, [r7, #7]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	330d      	adds	r3, #13
 8009d76:	79ba      	ldrb	r2, [r7, #6]
 8009d78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	330b      	adds	r3, #11
 8009d7e:	220f      	movs	r2, #15
 8009d80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	330c      	adds	r3, #12
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	331a      	adds	r3, #26
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	331b      	adds	r3, #27
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	1e5a      	subs	r2, r3, #1
 8009d9e:	4613      	mov	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	82fb      	strh	r3, [r7, #22]
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009db2:	8afb      	ldrh	r3, [r7, #22]
 8009db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d007      	beq.n	8009dcc <fit_lfn+0x70>
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	61fa      	str	r2, [r7, #28]
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009dcc:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <fit_lfn+0xe4>)
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	4413      	add	r3, r2
 8009dda:	8afa      	ldrh	r2, [r7, #22]
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	8afb      	ldrh	r3, [r7, #22]
 8009de2:	0a1b      	lsrs	r3, r3, #8
 8009de4:	b299      	uxth	r1, r3
 8009de6:	4a16      	ldr	r2, [pc, #88]	; (8009e40 <fit_lfn+0xe4>)
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	4413      	add	r3, r2
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	b2ca      	uxtb	r2, r1
 8009df6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009df8:	8afb      	ldrh	r3, [r7, #22]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <fit_lfn+0xa8>
 8009dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	3301      	adds	r3, #1
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	2b0c      	cmp	r3, #12
 8009e0e:	d9d0      	bls.n	8009db2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009e10:	8afb      	ldrh	r3, [r7, #22]
 8009e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d006      	beq.n	8009e28 <fit_lfn+0xcc>
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <fit_lfn+0xd4>
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	79fa      	ldrb	r2, [r7, #7]
 8009e34:	701a      	strb	r2, [r3, #0]
}
 8009e36:	bf00      	nop
 8009e38:	3724      	adds	r7, #36	; 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr
 8009e40:	080127d0 	.word	0x080127d0

08009e44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08c      	sub	sp, #48	; 0x30
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009e52:	220b      	movs	r2, #11
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7fe fdf4 	bl	8008a44 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d92b      	bls.n	8009eba <gen_numname+0x76>
		sr = seq;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009e66:	e022      	b.n	8009eae <gen_numname+0x6a>
			wc = *lfn++;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1c9a      	adds	r2, r3, #2
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009e72:	2300      	movs	r3, #0
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e76:	e017      	b.n	8009ea8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	005a      	lsls	r2, r3, #1
 8009e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	4413      	add	r3, r2
 8009e84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <gen_numname+0x5e>
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009e9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009ea0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	2b0f      	cmp	r3, #15
 8009eac:	d9e4      	bls.n	8009e78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d8      	bne.n	8009e68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009eba:	2307      	movs	r3, #7
 8009ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	3330      	adds	r3, #48	; 0x30
 8009eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed2:	2b39      	cmp	r3, #57	; 0x39
 8009ed4:	d904      	bls.n	8009ee0 <gen_numname+0x9c>
 8009ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eda:	3307      	adds	r3, #7
 8009edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	1e5a      	subs	r2, r3, #1
 8009ee4:	62ba      	str	r2, [r7, #40]	; 0x28
 8009ee6:	3330      	adds	r3, #48	; 0x30
 8009ee8:	443b      	add	r3, r7
 8009eea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009eee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	091b      	lsrs	r3, r3, #4
 8009ef6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1df      	bne.n	8009ebe <gen_numname+0x7a>
	ns[i] = '~';
 8009efe:	f107 0214 	add.w	r2, r7, #20
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	4413      	add	r3, r2
 8009f06:	227e      	movs	r2, #126	; 0x7e
 8009f08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0e:	e016      	b.n	8009f3e <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	4413      	add	r3, r2
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b80      	cmp	r3, #128	; 0x80
 8009f1a:	d90d      	bls.n	8009f38 <gen_numname+0xf4>
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	4413      	add	r3, r2
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2bff      	cmp	r3, #255	; 0xff
 8009f26:	d007      	beq.n	8009f38 <gen_numname+0xf4>
			if (j == i - 1) break;
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d010      	beq.n	8009f54 <gen_numname+0x110>
			j++;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	3301      	adds	r3, #1
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d207      	bcs.n	8009f56 <gen_numname+0x112>
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	4413      	add	r3, r2
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	d1de      	bne.n	8009f10 <gen_numname+0xcc>
 8009f52:	e000      	b.n	8009f56 <gen_numname+0x112>
			if (j == i - 1) break;
 8009f54:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	d807      	bhi.n	8009f6c <gen_numname+0x128>
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f62:	3330      	adds	r3, #48	; 0x30
 8009f64:	443b      	add	r3, r7
 8009f66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009f6a:	e000      	b.n	8009f6e <gen_numname+0x12a>
 8009f6c:	2120      	movs	r1, #32
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	627a      	str	r2, [r7, #36]	; 0x24
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4413      	add	r3, r2
 8009f78:	460a      	mov	r2, r1
 8009f7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	2b07      	cmp	r3, #7
 8009f80:	d9e9      	bls.n	8009f56 <gen_numname+0x112>
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	3730      	adds	r7, #48	; 0x30
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009f98:	230b      	movs	r3, #11
 8009f9a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	0852      	lsrs	r2, r2, #1
 8009fa2:	01db      	lsls	r3, r3, #7
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	1c59      	adds	r1, r3, #1
 8009fac:	6079      	str	r1, [r7, #4]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	73fb      	strb	r3, [r7, #15]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1ed      	bne.n	8009f9c <sum_sfn+0x10>
	return sum;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bc80      	pop	{r7}
 8009fca:	4770      	bx	lr

08009fcc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff fbc6 	bl	8009768 <dir_sdi>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <dir_find+0x1e>
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	e0ac      	b.n	800a144 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009fea:	23ff      	movs	r3, #255	; 0xff
 8009fec:	753b      	strb	r3, [r7, #20]
 8009fee:	7d3b      	ldrb	r3, [r7, #20]
 8009ff0:	757b      	strb	r3, [r7, #21]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ff8:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7fe ff8f 	bl	8008f2e <move_window>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f040 808e 	bne.w	800a138 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a022:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a02a:	7dbb      	ldrb	r3, [r7, #22]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <dir_find+0x6a>
 800a030:	2304      	movs	r3, #4
 800a032:	75fb      	strb	r3, [r7, #23]
 800a034:	e085      	b.n	800a142 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	330b      	adds	r3, #11
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a040:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a042:	7dbb      	ldrb	r3, [r7, #22]
 800a044:	2be5      	cmp	r3, #229	; 0xe5
 800a046:	d007      	beq.n	800a058 <dir_find+0x8c>
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	f003 0308 	and.w	r3, r3, #8
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <dir_find+0x9c>
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	2b0f      	cmp	r3, #15
 800a056:	d007      	beq.n	800a068 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a058:	23ff      	movs	r3, #255	; 0xff
 800a05a:	757b      	strb	r3, [r7, #21]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a062:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
 800a066:	e05c      	b.n	800a122 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d133      	bne.n	800a0d6 <dir_find+0x10a>
				if (dp->lfn) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800a074:	2b00      	cmp	r3, #0
 800a076:	d054      	beq.n	800a122 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a078:	7dbb      	ldrb	r3, [r7, #22]
 800a07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00e      	beq.n	800a0a0 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	7b5b      	ldrb	r3, [r3, #13]
 800a086:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800a088:	7dbb      	ldrb	r3, [r7, #22]
 800a08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a08e:	75bb      	strb	r3, [r7, #22]
 800a090:	7dbb      	ldrb	r3, [r7, #22]
 800a092:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a0a0:	7dba      	ldrb	r2, [r7, #22]
 800a0a2:	7d7b      	ldrb	r3, [r7, #21]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d113      	bne.n	800a0d0 <dir_find+0x104>
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	330d      	adds	r3, #13
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	7d3a      	ldrb	r2, [r7, #20]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10d      	bne.n	800a0d0 <dir_find+0x104>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800a0ba:	6939      	ldr	r1, [r7, #16]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fd7b 	bl	8009bb8 <cmp_lfn>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <dir_find+0x104>
 800a0c8:	7d7b      	ldrb	r3, [r7, #21]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	e000      	b.n	800a0d2 <dir_find+0x106>
 800a0d0:	23ff      	movs	r3, #255	; 0xff
 800a0d2:	757b      	strb	r3, [r7, #21]
 800a0d4:	e025      	b.n	800a122 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a0d6:	7d7b      	ldrb	r3, [r7, #21]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d107      	bne.n	800a0ec <dir_find+0x120>
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f7ff ff55 	bl	8009f8c <sum_sfn>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	7d3b      	ldrb	r3, [r7, #20]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d027      	beq.n	800a13c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a0f2:	330b      	adds	r3, #11
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <dir_find+0x148>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a104:	220b      	movs	r2, #11
 800a106:	4619      	mov	r1, r3
 800a108:	6938      	ldr	r0, [r7, #16]
 800a10a:	f7fe fcd3 	bl	8008ab4 <mem_cmp>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d015      	beq.n	800a140 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a114:	23ff      	movs	r3, #255	; 0xff
 800a116:	757b      	strb	r3, [r7, #21]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a11e:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a122:	2100      	movs	r1, #0
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fbb3 	bl	8009890 <dir_next>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f43f af63 	beq.w	8009ffc <dir_find+0x30>
 800a136:	e004      	b.n	800a142 <dir_find+0x176>
		if (res != FR_OK) break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a140:	bf00      	nop

	return res;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800a156:	23ff      	movs	r3, #255	; 0xff
 800a158:	757b      	strb	r3, [r7, #21]
 800a15a:	23ff      	movs	r3, #255	; 0xff
 800a15c:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 800a15e:	2304      	movs	r3, #4
 800a160:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800a162:	e07f      	b.n	800a264 <dir_read+0x118>
		res = move_window(dp->fs, dp->sect);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f7fe fedb 	bl	8008f2e <move_window>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d177      	bne.n	800a272 <dir_read+0x126>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a188:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a190:	7dbb      	ldrb	r3, [r7, #22]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <dir_read+0x50>
 800a196:	2304      	movs	r3, #4
 800a198:	75fb      	strb	r3, [r7, #23]
 800a19a:	e06f      	b.n	800a27c <dir_read+0x130>
		a = dir[DIR_Attr] & AM_MASK;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	330b      	adds	r3, #11
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1a6:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a1a8:	7dbb      	ldrb	r3, [r7, #22]
 800a1aa:	2be5      	cmp	r3, #229	; 0xe5
 800a1ac:	d00b      	beq.n	800a1c6 <dir_read+0x7a>
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	f023 0320 	bic.w	r3, r3, #32
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	bf0c      	ite	eq
 800a1b8:	2301      	moveq	r3, #1
 800a1ba:	2300      	movne	r3, #0
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	461a      	mov	r2, r3
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d002      	beq.n	800a1cc <dir_read+0x80>
			ord = 0xFF;
 800a1c6:	23ff      	movs	r3, #255	; 0xff
 800a1c8:	757b      	strb	r3, [r7, #21]
 800a1ca:	e042      	b.n	800a252 <dir_read+0x106>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d12e      	bne.n	800a230 <dir_read+0xe4>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
 800a1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00e      	beq.n	800a1fa <dir_read+0xae>
					sum = dir[LDIR_Chksum];
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	7b5b      	ldrb	r3, [r3, #13]
 800a1e0:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800a1e2:	7dbb      	ldrb	r3, [r7, #22]
 800a1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e8:	75bb      	strb	r3, [r7, #22]
 800a1ea:	7dbb      	ldrb	r3, [r7, #22]
 800a1ec:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a1fa:	7dba      	ldrb	r2, [r7, #22]
 800a1fc:	7d7b      	ldrb	r3, [r7, #21]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d113      	bne.n	800a22a <dir_read+0xde>
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	330d      	adds	r3, #13
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	7d3a      	ldrb	r2, [r7, #20]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d10d      	bne.n	800a22a <dir_read+0xde>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800a214:	6939      	ldr	r1, [r7, #16]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fd3c 	bl	8009c94 <pick_lfn>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <dir_read+0xde>
 800a222:	7d7b      	ldrb	r3, [r7, #21]
 800a224:	3b01      	subs	r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	e000      	b.n	800a22c <dir_read+0xe0>
 800a22a:	23ff      	movs	r3, #255	; 0xff
 800a22c:	757b      	strb	r3, [r7, #21]
 800a22e:	e010      	b.n	800a252 <dir_read+0x106>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 800a230:	7d7b      	ldrb	r3, [r7, #21]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d107      	bne.n	800a246 <dir_read+0xfa>
 800a236:	6938      	ldr	r0, [r7, #16]
 800a238:	f7ff fea8 	bl	8009f8c <sum_sfn>
 800a23c:	4603      	mov	r3, r0
 800a23e:	461a      	mov	r2, r3
 800a240:	7d3b      	ldrb	r3, [r7, #20]
 800a242:	4293      	cmp	r3, r2
 800a244:	d017      	beq.n	800a276 <dir_read+0x12a>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a24c:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
				break;
 800a250:	e011      	b.n	800a276 <dir_read+0x12a>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800a252:	2100      	movs	r1, #0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff fb1b 	bl	8009890 <dir_next>
 800a25a:	4603      	mov	r3, r0
 800a25c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <dir_read+0x12e>
	while (dp->sect) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f47f af7a 	bne.w	800a164 <dir_read+0x18>
 800a270:	e004      	b.n	800a27c <dir_read+0x130>
		if (res != FR_OK) break;
 800a272:	bf00      	nop
 800a274:	e002      	b.n	800a27c <dir_read+0x130>
				break;
 800a276:	bf00      	nop
 800a278:	e000      	b.n	800a27c <dir_read+0x130>
		if (res != FR_OK) break;
 800a27a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <dir_read+0x13e>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810

	return res;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08c      	sub	sp, #48	; 0x30
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a2a2:	623b      	str	r3, [r7, #32]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800a2aa:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	220c      	movs	r2, #12
 800a2b2:	6a39      	ldr	r1, [r7, #32]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe fbc5 	bl	8008a44 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	f003 0320 	and.w	r3, r3, #32
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <dir_register+0x34>
		return FR_INVALID_NAME;
 800a2c4:	2306      	movs	r3, #6
 800a2c6:	e0f3      	b.n	800a4b0 <dir_register+0x21c>

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d037      	beq.n	800a342 <dir_register+0xae>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	330b      	adds	r3, #11
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
		for (n = 1; n < 100; n++) {
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2e6:	e013      	b.n	800a310 <dir_register+0x7c>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800a2e8:	f107 010c 	add.w	r1, r7, #12
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	6a38      	ldr	r0, [r7, #32]
 800a2f2:	f7ff fda7 	bl	8009e44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fe68 	bl	8009fcc <dir_find>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <dir_register+0x84>
		for (n = 1; n < 100; n++) {
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	3301      	adds	r3, #1
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	2b63      	cmp	r3, #99	; 0x63
 800a314:	d9e8      	bls.n	800a2e8 <dir_register+0x54>
 800a316:	e000      	b.n	800a31a <dir_register+0x86>
			if (res != FR_OK) break;
 800a318:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	2b64      	cmp	r3, #100	; 0x64
 800a31e:	d101      	bne.n	800a324 <dir_register+0x90>
 800a320:	2307      	movs	r3, #7
 800a322:	e0c5      	b.n	800a4b0 <dir_register+0x21c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d002      	beq.n	800a332 <dir_register+0x9e>
 800a32c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a330:	e0be      	b.n	800a4b0 <dir_register+0x21c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	330b      	adds	r3, #11
 800a336:	7dfa      	ldrb	r2, [r7, #23]
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800a342:	7dfb      	ldrb	r3, [r7, #23]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d014      	beq.n	800a376 <dir_register+0xe2>
		for (n = 0; lfn[n]; n++) ;
 800a34c:	2300      	movs	r3, #0
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a350:	e002      	b.n	800a358 <dir_register+0xc4>
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	3301      	adds	r3, #1
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	69fa      	ldr	r2, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f5      	bne.n	800a352 <dir_register+0xbe>
		nent = (n + 25) / 13;
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	3319      	adds	r3, #25
 800a36a:	4a53      	ldr	r2, [pc, #332]	; (800a4b8 <dir_register+0x224>)
 800a36c:	fba2 2303 	umull	r2, r3, r2, r3
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
 800a374:	e001      	b.n	800a37a <dir_register+0xe6>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800a376:	2301      	movs	r3, #1
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a37a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fb7e 	bl	8009a7e <dir_alloc>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d153      	bne.n	800a438 <dir_register+0x1a4>
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	3b01      	subs	r3, #1
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d04d      	beq.n	800a438 <dir_register+0x1a4>
		res = dir_sdi(dp, dp->index - nent);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff f9dc 	bl	8009768 <dir_sdi>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d13c      	bne.n	800a438 <dir_register+0x1a4>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fde1 	bl	8009f8c <sum_sfn>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7fe fda6 	bl	8008f2e <move_window>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d122      	bne.n	800a436 <dir_register+0x1a2>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 0820 	ldr.w	r0, [r3, #2080]	; 0x820
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	7efb      	ldrb	r3, [r7, #27]
 800a402:	f7ff fcab 	bl	8009d5c <fit_lfn>
				dp->fs->wflag = 1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
				res = dir_next(dp, 0);	/* Next entry */
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fa3b 	bl	8009890 <dir_next>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a424:	2b00      	cmp	r3, #0
 800a426:	d107      	bne.n	800a438 <dir_register+0x1a4>
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	3b01      	subs	r3, #1
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1cc      	bne.n	800a3ce <dir_register+0x13a>
 800a434:	e000      	b.n	800a438 <dir_register+0x1a4>
				if (res != FR_OK) break;
 800a436:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d135      	bne.n	800a4ac <dir_register+0x218>
		res = move_window(dp->fs, dp->sect);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fe fd6d 	bl	8008f2e <move_window>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a45a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d124      	bne.n	800a4ac <dir_register+0x218>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a468:	2220      	movs	r2, #32
 800a46a:	2100      	movs	r1, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fb07 	bl	8008a80 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 0814 	ldr.w	r0, [r3, #2068]	; 0x814
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a47e:	220b      	movs	r2, #11
 800a480:	4619      	mov	r1, r3
 800a482:	f7fe fadf 	bl	8008a44 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a48c:	330b      	adds	r3, #11
 800a48e:	781a      	ldrb	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a496:	330c      	adds	r3, #12
 800a498:	f002 0218 	and.w	r2, r2, #24
 800a49c:	b2d2      	uxtb	r2, r2
 800a49e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
		}
	}

	return res;
 800a4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3730      	adds	r7, #48	; 0x30
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800a4bc <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	UINT i;

	i = dp->index;	/* SFN index */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800a4ca:	60bb      	str	r3, [r7, #8]
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 800a4d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d003      	beq.n	800a4e2 <dir_remove+0x26>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 800a4e0:	e000      	b.n	800a4e4 <dir_remove+0x28>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff f93e 	bl	8009768 <dir_sdi>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d13a      	bne.n	800a56c <dir_remove+0xb0>
		do {
			res = move_window(dp->fs, dp->sect);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800a502:	4619      	mov	r1, r3
 800a504:	4610      	mov	r0, r2
 800a506:	f7fe fd12 	bl	8008f2e <move_window>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d123      	bne.n	800a55c <dir_remove+0xa0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a51a:	2220      	movs	r2, #32
 800a51c:	2100      	movs	r1, #0
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe faae 	bl	8008a80 <mem_set>
			*dp->dir = DDEM;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a52a:	22e5      	movs	r2, #229	; 0xe5
 800a52c:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 800a540:	461a      	mov	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4293      	cmp	r3, r2
 800a546:	d90b      	bls.n	800a560 <dir_remove+0xa4>
			res = dir_next(dp, 0);		/* Next entry */
 800a548:	2100      	movs	r1, #0
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7ff f9a0 	bl	8009890 <dir_next>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0cd      	beq.n	800a4f6 <dir_remove+0x3a>
 800a55a:	e002      	b.n	800a562 <dir_remove+0xa6>
			if (res != FR_OK) break;
 800a55c:	bf00      	nop
 800a55e:	e000      	b.n	800a562 <dir_remove+0xa6>
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 800a560:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b04      	cmp	r3, #4
 800a566:	d101      	bne.n	800a56c <dir_remove+0xb0>
 800a568:	2302      	movs	r3, #2
 800a56a:	73fb      	strb	r3, [r7, #15]
			dp->fs->wflag = 1;
		}
	}
#endif

	return res;
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	613b      	str	r3, [r7, #16]
 800a588:	e002      	b.n	800a590 <create_name+0x18>
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	3301      	adds	r3, #1
 800a58e:	613b      	str	r3, [r7, #16]
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b2f      	cmp	r3, #47	; 0x2f
 800a596:	d0f8      	beq.n	800a58a <create_name+0x12>
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b5c      	cmp	r3, #92	; 0x5c
 800a59e:	d0f4      	beq.n	800a58a <create_name+0x12>
	lfn = dp->lfn;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800a5a6:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	61ba      	str	r2, [r7, #24]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c0:	2b1f      	cmp	r3, #31
 800a5c2:	d961      	bls.n	800a688 <create_name+0x110>
 800a5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c6:	2b2f      	cmp	r3, #47	; 0x2f
 800a5c8:	d05e      	beq.n	800a688 <create_name+0x110>
 800a5ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5cc:	2b5c      	cmp	r3, #92	; 0x5c
 800a5ce:	d05b      	beq.n	800a688 <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2bfe      	cmp	r3, #254	; 0xfe
 800a5d4:	d901      	bls.n	800a5da <create_name+0x62>
			return FR_INVALID_NAME;
 800a5d6:	2306      	movs	r3, #6
 800a5d8:	e217      	b.n	800aa0a <create_name+0x492>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800a5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b80      	cmp	r3, #128	; 0x80
 800a5e6:	d92d      	bls.n	800a644 <create_name+0xcc>
 800a5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2bff      	cmp	r3, #255	; 0xff
 800a5ee:	d029      	beq.n	800a644 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	61ba      	str	r2, [r7, #24]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800a600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	b29a      	uxth	r2, r3
 800a606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	4413      	add	r3, r2
 800a60e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 800a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d903      	bls.n	800a620 <create_name+0xa8>
 800a618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a61c:	2b5a      	cmp	r3, #90	; 0x5a
 800a61e:	d911      	bls.n	800a644 <create_name+0xcc>
 800a620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a624:	2b60      	cmp	r3, #96	; 0x60
 800a626:	d903      	bls.n	800a630 <create_name+0xb8>
 800a628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62c:	2b7a      	cmp	r3, #122	; 0x7a
 800a62e:	d909      	bls.n	800a644 <create_name+0xcc>
 800a630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a634:	2b80      	cmp	r3, #128	; 0x80
 800a636:	d903      	bls.n	800a640 <create_name+0xc8>
 800a638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a63c:	2bff      	cmp	r3, #255	; 0xff
 800a63e:	d101      	bne.n	800a644 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 800a640:	2306      	movs	r3, #6
 800a642:	e1e2      	b.n	800aa0a <create_name+0x492>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a646:	2101      	movs	r1, #1
 800a648:	4618      	mov	r0, r3
 800a64a:	f002 fca7 	bl	800cf9c <ff_convert>
 800a64e:	4603      	mov	r3, r0
 800a650:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <create_name+0xe4>
 800a658:	2306      	movs	r3, #6
 800a65a:	e1d6      	b.n	800aa0a <create_name+0x492>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a65e:	2b7f      	cmp	r3, #127	; 0x7f
 800a660:	d809      	bhi.n	800a676 <create_name+0xfe>
 800a662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a664:	4619      	mov	r1, r3
 800a666:	48a3      	ldr	r0, [pc, #652]	; (800a8f4 <create_name+0x37c>)
 800a668:	f7fe fa4a 	bl	8008b00 <chk_chr>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <create_name+0xfe>
			return FR_INVALID_NAME;
 800a672:	2306      	movs	r3, #6
 800a674:	e1c9      	b.n	800aa0a <create_name+0x492>
		lfn[di++] = w;					/* Store the Unicode character */
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	617a      	str	r2, [r7, #20]
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a684:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a686:	e793      	b.n	800a5b0 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	441a      	add	r2, r3
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a694:	2b1f      	cmp	r3, #31
 800a696:	d801      	bhi.n	800a69c <create_name+0x124>
 800a698:	2304      	movs	r3, #4
 800a69a:	e000      	b.n	800a69e <create_name+0x126>
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if _FS_RPATH
	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d109      	bne.n	800a6bc <create_name+0x144>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ba:	d016      	beq.n	800a6ea <create_name+0x172>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d14f      	bne.n	800a762 <create_name+0x1ea>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d4:	d145      	bne.n	800a762 <create_name+0x1ea>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6dc:	3b02      	subs	r3, #2
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e8:	d13b      	bne.n	800a762 <create_name+0x1ea>
		lfn[di] = 0;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	623b      	str	r3, [r7, #32]
 800a6fa:	e010      	b.n	800a71e <create_name+0x1a6>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800a6fc:	6a3a      	ldr	r2, [r7, #32]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	429a      	cmp	r2, r3
 800a702:	d201      	bcs.n	800a708 <create_name+0x190>
 800a704:	212e      	movs	r1, #46	; 0x2e
 800a706:	e000      	b.n	800a70a <create_name+0x192>
 800a708:	2120      	movs	r1, #32
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	4413      	add	r3, r2
 800a714:	460a      	mov	r2, r1
 800a716:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	3301      	adds	r3, #1
 800a71c:	623b      	str	r3, [r7, #32]
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2b0a      	cmp	r3, #10
 800a722:	d9eb      	bls.n	800a6fc <create_name+0x184>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	4413      	add	r3, r2
 800a72e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a732:	f042 0220 	orr.w	r2, r2, #32
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e165      	b.n	800aa0a <create_name+0x492>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di - 1];
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a744:	3b01      	subs	r3, #1
 800a746:	005b      	lsls	r3, r3, #1
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a752:	2b20      	cmp	r3, #32
 800a754:	d002      	beq.n	800a75c <create_name+0x1e4>
 800a756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a758:	2b2e      	cmp	r3, #46	; 0x2e
 800a75a:	d106      	bne.n	800a76a <create_name+0x1f2>
		di--;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	3b01      	subs	r3, #1
 800a760:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1ea      	bne.n	800a73e <create_name+0x1c6>
 800a768:	e000      	b.n	800a76c <create_name+0x1f4>
		if (w != ' ' && w != '.') break;
 800a76a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <create_name+0x1fe>
 800a772:	2306      	movs	r3, #6
 800a774:	e149      	b.n	800aa0a <create_name+0x492>

	lfn[di] = 0;						/* LFN is created */
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	2200      	movs	r2, #0
 800a780:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a788:	220b      	movs	r2, #11
 800a78a:	2120      	movs	r1, #32
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe f977 	bl	8008a80 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	e002      	b.n	800a79e <create_name+0x226>
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	3301      	adds	r3, #1
 800a79c:	61bb      	str	r3, [r7, #24]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	2b20      	cmp	r3, #32
 800a7aa:	d0f5      	beq.n	800a798 <create_name+0x220>
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7b8:	d0ee      	beq.n	800a798 <create_name+0x220>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <create_name+0x25c>
 800a7c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7c4:	f043 0303 	orr.w	r3, r3, #3
 800a7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a7cc:	e002      	b.n	800a7d4 <create_name+0x25c>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d009      	beq.n	800a7ee <create_name+0x276>
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ec:	d1ef      	bne.n	800a7ce <create_name+0x256>

	b = i = 0; ni = 8;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	623b      	str	r3, [r7, #32]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	61ba      	str	r2, [r7, #24]
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80ad 	beq.w	800a96e <create_name+0x3f6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a816:	2b20      	cmp	r3, #32
 800a818:	d006      	beq.n	800a828 <create_name+0x2b0>
 800a81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a81c:	2b2e      	cmp	r3, #46	; 0x2e
 800a81e:	d10a      	bne.n	800a836 <create_name+0x2be>
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	429a      	cmp	r2, r3
 800a826:	d006      	beq.n	800a836 <create_name+0x2be>
			cf |= NS_LOSS | NS_LFN; continue;
 800a828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a82c:	f043 0303 	orr.w	r3, r3, #3
 800a830:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a834:	e09a      	b.n	800a96c <create_name+0x3f4>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a836:	6a3a      	ldr	r2, [r7, #32]
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d203      	bcs.n	800a846 <create_name+0x2ce>
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	429a      	cmp	r2, r3
 800a844:	d123      	bne.n	800a88e <create_name+0x316>
			if (ni == 11) {				/* Long extension */
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	2b0b      	cmp	r3, #11
 800a84a:	d106      	bne.n	800a85a <create_name+0x2e2>
				cf |= NS_LOSS | NS_LFN; break;
 800a84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a850:	f043 0303 	orr.w	r3, r3, #3
 800a854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a858:	e08c      	b.n	800a974 <create_name+0x3fc>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d005      	beq.n	800a86e <create_name+0x2f6>
 800a862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a866:	f043 0303 	orr.w	r3, r3, #3
 800a86a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	429a      	cmp	r2, r3
 800a874:	d87d      	bhi.n	800a972 <create_name+0x3fa>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	2308      	movs	r3, #8
 800a87c:	623b      	str	r3, [r7, #32]
 800a87e:	230b      	movs	r3, #11
 800a880:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a88c:	e06e      	b.n	800a96c <create_name+0x3f4>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a890:	2b7f      	cmp	r3, #127	; 0x7f
 800a892:	d910      	bls.n	800a8b6 <create_name+0x33e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800a894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a896:	4618      	mov	r0, r3
 800a898:	f002 fbdc 	bl	800d054 <ff_wtoupper>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f002 fb7b 	bl	800cf9c <ff_convert>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a8aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8ae:	f043 0302 	orr.w	r3, r3, #2
 800a8b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 800a8b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b8:	2bff      	cmp	r3, #255	; 0xff
 800a8ba:	d91d      	bls.n	800a8f8 <create_name+0x380>
			if (i >= ni - 1) {
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	6a3a      	ldr	r2, [r7, #32]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d308      	bcc.n	800a8d8 <create_name+0x360>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800a8c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8ca:	f043 0303 	orr.w	r3, r3, #3
 800a8ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	e049      	b.n	800a96c <create_name+0x3f4>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800a8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8da:	0a1b      	lsrs	r3, r3, #8
 800a8dc:	b298      	uxth	r0, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	6239      	str	r1, [r7, #32]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	b2c2      	uxtb	r2, r0
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e032      	b.n	800a958 <create_name+0x3e0>
 800a8f2:	bf00      	nop
 800a8f4:	0801274c 	.word	0x0801274c
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <create_name+0x396>
 800a8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a900:	4619      	mov	r1, r3
 800a902:	4844      	ldr	r0, [pc, #272]	; (800aa14 <create_name+0x49c>)
 800a904:	f7fe f8fc 	bl	8008b00 <chk_chr>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d008      	beq.n	800a920 <create_name+0x3a8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a90e:	235f      	movs	r3, #95	; 0x5f
 800a910:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a912:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a916:	f043 0303 	orr.w	r3, r3, #3
 800a91a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a91e:	e01b      	b.n	800a958 <create_name+0x3e0>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a922:	2b40      	cmp	r3, #64	; 0x40
 800a924:	d909      	bls.n	800a93a <create_name+0x3c2>
 800a926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a928:	2b5a      	cmp	r3, #90	; 0x5a
 800a92a:	d806      	bhi.n	800a93a <create_name+0x3c2>
					b |= 2;
 800a92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a938:	e00e      	b.n	800a958 <create_name+0x3e0>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a93a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a93c:	2b60      	cmp	r3, #96	; 0x60
 800a93e:	d90b      	bls.n	800a958 <create_name+0x3e0>
 800a940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a942:	2b7a      	cmp	r3, #122	; 0x7a
 800a944:	d808      	bhi.n	800a958 <create_name+0x3e0>
						b |= 1; w -= 0x20;
 800a946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a954:	3b20      	subs	r3, #32
 800a956:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	1c59      	adds	r1, r3, #1
 800a962:	6239      	str	r1, [r7, #32]
 800a964:	4413      	add	r3, r2
 800a966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800a96c:	e746      	b.n	800a7fc <create_name+0x284>
		if (!w) break;					/* Break on end of the LFN */
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <create_name+0x3fc>
			if (si > di) break;			/* No extension */
 800a972:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2be5      	cmp	r3, #229	; 0xe5
 800a97e:	d104      	bne.n	800a98a <create_name+0x412>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800a986:	2205      	movs	r2, #5
 800a988:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d104      	bne.n	800a99a <create_name+0x422>
 800a990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a99e:	f003 030c 	and.w	r3, r3, #12
 800a9a2:	2b0c      	cmp	r3, #12
 800a9a4:	d005      	beq.n	800a9b2 <create_name+0x43a>
 800a9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d105      	bne.n	800a9be <create_name+0x446>
		cf |= NS_LFN;
 800a9b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9b6:	f043 0302 	orr.w	r3, r3, #2
 800a9ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a9be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d117      	bne.n	800a9fa <create_name+0x482>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d105      	bne.n	800a9e2 <create_name+0x46a>
 800a9d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9da:	f043 0310 	orr.w	r3, r3, #16
 800a9de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e6:	f003 030c 	and.w	r3, r3, #12
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d105      	bne.n	800a9fa <create_name+0x482>
 800a9ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9f2:	f043 0308 	orr.w	r3, r3, #8
 800a9f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800aa00:	330b      	adds	r3, #11
 800aa02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aa06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa08:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3728      	adds	r7, #40	; 0x28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	08012758 	.word	0x08012758

0800aa18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b2f      	cmp	r3, #47	; 0x2f
 800aa28:	d003      	beq.n	800aa32 <follow_path+0x1a>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b5c      	cmp	r3, #92	; 0x5c
 800aa30:	d107      	bne.n	800aa42 <follow_path+0x2a>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800aa40:	e007      	b.n	800aa52 <follow_path+0x3a>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800aa48:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b1f      	cmp	r3, #31
 800aa58:	d80a      	bhi.n	800aa70 <follow_path+0x58>
		res = dir_sdi(dp, 0);
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7fe fe83 	bl	8009768 <dir_sdi>
 800aa62:	4603      	mov	r3, r0
 800aa64:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 800aa6e:	e05c      	b.n	800ab2a <follow_path+0x112>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa70:	463b      	mov	r3, r7
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff fd7f 	bl	800a578 <create_name>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d14d      	bne.n	800ab20 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7ff faa1 	bl	8009fcc <dir_find>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800aa94:	7adb      	ldrb	r3, [r3, #11]
 800aa96:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01f      	beq.n	800aade <follow_path+0xc6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d13f      	bne.n	800ab24 <follow_path+0x10c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00f      	beq.n	800aace <follow_path+0xb6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d029      	beq.n	800ab1c <follow_path+0x104>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 800aac8:	2300      	movs	r3, #0
 800aaca:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800aacc:	e02a      	b.n	800ab24 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d125      	bne.n	800ab24 <follow_path+0x10c>
 800aad8:	2305      	movs	r3, #5
 800aada:	73fb      	strb	r3, [r7, #15]
				break;
 800aadc:	e022      	b.n	800ab24 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	f003 0304 	and.w	r3, r3, #4
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d11f      	bne.n	800ab28 <follow_path+0x110>
			dir = dp->dir;						/* Follow the sub-directory */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800aaee:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	330b      	adds	r3, #11
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	f003 0310 	and.w	r3, r3, #16
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <follow_path+0xec>
				res = FR_NO_PATH; break;
 800aafe:	2305      	movs	r3, #5
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	e012      	b.n	800ab2a <follow_path+0x112>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff f800 	bl	8009b12 <ld_clust>
 800ab12:	4602      	mov	r2, r0
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800ab1a:	e7a9      	b.n	800aa70 <follow_path+0x58>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ab1c:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab1e:	e7a7      	b.n	800aa70 <follow_path+0x58>
			if (res != FR_OK) break;
 800ab20:	bf00      	nop
 800ab22:	e002      	b.n	800ab2a <follow_path+0x112>
				break;
 800ab24:	bf00      	nop
 800ab26:	e000      	b.n	800ab2a <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab28:	bf00      	nop
		}
	}

	return res;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b087      	sub	sp, #28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab40:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d031      	beq.n	800abae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e002      	b.n	800ab58 <get_ldnumber+0x24>
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	3301      	adds	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b1f      	cmp	r3, #31
 800ab5e:	d903      	bls.n	800ab68 <get_ldnumber+0x34>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b3a      	cmp	r3, #58	; 0x3a
 800ab66:	d1f4      	bne.n	800ab52 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b3a      	cmp	r3, #58	; 0x3a
 800ab6e:	d11c      	bne.n	800abaa <get_ldnumber+0x76>
			tp = *path;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	60fa      	str	r2, [r7, #12]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	3b30      	subs	r3, #48	; 0x30
 800ab80:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2b09      	cmp	r3, #9
 800ab86:	d80e      	bhi.n	800aba6 <get_ldnumber+0x72>
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d10a      	bne.n	800aba6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d107      	bne.n	800aba6 <get_ldnumber+0x72>
					vol = (int)i;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	e002      	b.n	800abb0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800abaa:	2300      	movs	r3, #0
 800abac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800abae:	693b      	ldr	r3, [r7, #16]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	371c      	adds	r7, #28
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bc80      	pop	{r7}
 800abb8:	4770      	bx	lr
	...

0800abbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295
 800abd4:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7fe f9a7 	bl	8008f2e <move_window>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <check_fs+0x2e>
		return 3;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e04a      	b.n	800ac80 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800abf0:	3301      	adds	r3, #1
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	021b      	lsls	r3, r3, #8
 800abf6:	b21a      	sxth	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	4313      	orrs	r3, r2
 800ac02:	b21b      	sxth	r3, r3
 800ac04:	4a20      	ldr	r2, [pc, #128]	; (800ac88 <check_fs+0xcc>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d001      	beq.n	800ac0e <check_fs+0x52>
		return 2;
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	e038      	b.n	800ac80 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3336      	adds	r3, #54	; 0x36
 800ac12:	3303      	adds	r3, #3
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	061a      	lsls	r2, r3, #24
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3336      	adds	r3, #54	; 0x36
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	041b      	lsls	r3, r3, #16
 800ac22:	4313      	orrs	r3, r2
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	3236      	adds	r2, #54	; 0x36
 800ac28:	3201      	adds	r2, #1
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	0212      	lsls	r2, r2, #8
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ac36:	4313      	orrs	r3, r2
 800ac38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac3c:	4a13      	ldr	r2, [pc, #76]	; (800ac8c <check_fs+0xd0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d101      	bne.n	800ac46 <check_fs+0x8a>
		return 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e01c      	b.n	800ac80 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3352      	adds	r3, #82	; 0x52
 800ac4a:	3303      	adds	r3, #3
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	061a      	lsls	r2, r3, #24
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3352      	adds	r3, #82	; 0x52
 800ac54:	3302      	adds	r3, #2
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	041b      	lsls	r3, r3, #16
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	3252      	adds	r2, #82	; 0x52
 800ac60:	3201      	adds	r2, #1
 800ac62:	7812      	ldrb	r2, [r2, #0]
 800ac64:	0212      	lsls	r2, r2, #8
 800ac66:	4313      	orrs	r3, r2
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac74:	4a05      	ldr	r2, [pc, #20]	; (800ac8c <check_fs+0xd0>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d101      	bne.n	800ac7e <check_fs+0xc2>
		return 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e000      	b.n	800ac80 <check_fs+0xc4>

	return 1;
 800ac7e:	2301      	movs	r3, #1
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	ffffaa55 	.word	0xffffaa55
 800ac8c:	00544146 	.word	0x00544146

0800ac90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b096      	sub	sp, #88	; 0x58
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aca4:	68b8      	ldr	r0, [r7, #8]
 800aca6:	f7ff ff45 	bl	800ab34 <get_ldnumber>
 800acaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da01      	bge.n	800acb6 <find_volume+0x26>
 800acb2:	230b      	movs	r3, #11
 800acb4:	e2ac      	b.n	800b210 <find_volume+0x580>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acb6:	4a9d      	ldr	r2, [pc, #628]	; (800af2c <find_volume+0x29c>)
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <find_volume+0x3a>
 800acc6:	230c      	movs	r3, #12
 800acc8:	e2a2      	b.n	800b210 <find_volume+0x580>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acce:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01b      	beq.n	800ad12 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fd fe11 	bl	8008908 <disk_status>
 800ace6:	4603      	mov	r3, r0
 800ace8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10c      	bne.n	800ad12 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d007      	beq.n	800ad0e <find_volume+0x7e>
 800acfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	e280      	b.n	800b210 <find_volume+0x580>
			return FR_OK;				/* The file system object is valid */
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e27e      	b.n	800b210 <find_volume+0x580>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fd fe06 	bl	800893c <disk_initialize>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ad36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad42:	2303      	movs	r3, #3
 800ad44:	e264      	b.n	800b210 <find_volume+0x580>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d007      	beq.n	800ad5c <find_volume+0xcc>
 800ad4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800ad58:	230a      	movs	r3, #10
 800ad5a:	e259      	b.n	800b210 <find_volume+0x580>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ad60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad64:	f7ff ff2a 	bl	800abbc <check_fs>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ad6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d153      	bne.n	800ae1e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ad76:	2300      	movs	r3, #0
 800ad78:	643b      	str	r3, [r7, #64]	; 0x40
 800ad7a:	e028      	b.n	800adce <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ad7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad80:	011b      	lsls	r3, r3, #4
 800ad82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ad86:	4413      	add	r3, r2
 800ad88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d012      	beq.n	800adba <find_volume+0x12a>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	330b      	adds	r3, #11
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	061a      	lsls	r2, r3, #24
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	330a      	adds	r3, #10
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	4313      	orrs	r3, r2
 800ada6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada8:	3209      	adds	r2, #9
 800adaa:	7812      	ldrb	r2, [r2, #0]
 800adac:	0212      	lsls	r2, r2, #8
 800adae:	4313      	orrs	r3, r2
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	3208      	adds	r2, #8
 800adb4:	7812      	ldrb	r2, [r2, #0]
 800adb6:	431a      	orrs	r2, r3
 800adb8:	e000      	b.n	800adbc <find_volume+0x12c>
 800adba:	2200      	movs	r2, #0
 800adbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	3358      	adds	r3, #88	; 0x58
 800adc2:	443b      	add	r3, r7
 800adc4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800adc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adca:	3301      	adds	r3, #1
 800adcc:	643b      	str	r3, [r7, #64]	; 0x40
 800adce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add0:	2b03      	cmp	r3, #3
 800add2:	d9d3      	bls.n	800ad7c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800add4:	2300      	movs	r3, #0
 800add6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800add8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <find_volume+0x154>
 800adde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade0:	3b01      	subs	r3, #1
 800ade2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	3358      	adds	r3, #88	; 0x58
 800adea:	443b      	add	r3, r7
 800adec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800adf0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800adf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <find_volume+0x174>
 800adf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adfc:	f7ff fede 	bl	800abbc <check_fs>
 800ae00:	4603      	mov	r3, r0
 800ae02:	e000      	b.n	800ae06 <find_volume+0x176>
 800ae04:	2302      	movs	r3, #2
 800ae06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800ae0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d005      	beq.n	800ae1e <find_volume+0x18e>
 800ae12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae14:	3301      	adds	r3, #1
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d9e2      	bls.n	800ade4 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d101      	bne.n	800ae2a <find_volume+0x19a>
 800ae26:	2301      	movs	r3, #1
 800ae28:	e1f2      	b.n	800b210 <find_volume+0x580>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ae2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <find_volume+0x1a6>
 800ae32:	230d      	movs	r3, #13
 800ae34:	e1ec      	b.n	800b210 <find_volume+0x580>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	7b1b      	ldrb	r3, [r3, #12]
 800ae3a:	021b      	lsls	r3, r3, #8
 800ae3c:	b21a      	sxth	r2, r3
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	7adb      	ldrb	r3, [r3, #11]
 800ae42:	b21b      	sxth	r3, r3
 800ae44:	4313      	orrs	r3, r2
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae4c:	d001      	beq.n	800ae52 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800ae4e:	230d      	movs	r3, #13
 800ae50:	e1de      	b.n	800b210 <find_volume+0x580>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	7ddb      	ldrb	r3, [r3, #23]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	b21a      	sxth	r2, r3
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	7d9b      	ldrb	r3, [r3, #22]
 800ae5e:	b21b      	sxth	r3, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	b21b      	sxth	r3, r3
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ae68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d112      	bne.n	800ae94 <find_volume+0x204>
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae74:	061a      	lsls	r2, r3, #24
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae82:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ae86:	0212      	lsls	r2, r2, #8
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae8c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ae90:	4313      	orrs	r3, r2
 800ae92:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae98:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9e:	7c1a      	ldrb	r2, [r3, #16]
 800aea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea2:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d006      	beq.n	800aebe <find_volume+0x22e>
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d001      	beq.n	800aebe <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800aeba:	230d      	movs	r3, #13
 800aebc:	e1a8      	b.n	800b210 <find_volume+0x580>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 800aec4:	461a      	mov	r2, r3
 800aec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec8:	fb02 f303 	mul.w	r3, r2, r3
 800aecc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	7b5a      	ldrb	r2, [r3, #13]
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <find_volume+0x268>
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800aee8:	461a      	mov	r2, r3
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800aef0:	3b01      	subs	r3, #1
 800aef2:	4013      	ands	r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800aef8:	230d      	movs	r3, #13
 800aefa:	e189      	b.n	800b210 <find_volume+0x580>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	7c9b      	ldrb	r3, [r3, #18]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	b21a      	sxth	r2, r3
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	7c5b      	ldrb	r3, [r3, #17]
 800af08:	b21b      	sxth	r3, r3
 800af0a:	4313      	orrs	r3, r2
 800af0c:	b21b      	sxth	r3, r3
 800af0e:	b29a      	uxth	r2, r3
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800af1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800af26:	230d      	movs	r3, #13
 800af28:	e172      	b.n	800b210 <find_volume+0x580>
 800af2a:	bf00      	nop
 800af2c:	200045a0 	.word	0x200045a0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	7d1b      	ldrb	r3, [r3, #20]
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	b21a      	sxth	r2, r3
 800af38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3a:	7cdb      	ldrb	r3, [r3, #19]
 800af3c:	b21b      	sxth	r3, r3
 800af3e:	4313      	orrs	r3, r2
 800af40:	b21b      	sxth	r3, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800af46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d112      	bne.n	800af72 <find_volume+0x2e2>
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800af52:	061a      	lsls	r2, r3, #24
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	4313      	orrs	r3, r2
 800af5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af60:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800af64:	0212      	lsls	r2, r2, #8
 800af66:	4313      	orrs	r3, r2
 800af68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800af6e:	4313      	orrs	r3, r2
 800af70:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800af72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af74:	7bdb      	ldrb	r3, [r3, #15]
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	b21a      	sxth	r2, r3
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	7b9b      	ldrb	r3, [r3, #14]
 800af7e:	b21b      	sxth	r3, r3
 800af80:	4313      	orrs	r3, r2
 800af82:	b21b      	sxth	r3, r3
 800af84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800af86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <find_volume+0x300>
 800af8c:	230d      	movs	r3, #13
 800af8e:	e13f      	b.n	800b210 <find_volume+0x580>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800af90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af94:	4413      	add	r3, r2
 800af96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af98:	f8b2 2808 	ldrh.w	r2, [r2, #2056]	; 0x808
 800af9c:	0992      	lsrs	r2, r2, #6
 800af9e:	b292      	uxth	r2, r2
 800afa0:	4413      	add	r3, r2
 800afa2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800afa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d201      	bcs.n	800afb0 <find_volume+0x320>
 800afac:	230d      	movs	r3, #13
 800afae:	e12f      	b.n	800b210 <find_volume+0x580>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800afb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb8:	f892 2802 	ldrb.w	r2, [r2, #2050]	; 0x802
 800afbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <find_volume+0x33c>
 800afc8:	230d      	movs	r3, #13
 800afca:	e121      	b.n	800b210 <find_volume+0x580>
	fmt = FS_FAT12;
 800afcc:	2301      	movs	r3, #1
 800afce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afd8:	4293      	cmp	r3, r2
 800afda:	d902      	bls.n	800afe2 <find_volume+0x352>
 800afdc:	2302      	movs	r3, #2
 800afde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afe8:	4293      	cmp	r3, r2
 800afea:	d902      	bls.n	800aff2 <find_volume+0x362>
 800afec:	2303      	movs	r3, #3
 800afee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	1c9a      	adds	r2, r3, #2
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
	fs->volbase = bsect;								/* Volume start sector */
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b000:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b008:	441a      	add	r2, r3
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
	fs->database = bsect + sysect;						/* Data start sector */
 800b010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	441a      	add	r2, r3
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
	if (fmt == FS_FAT32) {
 800b01c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b020:	2b03      	cmp	r3, #3
 800b022:	d121      	bne.n	800b068 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <find_volume+0x3a2>
 800b02e:	230d      	movs	r3, #13
 800b030:	e0ee      	b.n	800b210 <find_volume+0x580>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b038:	061a      	lsls	r2, r3, #24
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b040:	041b      	lsls	r3, r3, #16
 800b042:	4313      	orrs	r3, r2
 800b044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b046:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b04a:	0212      	lsls	r2, r2, #8
 800b04c:	4313      	orrs	r3, r2
 800b04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b050:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b054:	431a      	orrs	r2, r3
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	647b      	str	r3, [r7, #68]	; 0x44
 800b066:	e025      	b.n	800b0b4 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <find_volume+0x3e6>
 800b072:	230d      	movs	r3, #13
 800b074:	e0cc      	b.n	800b210 <find_volume+0x580>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	f8d3 2824 	ldr.w	r2, [r3, #2084]	; 0x824
 800b07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b07e:	441a      	add	r2, r3
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d104      	bne.n	800b098 <find_volume+0x408>
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	e00c      	b.n	800b0b2 <find_volume+0x422>
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b09e:	4613      	mov	r3, r2
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	4413      	add	r3, r2
 800b0a4:	085a      	lsrs	r2, r3, #1
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b0b2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800b0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0bc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b0c0:	0adb      	lsrs	r3, r3, #11
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d201      	bcs.n	800b0ca <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800b0c6:	230d      	movs	r3, #13
 800b0c8:	e0a2      	b.n	800b210 <find_volume+0x580>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	2280      	movs	r2, #128	; 0x80
 800b0e4:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d177      	bne.n	800b1e0 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	b21a      	sxth	r2, r3
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b100:	b21b      	sxth	r3, r3
 800b102:	4313      	orrs	r3, r2
 800b104:	b21b      	sxth	r3, r3
 800b106:	2b01      	cmp	r3, #1
 800b108:	d16a      	bne.n	800b1e0 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b10c:	3301      	adds	r3, #1
 800b10e:	4619      	mov	r1, r3
 800b110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b112:	f7fd ff0c 	bl	8008f2e <move_window>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d161      	bne.n	800b1e0 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2805 	strb.w	r2, [r3, #2053]	; 0x805
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	b21a      	sxth	r2, r3
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b134:	b21b      	sxth	r3, r3
 800b136:	4313      	orrs	r3, r2
 800b138:	b21b      	sxth	r3, r3
 800b13a:	4a37      	ldr	r2, [pc, #220]	; (800b218 <find_volume+0x588>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d14f      	bne.n	800b1e0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	78db      	ldrb	r3, [r3, #3]
 800b144:	061a      	lsls	r2, r3, #24
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	789b      	ldrb	r3, [r3, #2]
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	4313      	orrs	r3, r2
 800b14e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b150:	7852      	ldrb	r2, [r2, #1]
 800b152:	0212      	lsls	r2, r2, #8
 800b154:	4313      	orrs	r3, r2
 800b156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	4a2f      	ldr	r2, [pc, #188]	; (800b21c <find_volume+0x58c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d13e      	bne.n	800b1e0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b168:	061a      	lsls	r2, r3, #24
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b170:	041b      	lsls	r3, r3, #16
 800b172:	4313      	orrs	r3, r2
 800b174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b176:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b17a:	0212      	lsls	r2, r2, #8
 800b17c:	4313      	orrs	r3, r2
 800b17e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b180:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b184:	4313      	orrs	r3, r2
 800b186:	4a26      	ldr	r2, [pc, #152]	; (800b220 <find_volume+0x590>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d129      	bne.n	800b1e0 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b192:	061a      	lsls	r2, r3, #24
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b19a:	041b      	lsls	r3, r3, #16
 800b19c:	4313      	orrs	r3, r2
 800b19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b1a4:	0212      	lsls	r2, r2, #8
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b1bc:	061a      	lsls	r2, r3, #24
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b1c4:	041b      	lsls	r3, r3, #16
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b1ce:	0212      	lsls	r2, r2, #8
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b1e6:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	fs->id = ++Fsid;	/* File system mount ID */
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <find_volume+0x594>)
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	4b0c      	ldr	r3, [pc, #48]	; (800b224 <find_volume+0x594>)
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <find_volume+0x594>)
 800b1f8:	881a      	ldrh	r2, [r3, #0]
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b20a:	f7fd fe1d 	bl	8008e48 <clear_lock>
#endif

	return FR_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3758      	adds	r7, #88	; 0x58
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	ffffaa55 	.word	0xffffaa55
 800b21c:	41615252 	.word	0x41615252
 800b220:	61417272 	.word	0x61417272
 800b224:	200045a4 	.word	0x200045a4

0800b228 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d022      	beq.n	800b280 <validate+0x58>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b240:	2b00      	cmp	r3, #0
 800b242:	d01d      	beq.n	800b280 <validate+0x58>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b24a:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d016      	beq.n	800b280 <validate+0x58>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b258:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 800b262:	429a      	cmp	r2, r3
 800b264:	d10c      	bne.n	800b280 <validate+0x58>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b26c:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 800b270:	4618      	mov	r0, r3
 800b272:	f7fd fb49 	bl	8008908 <disk_status>
 800b276:	4603      	mov	r3, r0
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b280:	2309      	movs	r3, #9
 800b282:	e000      	b.n	800b286 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b2a2:	f107 0310 	add.w	r3, r7, #16
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff fc44 	bl	800ab34 <get_ldnumber>
 800b2ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	da01      	bge.n	800b2b8 <f_mount+0x28>
 800b2b4:	230b      	movs	r3, #11
 800b2b6:	e02d      	b.n	800b314 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b2b8:	4a18      	ldr	r2, [pc, #96]	; (800b31c <f_mount+0x8c>)
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d006      	beq.n	800b2d6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b2c8:	69b8      	ldr	r0, [r7, #24]
 800b2ca:	f7fd fdbd 	bl	8008e48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	}

	if (fs) {
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	490d      	ldr	r1, [pc, #52]	; (800b31c <f_mount+0x8c>)
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <f_mount+0x6a>
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d001      	beq.n	800b2fe <f_mount+0x6e>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e00a      	b.n	800b314 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b2fe:	f107 0108 	add.w	r1, r7, #8
 800b302:	f107 030c 	add.w	r3, r7, #12
 800b306:	2200      	movs	r2, #0
 800b308:	4618      	mov	r0, r3
 800b30a:	f7ff fcc1 	bl	800ac90 <find_volume>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b312:	7dfb      	ldrb	r3, [r7, #23]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	200045a0 	.word	0x200045a0

0800b320 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b326:	af00      	add	r7, sp, #0
 800b328:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b32c:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b330:	6018      	str	r0, [r3, #0]
 800b332:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b336:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b33a:	6019      	str	r1, [r3, #0]
 800b33c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b340:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b344:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b346:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b34a:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <f_open+0x38>
 800b354:	2309      	movs	r3, #9
 800b356:	e25f      	b.n	800b818 <f_open+0x4f8>
	fp->fs = 0;			/* Clear file object */
 800b358:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b35c:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b368:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b36c:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b370:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b374:	f6a2 2251 	subw	r2, r2, #2641	; 0xa51
 800b378:	7812      	ldrb	r2, [r2, #0]
 800b37a:	f002 021f 	and.w	r2, r2, #31
 800b37e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b380:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b384:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f023 0301 	bic.w	r3, r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff fc77 	bl	800ac90 <find_volume>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b3a8:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 8231 	bne.w	800b814 <f_open+0x4f4>
		INIT_BUF(dj);
 800b3b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3b6:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b3ba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800b3be:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 800b3c2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3c6:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b3ca:	f107 0210 	add.w	r2, r7, #16
 800b3ce:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
		res = follow_path(&dj, path);	/* Follow the file path */
 800b3d2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3d6:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff fb18 	bl	800aa18 <follow_path>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
		dir = dj.dir;
 800b3ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3f2:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b3f6:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800b3fa:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b3fe:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b402:	2b00      	cmp	r3, #0
 800b404:	d11d      	bne.n	800b442 <f_open+0x122>
			if (!dir)	/* Default directory itself */
 800b406:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d103      	bne.n	800b416 <f_open+0xf6>
				res = FR_INVALID_NAME;
 800b40e:	2306      	movs	r3, #6
 800b410:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800b414:	e015      	b.n	800b442 <f_open+0x122>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b416:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b41a:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	bf14      	ite	ne
 800b428:	2301      	movne	r3, #1
 800b42a:	2300      	moveq	r3, #0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd fb7c 	bl	8008b34 <chk_lock>
 800b43c:	4603      	mov	r3, r0
 800b43e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b442:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b446:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f003 031c 	and.w	r3, r3, #28
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 80e6 	beq.w	800b622 <f_open+0x302>
			if (res != FR_OK) {					/* No file, create new */
 800b456:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d027      	beq.n	800b4ae <f_open+0x18e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b45e:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b462:	2b04      	cmp	r3, #4
 800b464:	d10e      	bne.n	800b484 <f_open+0x164>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b466:	f7fd fbd1 	bl	8008c0c <enq_lock>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d006      	beq.n	800b47e <f_open+0x15e>
 800b470:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b474:	4618      	mov	r0, r3
 800b476:	f7fe ff0d 	bl	800a294 <dir_register>
 800b47a:	4603      	mov	r3, r0
 800b47c:	e000      	b.n	800b480 <f_open+0x160>
 800b47e:	2312      	movs	r3, #18
 800b480:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b484:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b488:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b48c:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b490:	f6a2 2251 	subw	r2, r2, #2641	; 0xa51
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	f042 0208 	orr.w	r2, r2, #8
 800b49a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b49c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4a0:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b4a4:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800b4a8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
 800b4ac:	e017      	b.n	800b4de <f_open+0x1be>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4ae:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b4b2:	330b      	adds	r3, #11
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	f003 0311 	and.w	r3, r3, #17
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <f_open+0x1a6>
					res = FR_DENIED;
 800b4be:	2307      	movs	r3, #7
 800b4c0:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800b4c4:	e00b      	b.n	800b4de <f_open+0x1be>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b4c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4ca:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <f_open+0x1be>
						res = FR_EXIST;
 800b4d8:	2308      	movs	r3, #8
 800b4da:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b4de:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 80c1 	bne.w	800b66a <f_open+0x34a>
 800b4e8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4ec:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 80b7 	beq.w	800b66a <f_open+0x34a>
				dw = GET_FATTIME();				/* Created time */
 800b4fc:	f7fd f9b0 	bl	8008860 <get_fattime>
 800b500:	f8c7 0a4c 	str.w	r0, [r7, #2636]	; 0xa4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b504:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b508:	330e      	adds	r3, #14
 800b50a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 800b516:	b29b      	uxth	r3, r3
 800b518:	0a1b      	lsrs	r3, r3, #8
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b520:	330f      	adds	r3, #15
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 800b52a:	0c1a      	lsrs	r2, r3, #16
 800b52c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b530:	3310      	adds	r3, #16
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 800b53a:	0e1a      	lsrs	r2, r3, #24
 800b53c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b540:	3311      	adds	r3, #17
 800b542:	b2d2      	uxtb	r2, r2
 800b544:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b546:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b54a:	330b      	adds	r3, #11
 800b54c:	2200      	movs	r2, #0
 800b54e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b550:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b554:	331c      	adds	r3, #28
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b55e:	331d      	adds	r3, #29
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
 800b564:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b568:	331e      	adds	r3, #30
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b572:	331f      	adds	r3, #31
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b578:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b57c:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b580:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b584:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe fac2 	bl	8009b12 <ld_clust>
 800b58e:	f8c7 0a48 	str.w	r0, [r7, #2632]	; 0xa48
				st_clust(dir, 0);				/* cluster = 0 */
 800b592:	2100      	movs	r1, #0
 800b594:	f8d7 0a50 	ldr.w	r0, [r7, #2640]	; 0xa50
 800b598:	f7fe fae8 	bl	8009b6c <st_clust>
				dj.fs->wflag = 1;
 800b59c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5a0:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b5a4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
				if (cl) {						/* Remove the cluster chain if exist */
 800b5ae:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d059      	beq.n	800b66a <f_open+0x34a>
					dw = dj.fs->winsect;
 800b5b6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5ba:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b5be:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b5c2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
 800b5c6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
					res = remove_chain(dj.fs, cl);
 800b5ca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5ce:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b5d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b5d6:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fd ff6f 	bl	80094be <remove_chain>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
					if (res == FR_OK) {
 800b5e6:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d13d      	bne.n	800b66a <f_open+0x34a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b5ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5f2:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b5f6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b5fa:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 800b5fe:	3a01      	subs	r2, #1
 800b600:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
						res = move_window(dj.fs, dw);
 800b604:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b608:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b60c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b610:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd fc8a 	bl	8008f2e <move_window>
 800b61a:	4603      	mov	r3, r0
 800b61c:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800b620:	e023      	b.n	800b66a <f_open+0x34a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b622:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b626:	2b00      	cmp	r3, #0
 800b628:	d11f      	bne.n	800b66a <f_open+0x34a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b62a:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b62e:	330b      	adds	r3, #11
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	f003 0310 	and.w	r3, r3, #16
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <f_open+0x322>
					res = FR_NO_FILE;
 800b63a:	2304      	movs	r3, #4
 800b63c:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800b640:	e013      	b.n	800b66a <f_open+0x34a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b642:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b646:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00a      	beq.n	800b66a <f_open+0x34a>
 800b654:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b658:	330b      	adds	r3, #11
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f003 0301 	and.w	r3, r3, #1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <f_open+0x34a>
						res = FR_DENIED;
 800b664:	2307      	movs	r3, #7
 800b666:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
				}
			}
		}
		if (res == FR_OK) {
 800b66a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d153      	bne.n	800b71a <f_open+0x3fa>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b672:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b676:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 0308 	and.w	r3, r3, #8
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <f_open+0x37c>
				mode |= FA__WRITTEN;
 800b684:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b688:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b68c:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b690:	f6a2 2251 	subw	r2, r2, #2641	; 0xa51
 800b694:	7812      	ldrb	r2, [r2, #0]
 800b696:	f042 0220 	orr.w	r2, r2, #32
 800b69a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b69c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6a0:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b6a4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b6a8:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800b6ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6b0:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
			fp->dir_ptr = dir;
 800b6ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6be:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800b6c8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6cc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6d0:	f6a3 2351 	subw	r3, r3, #2641	; 0xa51
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	f023 0301 	bic.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	bf14      	ite	ne
 800b6de:	2301      	movne	r3, #1
 800b6e0:	2300      	moveq	r3, #0
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd fab1 	bl	8008c54 <inc_lock>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6f8:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
			if (!fp->lockid) res = FR_INT_ERR;
 800b702:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b706:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800b710:	2b00      	cmp	r3, #0
 800b712:	d102      	bne.n	800b71a <f_open+0x3fa>
 800b714:	2302      	movs	r3, #2
 800b716:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b71a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d178      	bne.n	800b814 <f_open+0x4f4>
			fp->flag = mode;					/* File access mode */
 800b722:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b726:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b730:	f6a2 2251 	subw	r2, r2, #2641	; 0xa51
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
			fp->err = 0;						/* Clear error flag */
 800b73a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b73e:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b74a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b74e:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b752:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b756:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fe f9d9 	bl	8009b12 <ld_clust>
 800b760:	4602      	mov	r2, r0
 800b762:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b766:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b770:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b774:	331f      	adds	r3, #31
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	061a      	lsls	r2, r3, #24
 800b77a:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 800b77e:	331e      	adds	r3, #30
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	041b      	lsls	r3, r3, #16
 800b784:	4313      	orrs	r3, r2
 800b786:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800b78a:	321d      	adds	r2, #29
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	0212      	lsls	r2, r2, #8
 800b790:	4313      	orrs	r3, r2
 800b792:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 800b796:	321c      	adds	r2, #28
 800b798:	7812      	ldrb	r2, [r2, #0]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7a0:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
			fp->fptr = 0;						/* File pointer */
 800b7aa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7ae:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
			fp->dsect = 0;
 800b7ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7be:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b7ca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7ce:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b7da:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7de:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 800b7e2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800b7e6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7ea:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
			fp->id = fp->fs->id;
 800b7f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7f8:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b802:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800b806:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b80a:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
		}
	}

	LEAVE_FF(dj.fs, res);
 800b814:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
}
 800b818:	4618      	mov	r0, r3
 800b81a:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b08c      	sub	sp, #48	; 0x30
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2200      	movs	r2, #0
 800b838:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff fcf4 	bl	800b228 <validate>
 800b840:	4603      	mov	r3, r0
 800b842:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b844:	7ffb      	ldrb	r3, [r7, #31]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <f_read+0x2c>
 800b84a:	7ffb      	ldrb	r3, [r7, #31]
 800b84c:	e150      	b.n	800baf0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 800b85e:	e147      	b.n	800baf0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b86e:	2307      	movs	r3, #7
 800b870:	e13e      	b.n	800baf0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	429a      	cmp	r2, r3
 800b888:	f240 812d 	bls.w	800bae6 <f_read+0x2c4>
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b890:	e129      	b.n	800bae6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800b898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 80f2 	bne.w	800ba86 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800b8a8:	0adb      	lsrs	r3, r3, #11
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b8b2:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d139      	bne.n	800b938 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d104      	bne.n	800b8d8 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d6:	e018      	b.n	800b90a <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f7fd ff08 	bl	8009700 <clmt_clust>
 800b8f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b8f2:	e00a      	b.n	800b90a <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800b900:	4619      	mov	r1, r3
 800b902:	4610      	mov	r0, r2
 800b904:	f7fd fc0f 	bl	8009126 <get_fat>
 800b908:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d805      	bhi.n	800b91c <f_read+0xfa>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800b918:	2302      	movs	r3, #2
 800b91a:	e0e9      	b.n	800baf0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d105      	bne.n	800b930 <f_read+0x10e>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800b92c:	2301      	movs	r3, #1
 800b92e:	e0df      	b.n	800baf0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b934:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fd fbcc 	bl	80090e4 <clust2sect>
 800b94c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d105      	bne.n	800b960 <f_read+0x13e>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800b95c:	2302      	movs	r3, #2
 800b95e:	e0c7      	b.n	800baf0 <f_read+0x2ce>
			sect += csect;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	4413      	add	r3, r2
 800b966:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	0adb      	lsrs	r3, r3, #11
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	d046      	beq.n	800ba02 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b974:	7dfa      	ldrb	r2, [r7, #23]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	4413      	add	r3, r2
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
 800b980:	f892 2802 	ldrb.w	r2, [r2, #2050]	; 0x802
 800b984:	4293      	cmp	r3, r2
 800b986:	d908      	bls.n	800b99a <f_read+0x178>
					cc = fp->fs->csize - csect;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b98e:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800b992:	461a      	mov	r2, r3
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b9a0:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	6a39      	ldr	r1, [r7, #32]
 800b9aa:	f7fc ffed 	bl	8008988 <disk_read>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d005      	beq.n	800b9c0 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e097      	b.n	800baf0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800b9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d015      	beq.n	800b9fa <f_read+0x1d8>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d90d      	bls.n	800b9fa <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	02db      	lsls	r3, r3, #11
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fd f825 	bl	8008a44 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	02db      	lsls	r3, r3, #11
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800ba00:	e05b      	b.n	800baba <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d037      	beq.n	800ba7e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800ba14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01d      	beq.n	800ba58 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800ba22:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f7fc ffca 	bl	80089c8 <disk_write>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d005      	beq.n	800ba46 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800ba42:	2301      	movs	r3, #1
 800ba44:	e054      	b.n	800baf0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800ba4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800ba5e:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800ba62:	68f9      	ldr	r1, [r7, #12]
 800ba64:	2301      	movs	r3, #1
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	f7fc ff8e 	bl	8008988 <disk_read>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e038      	b.n	800baf0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800ba8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba90:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800ba94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800ba96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d901      	bls.n	800baa2 <f_read+0x280>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800baa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bab2:	4619      	mov	r1, r3
 800bab4:	6a38      	ldr	r0, [r7, #32]
 800bab6:	f7fc ffc5 	bl	8008a44 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800baba:	6a3a      	ldr	r2, [r7, #32]
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	4413      	add	r3, r2
 800bac0:	623b      	str	r3, [r7, #32]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800bac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baca:	441a      	add	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	441a      	add	r2, r3
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f47f aed2 	bne.w	800b892 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3730      	adds	r7, #48	; 0x30
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08a      	sub	sp, #40	; 0x28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff fb89 	bl	800b228 <validate>
 800bb16:	4603      	mov	r3, r0
 800bb18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <f_write+0x2c>
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	e192      	b.n	800be4a <f_write+0x352>
	if (fp->err)							/* Check error */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f893 3807 	ldrb.w	r3, [r3, #2055]	; 0x807
 800bb34:	e189      	b.n	800be4a <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bb3c:	f003 0302 	and.w	r3, r3, #2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bb44:	2307      	movs	r3, #7
 800bb46:	e180      	b.n	800be4a <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	441a      	add	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	f080 8158 	bcs.w	800be0e <f_write+0x316>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bb62:	e154      	b.n	800be0e <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bb6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f040 8114 	bne.w	800bd9c <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bb7a:	0adb      	lsrs	r3, r3, #11
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bb84:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d151      	bne.n	800bc3a <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10f      	bne.n	800bbc0 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d121      	bne.n	800bbf2 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fd fd05 	bl	80095c6 <create_chain>
 800bbbc:	6278      	str	r0, [r7, #36]	; 0x24
 800bbbe:	e018      	b.n	800bbf2 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7fd fd94 	bl	8009700 <clmt_clust>
 800bbd8:	6278      	str	r0, [r7, #36]	; 0x24
 800bbda:	e00a      	b.n	800bbf2 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fd fceb 	bl	80095c6 <create_chain>
 800bbf0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 810f 	beq.w	800be18 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d105      	bne.n	800bc0c <f_write+0x114>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e11e      	b.n	800be4a <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d105      	bne.n	800bc20 <f_write+0x128>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e114      	b.n	800be4a <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc24:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d103      	bne.n	800bc3a <f_write+0x142>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc36:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01d      	beq.n	800bc84 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bc4e:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800bc52:	68f9      	ldr	r1, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f7fc feb4 	bl	80089c8 <disk_write>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e0eb      	b.n	800be4a <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bc78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fd fa26 	bl	80090e4 <clust2sect>
 800bc98:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d105      	bne.n	800bcac <f_write+0x1b4>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e0ce      	b.n	800be4a <f_write+0x352>
			sect += csect;
 800bcac:	7dbb      	ldrb	r3, [r7, #22]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	0adb      	lsrs	r3, r3, #11
 800bcb8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d048      	beq.n	800bd52 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bcc0:	7dba      	ldrb	r2, [r7, #22]
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
 800bccc:	f892 2802 	ldrb.w	r2, [r2, #2050]	; 0x802
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d908      	bls.n	800bce6 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bcda:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 800bcde:	461a      	mov	r2, r3
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bcec:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	69b9      	ldr	r1, [r7, #24]
 800bcf6:	f7fc fe67 	bl	80089c8 <disk_write>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d005      	beq.n	800bd0c <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e09e      	b.n	800be4a <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d916      	bls.n	800bd4a <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	02db      	lsls	r3, r3, #11
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd32:	4619      	mov	r1, r3
 800bd34:	f7fc fe86 	bl	8008a44 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bd3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	02db      	lsls	r3, r3, #11
 800bd4e:	623b      	str	r3, [r7, #32]
				continue;
 800bd50:	e047      	b.n	800bde2 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d01a      	beq.n	800bd94 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d212      	bcs.n	800bd94 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bd74:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800bd78:	68f9      	ldr	r1, [r7, #12]
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	f7fc fe03 	bl	8008988 <disk_read>
 800bd82:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800bd90:	2301      	movs	r3, #1
 800bd92:	e05a      	b.n	800be4a <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bda2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bda6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800bdaa:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bdac:	6a3a      	ldr	r2, [r7, #32]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d901      	bls.n	800bdb8 <f_write+0x2c0>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800bdbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	6a3a      	ldr	r2, [r7, #32]
 800bdc8:	69b9      	ldr	r1, [r7, #24]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fc fe3a 	bl	8008a44 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	4413      	add	r3, r2
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	441a      	add	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	441a      	add	r2, r3
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f47f aea7 	bne.w	800bb64 <f_write+0x6c>
 800be16:	e000      	b.n	800be1a <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be18:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800be26:	429a      	cmp	r2, r3
 800be28:	d905      	bls.n	800be36 <f_write+0x33e>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800be3c:	f043 0320 	orr.w	r3, r3, #32
 800be40:	b2da      	uxtb	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806

	LEAVE_FF(fp->fs, FR_OK);
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3728      	adds	r7, #40	; 0x28
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff f9e4 	bl	800b228 <validate>
 800be60:	4603      	mov	r3, r0
 800be62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f040 80a8 	bne.w	800bfbc <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 80a0 	beq.w	800bfbc <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800be82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d019      	beq.n	800bebe <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800be90:	f893 0801 	ldrb.w	r0, [r3, #2049]	; 0x801
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800be9c:	2301      	movs	r3, #1
 800be9e:	f7fc fd93 	bl	80089c8 <disk_write>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bea8:	2301      	movs	r3, #1
 800beaa:	e088      	b.n	800bfbe <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800beb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f7fd f82e 	bl	8008f2e <move_window>
 800bed2:	4603      	mov	r3, r0
 800bed4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d16f      	bne.n	800bfbc <f_sync+0x16a>
				dir = fp->dir_ptr;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800bee2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	330b      	adds	r3, #11
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	330b      	adds	r3, #11
 800beee:	f042 0220 	orr.w	r2, r2, #32
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	331c      	adds	r3, #28
 800bf00:	b2d2      	uxtb	r2, r2
 800bf02:	701a      	strb	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	0a1b      	lsrs	r3, r3, #8
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	331d      	adds	r3, #29
 800bf14:	b2d2      	uxtb	r2, r2
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800bf1e:	0c1a      	lsrs	r2, r3, #16
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	331e      	adds	r3, #30
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800bf2e:	0e1a      	lsrs	r2, r3, #24
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	331f      	adds	r3, #31
 800bf34:	b2d2      	uxtb	r2, r2
 800bf36:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6938      	ldr	r0, [r7, #16]
 800bf42:	f7fd fe13 	bl	8009b6c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800bf46:	f7fc fc8b 	bl	8008860 <get_fattime>
 800bf4a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	3316      	adds	r3, #22
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3317      	adds	r3, #23
 800bf62:	b2d2      	uxtb	r2, r2
 800bf64:	701a      	strb	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	0c1a      	lsrs	r2, r3, #16
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	3318      	adds	r3, #24
 800bf6e:	b2d2      	uxtb	r2, r2
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	0e1a      	lsrs	r2, r3, #24
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3319      	adds	r3, #25
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	3312      	adds	r3, #18
 800bf82:	2200      	movs	r2, #0
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3313      	adds	r3, #19
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3806 	ldrb.w	r3, [r3, #2054]	; 0x806
 800bf94:	f023 0320 	bic.w	r3, r3, #32
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f883 2806 	strb.w	r2, [r3, #2054]	; 0x806
				fp->fs->wflag = 1;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
				res = sync_fs(fp->fs);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc ffe9 	bl	8008f8a <sync_fs>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3718      	adds	r7, #24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff ff3f 	bl	800be52 <f_sync>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d116      	bne.n	800c00c <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff f922 	bl	800b228 <validate>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10e      	bne.n	800c00c <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fc fee3 	bl	8008dc0 <dec_lock>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d103      	bne.n	800c00c <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c022:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c026:	6018      	str	r0, [r3, #0]
 800c028:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c02c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c030:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800c032:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c036:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <f_opendir+0x2e>
 800c040:	2309      	movs	r3, #9
 800c042:	e0cd      	b.n	800c1e0 <f_opendir+0x1ca>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800c044:	4639      	mov	r1, r7
 800c046:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c04a:	2200      	movs	r2, #0
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe fe1f 	bl	800ac90 <find_volume>
 800c052:	4603      	mov	r3, r0
 800c054:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	if (res == FR_OK) {
 800c058:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f040 80b1 	bne.w	800c1c4 <f_opendir+0x1ae>
		dp->fs = fs;
 800c062:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800c066:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c06a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		INIT_BUF(*dp);
 800c074:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c078:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 800c082:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 800c086:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c08a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f107 020c 	add.w	r2, r7, #12
 800c094:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c098:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c09c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c0a6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	f7fe fcb3 	bl	800aa18 <follow_path>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800c0b8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d17a      	bne.n	800c1b6 <f_opendir+0x1a0>
			if (dp->dir) {						/* It is not the origin directory itself */
 800c0c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c0c4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d025      	beq.n	800c11e <f_opendir+0x108>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800c0d2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c0d6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800c0e0:	330b      	adds	r3, #11
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 0310 	and.w	r3, r3, #16
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d015      	beq.n	800c118 <f_opendir+0x102>
					dp->sclust = ld_clust(fs, dp->dir);
 800c0ec:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800c0f0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c0f4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fd fd06 	bl	8009b12 <ld_clust>
 800c106:	4602      	mov	r2, r0
 800c108:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c10c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 800c116:	e002      	b.n	800c11e <f_opendir+0x108>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800c118:	2305      	movs	r3, #5
 800c11a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
			}
			if (res == FR_OK) {
 800c11e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c122:	2b00      	cmp	r3, #0
 800c124:	d147      	bne.n	800c1b6 <f_opendir+0x1a0>
				dp->id = fs->id;
 800c126:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800c12a:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 800c12e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c132:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c13c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c140:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c144:	2100      	movs	r1, #0
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	f7fd fb0e 	bl	8009768 <dir_sdi>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#if _FS_LOCK
				if (res == FR_OK) {
 800c152:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c156:	2b00      	cmp	r3, #0
 800c158:	d12d      	bne.n	800c1b6 <f_opendir+0x1a0>
					if (dp->sclust) {
 800c15a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c15e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01c      	beq.n	800c1a6 <f_opendir+0x190>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c16c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c170:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c174:	2100      	movs	r1, #0
 800c176:	6818      	ldr	r0, [r3, #0]
 800c178:	f7fc fd6c 	bl	8008c54 <inc_lock>
 800c17c:	4602      	mov	r2, r0
 800c17e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c182:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
						if (!dp->lockid)
 800c18c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c190:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <f_opendir+0x1a0>
							res = FR_TOO_MANY_OPEN_FILES;
 800c19e:	2312      	movs	r3, #18
 800c1a0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 800c1a4:	e007      	b.n	800c1b6 <f_opendir+0x1a0>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800c1a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c1aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c1b6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d102      	bne.n	800c1c4 <f_opendir+0x1ae>
 800c1be:	2305      	movs	r3, #5
 800c1c0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800c1c4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <f_opendir+0x1c6>
 800c1cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c1d0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	LEAVE_FF(fs, res);
 800c1dc:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff f818 	bl	800b228 <validate>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d113      	bne.n	800c22a <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d007      	beq.n	800c21c <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800c212:	4618      	mov	r0, r3
 800c214:	f7fc fdd4 	bl	8008dc0 <dec_lock>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800c242:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800c246:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c24e:	f102 0210 	add.w	r2, r2, #16
 800c252:	6013      	str	r3, [r2, #0]
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800c254:	f107 0318 	add.w	r3, r7, #24
 800c258:	3b14      	subs	r3, #20
 800c25a:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 800c25e:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 800c262:	2201      	movs	r2, #1
 800c264:	4619      	mov	r1, r3
 800c266:	f7fe fd13 	bl	800ac90 <find_volume>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c270:	f102 0217 	add.w	r2, r2, #23
 800c274:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800c276:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c27a:	f103 0317 	add.w	r3, r3, #23
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f040 816d 	bne.w	800c560 <f_unlink+0x32c>
		INIT_BUF(dj);
 800c286:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c28a:	f103 0318 	add.w	r3, r3, #24
 800c28e:	f6a3 0238 	subw	r2, r3, #2104	; 0x838
 800c292:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c296:	3b10      	subs	r3, #16
 800c298:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
 800c29c:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c2a0:	f103 0318 	add.w	r3, r3, #24
 800c2a4:	f6a3 0238 	subw	r2, r3, #2104	; 0x838
 800c2a8:	f107 0318 	add.w	r3, r7, #24
 800c2ac:	3b10      	subs	r3, #16
 800c2ae:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
		res = follow_path(&dj, path);		/* Follow the file path */
 800c2b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800c2b6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe fba8 	bl	800aa18 <follow_path>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c2ce:	f102 0217 	add.w	r2, r2, #23
 800c2d2:	7013      	strb	r3, [r2, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 800c2d4:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c2d8:	f103 0317 	add.w	r3, r3, #23
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d113      	bne.n	800c30a <f_unlink+0xd6>
 800c2e2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c2e6:	f103 0318 	add.w	r3, r3, #24
 800c2ea:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c2ee:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 800c2f2:	330b      	adds	r3, #11
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <f_unlink+0xd6>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800c2fe:	2306      	movs	r3, #6
 800c300:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c304:	f102 0217 	add.w	r2, r2, #23
 800c308:	7013      	strb	r3, [r2, #0]
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800c30a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c30e:	f103 0317 	add.w	r3, r3, #23
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10b      	bne.n	800c330 <f_unlink+0xfc>
 800c318:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800c31c:	2102      	movs	r1, #2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fc fc08 	bl	8008b34 <chk_lock>
 800c324:	4603      	mov	r3, r0
 800c326:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c32a:	f102 0217 	add.w	r2, r2, #23
 800c32e:	7013      	strb	r3, [r2, #0]
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c330:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c334:	f103 0317 	add.w	r3, r3, #23
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f040 8110 	bne.w	800c560 <f_unlink+0x32c>
			dir = dj.dir;
 800c340:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c344:	f103 0318 	add.w	r3, r3, #24
 800c348:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c34c:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800c350:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c354:	f102 020c 	add.w	r2, r2, #12
 800c358:	6013      	str	r3, [r2, #0]
			if (!dir) {
 800c35a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c35e:	f103 030c 	add.w	r3, r3, #12
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d106      	bne.n	800c376 <f_unlink+0x142>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c368:	2306      	movs	r3, #6
 800c36a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c36e:	f102 0217 	add.w	r2, r2, #23
 800c372:	7013      	strb	r3, [r2, #0]
 800c374:	e010      	b.n	800c398 <f_unlink+0x164>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800c376:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c37a:	f103 030c 	add.w	r3, r3, #12
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	330b      	adds	r3, #11
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	f003 0301 	and.w	r3, r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <f_unlink+0x164>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c38c:	2307      	movs	r3, #7
 800c38e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c392:	f102 0217 	add.w	r2, r2, #23
 800c396:	7013      	strb	r3, [r2, #0]
			}
			if (res == FR_OK) {
 800c398:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c39c:	f103 0317 	add.w	r3, r3, #23
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 808e 	bne.w	800c4c4 <f_unlink+0x290>
				dclst = ld_clust(dj.fs, dir);
 800c3a8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c3ac:	f103 0318 	add.w	r3, r3, #24
 800c3b0:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c3b4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800c3b8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c3bc:	f102 020c 	add.w	r2, r2, #12
 800c3c0:	6811      	ldr	r1, [r2, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fd fba5 	bl	8009b12 <ld_clust>
 800c3c8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c3cc:	f103 0310 	add.w	r3, r3, #16
 800c3d0:	6018      	str	r0, [r3, #0]
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800c3d2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c3d6:	f103 0310 	add.w	r3, r3, #16
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d071      	beq.n	800c4c4 <f_unlink+0x290>
 800c3e0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c3e4:	f103 030c 	add.w	r3, r3, #12
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	330b      	adds	r3, #11
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	f003 0310 	and.w	r3, r3, #16
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d066      	beq.n	800c4c4 <f_unlink+0x290>
#if _FS_RPATH
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
 800c3f6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c3fa:	f103 0318 	add.w	r3, r3, #24
 800c3fe:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c402:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800c406:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800c40a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c40e:	f102 0210 	add.w	r2, r2, #16
 800c412:	6812      	ldr	r2, [r2, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d106      	bne.n	800c426 <f_unlink+0x1f2>
						res = FR_DENIED;
 800c418:	2307      	movs	r3, #7
 800c41a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c41e:	f102 0217 	add.w	r2, r2, #23
 800c422:	7013      	strb	r3, [r2, #0]
 800c424:	e04e      	b.n	800c4c4 <f_unlink+0x290>
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800c426:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800c42a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c42e:	3b04      	subs	r3, #4
 800c430:	f640 022c 	movw	r2, #2092	; 0x82c
 800c434:	4618      	mov	r0, r3
 800c436:	f7fc fb05 	bl	8008a44 <mem_cpy>
						sdj.sclust = dclst;
 800c43a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800c43e:	461a      	mov	r2, r3
 800c440:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c444:	f103 0310 	add.w	r3, r3, #16
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f8c2 37a4 	str.w	r3, [r2, #1956]	; 0x7a4
						res = dir_sdi(&sdj, 2);
 800c44e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c452:	3b04      	subs	r3, #4
 800c454:	2102      	movs	r1, #2
 800c456:	4618      	mov	r0, r3
 800c458:	f7fd f986 	bl	8009768 <dir_sdi>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c462:	f102 0217 	add.w	r2, r2, #23
 800c466:	7013      	strb	r3, [r2, #0]
						if (res == FR_OK) {
 800c468:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c46c:	f103 0317 	add.w	r3, r3, #23
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d126      	bne.n	800c4c4 <f_unlink+0x290>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800c476:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c47a:	3b04      	subs	r3, #4
 800c47c:	2100      	movs	r1, #0
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fd fe64 	bl	800a14c <dir_read>
 800c484:	4603      	mov	r3, r0
 800c486:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c48a:	f102 0217 	add.w	r2, r2, #23
 800c48e:	7013      	strb	r3, [r2, #0]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800c490:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c494:	f103 0317 	add.w	r3, r3, #23
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d105      	bne.n	800c4aa <f_unlink+0x276>
 800c49e:	2307      	movs	r3, #7
 800c4a0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c4a4:	f102 0217 	add.w	r2, r2, #23
 800c4a8:	7013      	strb	r3, [r2, #0]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800c4aa:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c4ae:	f103 0317 	add.w	r3, r3, #23
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d105      	bne.n	800c4c4 <f_unlink+0x290>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c4be:	f102 0217 	add.w	r2, r2, #23
 800c4c2:	7013      	strb	r3, [r2, #0]
						}
					}
				}
			}
			if (res == FR_OK) {
 800c4c4:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c4c8:	f103 0317 	add.w	r3, r3, #23
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d146      	bne.n	800c560 <f_unlink+0x32c>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800c4d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fd fff0 	bl	800a4bc <dir_remove>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c4e2:	f102 0217 	add.w	r2, r2, #23
 800c4e6:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800c4e8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c4ec:	f103 0317 	add.w	r3, r3, #23
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d11c      	bne.n	800c530 <f_unlink+0x2fc>
 800c4f6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c4fa:	f103 0310 	add.w	r3, r3, #16
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d015      	beq.n	800c530 <f_unlink+0x2fc>
					res = remove_chain(dj.fs, dclst);
 800c504:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c508:	f103 0318 	add.w	r3, r3, #24
 800c50c:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c510:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800c514:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c518:	f102 0210 	add.w	r2, r2, #16
 800c51c:	6811      	ldr	r1, [r2, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fc ffcd 	bl	80094be <remove_chain>
 800c524:	4603      	mov	r3, r0
 800c526:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c52a:	f102 0217 	add.w	r2, r2, #23
 800c52e:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK) res = sync_fs(dj.fs);
 800c530:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c534:	f103 0317 	add.w	r3, r3, #23
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d110      	bne.n	800c560 <f_unlink+0x32c>
 800c53e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c542:	f103 0318 	add.w	r3, r3, #24
 800c546:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800c54a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fc fd1b 	bl	8008f8a <sync_fs>
 800c554:	4603      	mov	r3, r0
 800c556:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800c55a:	f102 0217 	add.w	r2, r2, #23
 800c55e:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800c560:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800c564:	f103 0317 	add.w	r3, r3, #23
 800c568:	781b      	ldrb	r3, [r3, #0]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	f507 5793 	add.w	r7, r7, #4704	; 0x1260
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b09a      	sub	sp, #104	; 0x68
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	460b      	mov	r3, r1
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	72fb      	strb	r3, [r7, #11]
	DWORD eb[2];
#endif


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d902      	bls.n	800c592 <f_mkfs+0x1a>
 800c58c:	2313      	movs	r3, #19
 800c58e:	f000 bca6 	b.w	800cede <f_mkfs+0x966>
	vol = get_ldnumber(&path);
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe facc 	bl	800ab34 <get_ldnumber>
 800c59c:	63b8      	str	r0, [r7, #56]	; 0x38
	if (vol < 0) return FR_INVALID_DRIVE;
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da02      	bge.n	800c5aa <f_mkfs+0x32>
 800c5a4:	230b      	movs	r3, #11
 800c5a6:	f000 bc9a 	b.w	800cede <f_mkfs+0x966>
	fs = FatFs[vol];
 800c5aa:	4aa5      	ldr	r2, [pc, #660]	; (800c840 <f_mkfs+0x2c8>)
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b2:	65bb      	str	r3, [r7, #88]	; 0x58
	if (!fs) return FR_NOT_ENABLED;
 800c5b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <f_mkfs+0x48>
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	f000 bc8f 	b.w	800cede <f_mkfs+0x966>
	fs->fs_type = 0;
 800c5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	pdrv = LD2PD(vol);	/* Physical drive */
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	/* Get disk statics */
	stat = disk_initialize(pdrv);
 800c5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fc f9af 	bl	800893c <disk_initialize>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800c5e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <f_mkfs+0x7e>
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	f000 bc74 	b.w	800cede <f_mkfs+0x966>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800c5f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <f_mkfs+0x90>
 800c602:	230a      	movs	r3, #10
 800c604:	f000 bc6b 	b.w	800cede <f_mkfs+0x966>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
 800c608:	f107 021c 	add.w	r2, r7, #28
 800c60c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c610:	2101      	movs	r1, #1
 800c612:	4618      	mov	r0, r3
 800c614:	f7fc f9f8 	bl	8008a08 <disk_ioctl>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <f_mkfs+0xac>
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	2b7f      	cmp	r3, #127	; 0x7f
 800c622:	d802      	bhi.n	800c62a <f_mkfs+0xb2>
			return FR_DISK_ERR;
 800c624:	2301      	movs	r3, #1
 800c626:	f000 bc5a 	b.w	800cede <f_mkfs+0x966>
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
 800c62a:	7afb      	ldrb	r3, [r7, #11]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <f_mkfs+0xbc>
 800c630:	2300      	movs	r3, #0
 800c632:	e000      	b.n	800c636 <f_mkfs+0xbe>
 800c634:	233f      	movs	r3, #63	; 0x3f
 800c636:	65fb      	str	r3, [r7, #92]	; 0x5c
		n_vol -= b_vol;				/* Volume size */
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	61fb      	str	r3, [r7, #28]
	}

	if (au & (au - 1)) au = 0;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	1e5a      	subs	r2, r3, #1
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4013      	ands	r3, r2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <f_mkfs+0xd8>
 800c64c:	2300      	movs	r3, #0
 800c64e:	607b      	str	r3, [r7, #4]
	if (!au) {						/* AU auto selection */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d118      	bne.n	800c688 <f_mkfs+0x110>
		vs = n_vol / (2000 / (SS(fs) / 512));
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	4a7a      	ldr	r2, [pc, #488]	; (800c844 <f_mkfs+0x2cc>)
 800c65a:	fba2 2303 	umull	r2, r3, r2, r3
 800c65e:	095b      	lsrs	r3, r3, #5
 800c660:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; vs < vst[i]; i++) ;
 800c662:	2300      	movs	r3, #0
 800c664:	663b      	str	r3, [r7, #96]	; 0x60
 800c666:	e002      	b.n	800c66e <f_mkfs+0xf6>
 800c668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c66a:	3301      	adds	r3, #1
 800c66c:	663b      	str	r3, [r7, #96]	; 0x60
 800c66e:	4a76      	ldr	r2, [pc, #472]	; (800c848 <f_mkfs+0x2d0>)
 800c670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c676:	461a      	mov	r2, r3
 800c678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d3f4      	bcc.n	800c668 <f_mkfs+0xf0>
		au = cst[i];
 800c67e:	4a73      	ldr	r2, [pc, #460]	; (800c84c <f_mkfs+0x2d4>)
 800c680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c686:	607b      	str	r3, [r7, #4]
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c68e:	d302      	bcc.n	800c696 <f_mkfs+0x11e>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	0adb      	lsrs	r3, r3, #11
 800c694:	607b      	str	r3, [r7, #4]
	if (!au) au = 1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <f_mkfs+0x128>
 800c69c:	2301      	movs	r3, #1
 800c69e:	607b      	str	r3, [r7, #4]
	if (au > 128) au = 128;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b80      	cmp	r3, #128	; 0x80
 800c6a4:	d901      	bls.n	800c6aa <f_mkfs+0x132>
 800c6a6:	2380      	movs	r3, #128	; 0x80
 800c6a8:	607b      	str	r3, [r7, #4]

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6b2:	633b      	str	r3, [r7, #48]	; 0x30
	fmt = FS_FAT12;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d902      	bls.n	800c6ca <f_mkfs+0x152>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d902      	bls.n	800c6da <f_mkfs+0x162>
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
 800c6da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d10b      	bne.n	800c6fa <f_mkfs+0x182>
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	0adb      	lsrs	r3, r3, #11
 800c6ee:	643b      	str	r3, [r7, #64]	; 0x40
		n_rsv = 32;
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	647b      	str	r3, [r7, #68]	; 0x44
		n_dir = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e018      	b.n	800c72c <f_mkfs+0x1b4>
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
 800c6fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d107      	bne.n	800c712 <f_mkfs+0x19a>
 800c702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	3301      	adds	r3, #1
 800c70c:	085b      	lsrs	r3, r3, #1
 800c70e:	3303      	adds	r3, #3
 800c710:	e002      	b.n	800c718 <f_mkfs+0x1a0>
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	3302      	adds	r3, #2
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	643b      	str	r3, [r7, #64]	; 0x40
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
 800c71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c71c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c720:	0adb      	lsrs	r3, r3, #11
 800c722:	643b      	str	r3, [r7, #64]	; 0x40
		n_rsv = 1;
 800c724:	2301      	movs	r3, #1
 800c726:	647b      	str	r3, [r7, #68]	; 0x44
		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
 800c728:	2308      	movs	r3, #8
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
 800c72c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c730:	4413      	add	r3, r2
 800c732:	64bb      	str	r3, [r7, #72]	; 0x48
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
 800c734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c738:	4413      	add	r3, r2
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
	b_data = b_dir + n_dir;				/* Data area start sector */
 800c73c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c740:	4413      	add	r3, r2
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	441a      	add	r2, r3
 800c74a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c74c:	1ad2      	subs	r2, r2, r3
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	429a      	cmp	r2, r3
 800c752:	d901      	bls.n	800c758 <f_mkfs+0x1e0>
 800c754:	230e      	movs	r3, #14
 800c756:	e3c2      	b.n	800cede <f_mkfs+0x966>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
 800c758:	f107 0220 	add.w	r2, r7, #32
 800c75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c760:	2103      	movs	r1, #3
 800c762:	4618      	mov	r0, r3
 800c764:	f7fc f950 	bl	8008a08 <disk_ioctl>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <f_mkfs+0x204>
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <f_mkfs+0x204>
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c77a:	d901      	bls.n	800c780 <f_mkfs+0x208>
 800c77c:	2301      	movs	r3, #1
 800c77e:	623b      	str	r3, [r7, #32]
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
 800c780:	6a3a      	ldr	r2, [r7, #32]
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	4413      	add	r3, r2
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	425b      	negs	r3, r3
 800c78c:	4013      	ands	r3, r2
 800c78e:	623b      	str	r3, [r7, #32]
	n = (n - b_data) / N_FATS;
 800c790:	6a3a      	ldr	r2, [r7, #32]
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	623b      	str	r3, [r7, #32]
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
 800c798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c79c:	2b03      	cmp	r3, #3
 800c79e:	d108      	bne.n	800c7b2 <f_mkfs+0x23a>
		n_rsv += n;
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7a4:	4413      	add	r3, r2
 800c7a6:	647b      	str	r3, [r7, #68]	; 0x44
		b_fat += n;
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7ac:	4413      	add	r3, r2
 800c7ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7b0:	e003      	b.n	800c7ba <f_mkfs+0x242>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7b6:	4413      	add	r3, r2
 800c7b8:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c2:	1ad2      	subs	r2, r2, r3
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ce:	633b      	str	r3, [r7, #48]	; 0x30
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
 800c7d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d104      	bne.n	800c7e2 <f_mkfs+0x26a>
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d908      	bls.n	800c7f4 <f_mkfs+0x27c>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
 800c7e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d106      	bne.n	800c7f8 <f_mkfs+0x280>
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d801      	bhi.n	800c7f8 <f_mkfs+0x280>
		return FR_MKFS_ABORTED;
 800c7f4:	230e      	movs	r3, #14
 800c7f6:	e372      	b.n	800cede <f_mkfs+0x966>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
 800c7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d103      	bne.n	800c808 <f_mkfs+0x290>
		sys = 0x0C;		/* FAT32X */
 800c800:	230c      	movs	r3, #12
 800c802:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800c806:	e014      	b.n	800c832 <f_mkfs+0x2ba>
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
 800c808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d107      	bne.n	800c820 <f_mkfs+0x2a8>
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c816:	d203      	bcs.n	800c820 <f_mkfs+0x2a8>
			sys = 0x01;	/* FAT12(<65536) */
 800c818:	2301      	movs	r3, #1
 800c81a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800c81e:	e008      	b.n	800c832 <f_mkfs+0x2ba>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c826:	d201      	bcs.n	800c82c <f_mkfs+0x2b4>
 800c828:	2304      	movs	r3, #4
 800c82a:	e000      	b.n	800c82e <f_mkfs+0x2b6>
 800c82c:	2306      	movs	r3, #6
 800c82e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
 800c832:	7afb      	ldrb	r3, [r7, #11]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <f_mkfs+0x2d8>
			md = 0xF0;
 800c838:	23f0      	movs	r3, #240	; 0xf0
 800c83a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800c83e:	e080      	b.n	800c942 <f_mkfs+0x3ca>
 800c840:	200045a0 	.word	0x200045a0
 800c844:	10624dd3 	.word	0x10624dd3
 800c848:	080127e0 	.word	0x080127e0
 800c84c:	080127f8 	.word	0x080127f8
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win.d8, 0, SS(fs));
 800c850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c856:	2100      	movs	r1, #0
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fc f911 	bl	8008a80 <mem_set>
			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
 800c85e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c860:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
			tbl[1] = 1;						/* Partition start head */
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	3301      	adds	r3, #1
 800c86a:	2201      	movs	r2, #1
 800c86c:	701a      	strb	r2, [r3, #0]
			tbl[2] = 1;						/* Partition start sector */
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	3302      	adds	r3, #2
 800c872:	2201      	movs	r2, #1
 800c874:	701a      	strb	r2, [r3, #0]
			tbl[3] = 0;						/* Partition start cylinder */
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	3303      	adds	r3, #3
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
			tbl[4] = sys;					/* System type */
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	3304      	adds	r3, #4
 800c882:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800c886:	701a      	strb	r2, [r3, #0]
			tbl[5] = 254;					/* Partition end head */
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	3305      	adds	r3, #5
 800c88c:	22fe      	movs	r2, #254	; 0xfe
 800c88e:	701a      	strb	r2, [r3, #0]
			n = (b_vol + n_vol) / 63 / 255;
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c894:	441a      	add	r2, r3
 800c896:	4b58      	ldr	r3, [pc, #352]	; (800c9f8 <f_mkfs+0x480>)
 800c898:	fba3 1302 	umull	r1, r3, r3, r2
 800c89c:	1ad2      	subs	r2, r2, r3
 800c89e:	0852      	lsrs	r2, r2, #1
 800c8a0:	4413      	add	r3, r2
 800c8a2:	0b5b      	lsrs	r3, r3, #13
 800c8a4:	623b      	str	r3, [r7, #32]
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	089b      	lsrs	r3, r3, #2
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	3306      	adds	r3, #6
 800c8b0:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c8b4:	b2d2      	uxtb	r2, r2
 800c8b6:	701a      	strb	r2, [r3, #0]
			tbl[7] = (BYTE)n;				/* End cylinder */
 800c8b8:	6a3a      	ldr	r2, [r7, #32]
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	3307      	adds	r3, #7
 800c8be:	b2d2      	uxtb	r2, r2
 800c8c0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	223f      	movs	r2, #63	; 0x3f
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	3309      	adds	r3, #9
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	330a      	adds	r3, #10
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	330b      	adds	r3, #11
 800c8de:	2200      	movs	r2, #0
 800c8e0:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
 800c8e2:	69fa      	ldr	r2, [r7, #28]
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	330c      	adds	r3, #12
 800c8e8:	b2d2      	uxtb	r2, r2
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	330d      	adds	r3, #13
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	0c1a      	lsrs	r2, r3, #16
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	330e      	adds	r3, #14
 800c904:	b2d2      	uxtb	r2, r2
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	0e1a      	lsrs	r2, r3, #24
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	330f      	adds	r3, #15
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	701a      	strb	r2, [r3, #0]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
 800c914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c916:	2255      	movs	r2, #85	; 0x55
 800c918:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800c91c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c91e:	22aa      	movs	r2, #170	; 0xaa
 800c920:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
 800c924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c926:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800c92a:	2301      	movs	r3, #1
 800c92c:	2200      	movs	r2, #0
 800c92e:	f7fc f84b 	bl	80089c8 <disk_write>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <f_mkfs+0x3c4>
				return FR_DISK_ERR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e2d0      	b.n	800cede <f_mkfs+0x966>
			md = 0xF8;
 800c93c:	23f8      	movs	r3, #248	; 0xf8
 800c93e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win.d8;							/* Clear sector */
 800c942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c944:	627b      	str	r3, [r7, #36]	; 0x24
	mem_set(tbl, 0, SS(fs));
 800c946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c94a:	2100      	movs	r1, #0
 800c94c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c94e:	f7fc f897 	bl	8008a80 <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
 800c952:	220b      	movs	r2, #11
 800c954:	4929      	ldr	r1, [pc, #164]	; (800c9fc <f_mkfs+0x484>)
 800c956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c958:	f7fc f874 	bl	8008a44 <mem_cpy>
	i = SS(fs);								/* Sector size */
 800c95c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c960:	663b      	str	r3, [r7, #96]	; 0x60
	ST_WORD(tbl + BPB_BytsPerSec, i);
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	330b      	adds	r3, #11
 800c966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c968:	b2d2      	uxtb	r2, r2
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c96e:	b29b      	uxth	r3, r3
 800c970:	0a1b      	lsrs	r3, r3, #8
 800c972:	b29a      	uxth	r2, r3
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	330c      	adds	r3, #12
 800c978:	b2d2      	uxtb	r2, r2
 800c97a:	701a      	strb	r2, [r3, #0]
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	330d      	adds	r3, #13
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	330e      	adds	r3, #14
 800c98a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c98c:	b2d2      	uxtb	r2, r2
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c992:	b29b      	uxth	r3, r3
 800c994:	0a1b      	lsrs	r3, r3, #8
 800c996:	b29a      	uxth	r2, r3
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	330f      	adds	r3, #15
 800c99c:	b2d2      	uxtb	r2, r2
 800c99e:	701a      	strb	r2, [r3, #0]
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	3310      	adds	r3, #16
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	701a      	strb	r2, [r3, #0]
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
 800c9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d101      	bne.n	800c9b4 <f_mkfs+0x43c>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e001      	b.n	800c9b8 <f_mkfs+0x440>
 800c9b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9b8:	663b      	str	r3, [r7, #96]	; 0x60
	ST_WORD(tbl + BPB_RootEntCnt, i);
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	3311      	adds	r3, #17
 800c9be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9c0:	b2d2      	uxtb	r2, r2
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	0a1b      	lsrs	r3, r3, #8
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	3312      	adds	r3, #18
 800c9d0:	b2d2      	uxtb	r2, r2
 800c9d2:	701a      	strb	r2, [r3, #0]
	if (n_vol < 0x10000) {					/* Number of total sectors */
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9da:	d211      	bcs.n	800ca00 <f_mkfs+0x488>
		ST_WORD(tbl + BPB_TotSec16, n_vol);
 800c9dc:	69fa      	ldr	r2, [r7, #28]
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	3313      	adds	r3, #19
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	0a1b      	lsrs	r3, r3, #8
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	3314      	adds	r3, #20
 800c9f2:	b2d2      	uxtb	r2, r2
 800c9f4:	701a      	strb	r2, [r3, #0]
 800c9f6:	e01c      	b.n	800ca32 <f_mkfs+0x4ba>
 800c9f8:	0515565b 	.word	0x0515565b
 800c9fc:	08012770 	.word	0x08012770
	} else {
		ST_DWORD(tbl + BPB_TotSec32, n_vol);
 800ca00:	69fa      	ldr	r2, [r7, #28]
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	3320      	adds	r3, #32
 800ca06:	b2d2      	uxtb	r2, r2
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	0a1b      	lsrs	r3, r3, #8
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	3321      	adds	r3, #33	; 0x21
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	0c1a      	lsrs	r2, r3, #16
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	3322      	adds	r3, #34	; 0x22
 800ca22:	b2d2      	uxtb	r2, r2
 800ca24:	701a      	strb	r2, [r3, #0]
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	0e1a      	lsrs	r2, r3, #24
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	3323      	adds	r3, #35	; 0x23
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	701a      	strb	r2, [r3, #0]
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
 800ca32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca34:	3315      	adds	r3, #21
 800ca36:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ca3a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3e:	3318      	adds	r3, #24
 800ca40:	223f      	movs	r2, #63	; 0x3f
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	3319      	adds	r3, #25
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	331a      	adds	r3, #26
 800ca50:	22ff      	movs	r2, #255	; 0xff
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	331b      	adds	r3, #27
 800ca58:	2200      	movs	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]
	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	331c      	adds	r3, #28
 800ca60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca62:	b2d2      	uxtb	r2, r2
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	0a1b      	lsrs	r3, r3, #8
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	331d      	adds	r3, #29
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca78:	0c1a      	lsrs	r2, r3, #16
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	331e      	adds	r3, #30
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca84:	0e1a      	lsrs	r2, r3, #24
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca88:	331f      	adds	r3, #31
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
	n = GET_FATTIME();						/* Use current time as VSN */
 800ca8e:	f7fb fee7 	bl	8008860 <get_fattime>
 800ca92:	4603      	mov	r3, r0
 800ca94:	623b      	str	r3, [r7, #32]
	if (fmt == FS_FAT32) {
 800ca96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d161      	bne.n	800cb62 <f_mkfs+0x5ea>
		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
 800ca9e:	6a3a      	ldr	r2, [r7, #32]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	3343      	adds	r3, #67	; 0x43
 800caa4:	b2d2      	uxtb	r2, r2
 800caa6:	701a      	strb	r2, [r3, #0]
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	0a1b      	lsrs	r3, r3, #8
 800caae:	b29a      	uxth	r2, r3
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	3344      	adds	r3, #68	; 0x44
 800cab4:	b2d2      	uxtb	r2, r2
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	0c1a      	lsrs	r2, r3, #16
 800cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabe:	3345      	adds	r3, #69	; 0x45
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	6a3b      	ldr	r3, [r7, #32]
 800cac6:	0e1a      	lsrs	r2, r3, #24
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	3346      	adds	r3, #70	; 0x46
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	3324      	adds	r3, #36	; 0x24
 800cad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cadc:	b29b      	uxth	r3, r3
 800cade:	0a1b      	lsrs	r3, r3, #8
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae4:	3325      	adds	r3, #37	; 0x25
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caec:	0c1a      	lsrs	r2, r3, #16
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	3326      	adds	r3, #38	; 0x26
 800caf2:	b2d2      	uxtb	r2, r2
 800caf4:	701a      	strb	r2, [r3, #0]
 800caf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf8:	0e1a      	lsrs	r2, r3, #24
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	3327      	adds	r3, #39	; 0x27
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	332c      	adds	r3, #44	; 0x2c
 800cb06:	2202      	movs	r2, #2
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	332d      	adds	r3, #45	; 0x2d
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	332e      	adds	r3, #46	; 0x2e
 800cb16:	2200      	movs	r2, #0
 800cb18:	701a      	strb	r2, [r3, #0]
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	332f      	adds	r3, #47	; 0x2f
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	3330      	adds	r3, #48	; 0x30
 800cb26:	2201      	movs	r2, #1
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	3331      	adds	r3, #49	; 0x31
 800cb2e:	2200      	movs	r2, #0
 800cb30:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	3332      	adds	r3, #50	; 0x32
 800cb36:	2206      	movs	r2, #6
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	3333      	adds	r3, #51	; 0x33
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	3340      	adds	r3, #64	; 0x40
 800cb46:	2280      	movs	r2, #128	; 0x80
 800cb48:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	3342      	adds	r3, #66	; 0x42
 800cb4e:	2229      	movs	r2, #41	; 0x29
 800cb50:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	3347      	adds	r3, #71	; 0x47
 800cb56:	2213      	movs	r2, #19
 800cb58:	4992      	ldr	r1, [pc, #584]	; (800cda4 <f_mkfs+0x82c>)
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fb ff72 	bl	8008a44 <mem_cpy>
 800cb60:	e034      	b.n	800cbcc <f_mkfs+0x654>
	} else {
		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
 800cb62:	6a3a      	ldr	r2, [r7, #32]
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	3327      	adds	r3, #39	; 0x27
 800cb68:	b2d2      	uxtb	r2, r2
 800cb6a:	701a      	strb	r2, [r3, #0]
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	0a1b      	lsrs	r3, r3, #8
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	3328      	adds	r3, #40	; 0x28
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	0c1a      	lsrs	r2, r3, #16
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	3329      	adds	r3, #41	; 0x29
 800cb84:	b2d2      	uxtb	r2, r2
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	0e1a      	lsrs	r2, r3, #24
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	332a      	adds	r3, #42	; 0x2a
 800cb90:	b2d2      	uxtb	r2, r2
 800cb92:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	3316      	adds	r3, #22
 800cb98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	0a1b      	lsrs	r3, r3, #8
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	3317      	adds	r3, #23
 800cbaa:	b2d2      	uxtb	r2, r2
 800cbac:	701a      	strb	r2, [r3, #0]
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	3324      	adds	r3, #36	; 0x24
 800cbb2:	2280      	movs	r2, #128	; 0x80
 800cbb4:	701a      	strb	r2, [r3, #0]
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	3326      	adds	r3, #38	; 0x26
 800cbba:	2229      	movs	r2, #41	; 0x29
 800cbbc:	701a      	strb	r2, [r3, #0]
		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	332b      	adds	r3, #43	; 0x2b
 800cbc2:	2213      	movs	r2, #19
 800cbc4:	4978      	ldr	r1, [pc, #480]	; (800cda8 <f_mkfs+0x830>)
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fb ff3c 	bl	8008a44 <mem_cpy>
	}
	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbd2:	2255      	movs	r2, #85	; 0x55
 800cbd4:	701a      	strb	r2, [r3, #0]
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbdc:	22aa      	movs	r2, #170	; 0xaa
 800cbde:	701a      	strb	r2, [r3, #0]
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
 800cbe0:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbea:	f7fb feed 	bl	80089c8 <disk_write>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <f_mkfs+0x680>
		return FR_DISK_ERR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e172      	b.n	800cede <f_mkfs+0x966>
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
 800cbf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbfc:	2b03      	cmp	r3, #3
 800cbfe:	d107      	bne.n	800cc10 <f_mkfs+0x698>
		disk_write(pdrv, tbl, b_vol + 6, 1);
 800cc00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc02:	1d9a      	adds	r2, r3, #6
 800cc04:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800cc08:	2301      	movs	r3, #1
 800cc0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc0c:	f7fb fedc 	bl	80089c8 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
 800cc10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc12:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800cc14:	2300      	movs	r3, #0
 800cc16:	663b      	str	r3, [r7, #96]	; 0x60
 800cc18:	e09b      	b.n	800cd52 <f_mkfs+0x7da>
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
 800cc1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc1e:	2100      	movs	r1, #0
 800cc20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc22:	f7fb ff2d 	bl	8008a80 <mem_set>
		n = md;								/* Media descriptor byte */
 800cc26:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cc2a:	623b      	str	r3, [r7, #32]
		if (fmt != FS_FAT32) {
 800cc2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d023      	beq.n	800cc7c <f_mkfs+0x704>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 800cc34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d101      	bne.n	800cc40 <f_mkfs+0x6c8>
 800cc3c:	4a5b      	ldr	r2, [pc, #364]	; (800cdac <f_mkfs+0x834>)
 800cc3e:	e001      	b.n	800cc44 <f_mkfs+0x6cc>
 800cc40:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	623b      	str	r3, [r7, #32]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	0a1b      	lsrs	r3, r3, #8
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	0c1a      	lsrs	r2, r3, #16
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	3302      	adds	r3, #2
 800cc6a:	b2d2      	uxtb	r2, r2
 800cc6c:	701a      	strb	r2, [r3, #0]
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	0e1a      	lsrs	r2, r3, #24
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	3303      	adds	r3, #3
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]
 800cc7a:	e03b      	b.n	800ccf4 <f_mkfs+0x77c>
		} else {
			n |= 0xFFFFFF00;
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800cc82:	623b      	str	r3, [r7, #32]
			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	701a      	strb	r2, [r3, #0]
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	0a1b      	lsrs	r3, r3, #8
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	3301      	adds	r3, #1
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	6a3b      	ldr	r3, [r7, #32]
 800cc9e:	0c1a      	lsrs	r2, r3, #16
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	3302      	adds	r3, #2
 800cca4:	b2d2      	uxtb	r2, r2
 800cca6:	701a      	strb	r2, [r3, #0]
 800cca8:	6a3b      	ldr	r3, [r7, #32]
 800ccaa:	0e1a      	lsrs	r2, r3, #24
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	3303      	adds	r3, #3
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 4, 0xFFFFFFFF);
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	22ff      	movs	r2, #255	; 0xff
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	3305      	adds	r3, #5
 800ccc0:	22ff      	movs	r2, #255	; 0xff
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	3306      	adds	r3, #6
 800ccc8:	22ff      	movs	r2, #255	; 0xff
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	3307      	adds	r3, #7
 800ccd0:	22ff      	movs	r2, #255	; 0xff
 800ccd2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	22ff      	movs	r2, #255	; 0xff
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	3309      	adds	r3, #9
 800cce0:	22ff      	movs	r2, #255	; 0xff
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	330a      	adds	r3, #10
 800cce8:	22ff      	movs	r2, #255	; 0xff
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	330b      	adds	r3, #11
 800ccf0:	220f      	movs	r2, #15
 800ccf2:	701a      	strb	r2, [r3, #0]
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800ccf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccf6:	1c53      	adds	r3, r2, #1
 800ccf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccfa:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800ccfe:	2301      	movs	r3, #1
 800cd00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd02:	f7fb fe61 	bl	80089c8 <disk_write>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <f_mkfs+0x798>
			return FR_DISK_ERR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e0e6      	b.n	800cede <f_mkfs+0x966>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
 800cd10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd14:	2100      	movs	r1, #0
 800cd16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd18:	f7fb feb2 	bl	8008a80 <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	623b      	str	r3, [r7, #32]
 800cd20:	e010      	b.n	800cd44 <f_mkfs+0x7cc>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800cd22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd24:	1c53      	adds	r3, r2, #1
 800cd26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd28:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd30:	f7fb fe4a 	bl	80089c8 <disk_write>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <f_mkfs+0x7c6>
				return FR_DISK_ERR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e0cf      	b.n	800cede <f_mkfs+0x966>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	3301      	adds	r3, #1
 800cd42:	623b      	str	r3, [r7, #32]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d8ea      	bhi.n	800cd22 <f_mkfs+0x7aa>
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
 800cd4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd4e:	3301      	adds	r3, #1
 800cd50:	663b      	str	r3, [r7, #96]	; 0x60
 800cd52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f43f af60 	beq.w	800cc1a <f_mkfs+0x6a2>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
 800cd5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d101      	bne.n	800cd66 <f_mkfs+0x7ee>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	e000      	b.n	800cd68 <f_mkfs+0x7f0>
 800cd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd68:	663b      	str	r3, [r7, #96]	; 0x60
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
 800cd6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd6c:	1c53      	adds	r3, r2, #1
 800cd6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd70:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800cd74:	2301      	movs	r3, #1
 800cd76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd78:	f7fb fe26 	bl	80089c8 <disk_write>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <f_mkfs+0x80e>
			return FR_DISK_ERR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e0ab      	b.n	800cede <f_mkfs+0x966>
	} while (--i);
 800cd86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	663b      	str	r3, [r7, #96]	; 0x60
 800cd8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1eb      	bne.n	800cd6a <f_mkfs+0x7f2>

#if _USE_TRIM	/* Erase data area if needed */
	{
		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
 800cd92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cd9a:	2b03      	cmp	r3, #3
 800cd9c:	d108      	bne.n	800cdb0 <f_mkfs+0x838>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e007      	b.n	800cdb2 <f_mkfs+0x83a>
 800cda2:	bf00      	nop
 800cda4:	0801277c 	.word	0x0801277c
 800cda8:	08012790 	.word	0x08012790
 800cdac:	00ffff00 	.word	0x00ffff00
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	fb03 f202 	mul.w	r2, r3, r2
 800cdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdbe:	4413      	add	r3, r2
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	61bb      	str	r3, [r7, #24]
		disk_ioctl(pdrv, CTRL_TRIM, eb);
 800cdc4:	f107 0214 	add.w	r2, r7, #20
 800cdc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdcc:	2104      	movs	r1, #4
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fb fe1a 	bl	8008a08 <disk_ioctl>
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
 800cdd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	d173      	bne.n	800cec4 <f_mkfs+0x94c>
		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	2252      	movs	r2, #82	; 0x52
 800cde0:	701a      	strb	r2, [r3, #0]
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	3301      	adds	r3, #1
 800cde6:	2252      	movs	r2, #82	; 0x52
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	3302      	adds	r3, #2
 800cdee:	2261      	movs	r2, #97	; 0x61
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	3303      	adds	r3, #3
 800cdf6:	2241      	movs	r2, #65	; 0x41
 800cdf8:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce00:	2272      	movs	r2, #114	; 0x72
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	f203 13e5 	addw	r3, r3, #485	; 0x1e5
 800ce0a:	2272      	movs	r2, #114	; 0x72
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 800ce14:	2241      	movs	r2, #65	; 0x41
 800ce16:	701a      	strb	r2, [r3, #0]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	f203 13e7 	addw	r3, r3, #487	; 0x1e7
 800ce1e:	2261      	movs	r2, #97	; 0x61
 800ce20:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce2c:	3a01      	subs	r2, #1
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	3b01      	subs	r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	0a1b      	lsrs	r3, r3, #8
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	f203 13e9 	addw	r3, r3, #489	; 0x1e9
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	0c1a      	lsrs	r2, r3, #16
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 800ce54:	b2d2      	uxtb	r2, r2
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	0e1a      	lsrs	r2, r3, #24
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	f203 13eb 	addw	r3, r3, #491	; 0x1eb
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	701a      	strb	r2, [r3, #0]
		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce6e:	2202      	movs	r2, #2
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	f203 13ed 	addw	r3, r3, #493	; 0x1ed
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 800ce82:	2200      	movs	r2, #0
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	701a      	strb	r2, [r3, #0]
		ST_WORD(tbl + BS_55AA, 0xAA55);
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce96:	2255      	movs	r2, #85	; 0x55
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cea0:	22aa      	movs	r2, #170	; 0xaa
 800cea2:	701a      	strb	r2, [r3, #0]
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
 800cea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800ceac:	2301      	movs	r3, #1
 800ceae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ceb0:	f7fb fd8a 	bl	80089c8 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
 800ceb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceb6:	1dda      	adds	r2, r3, #7
 800ceb8:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 800cebc:	2301      	movs	r3, #1
 800cebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec0:	f7fb fd82 	bl	80089c8 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
 800cec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cec8:	2200      	movs	r2, #0
 800ceca:	2100      	movs	r1, #0
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fb fd9b 	bl	8008a08 <disk_ioctl>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	bf14      	ite	ne
 800ced8:	2301      	movne	r3, #1
 800ceda:	2300      	moveq	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3768      	adds	r7, #104	; 0x68
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop

0800cee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b087      	sub	sp, #28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cef6:	2301      	movs	r3, #1
 800cef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cefe:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf00:	7a5b      	ldrb	r3, [r3, #9]
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d831      	bhi.n	800cf6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf08:	4b1b      	ldr	r3, [pc, #108]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf0a:	7a5b      	ldrb	r3, [r3, #9]
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4b19      	ldr	r3, [pc, #100]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf12:	2100      	movs	r1, #0
 800cf14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cf16:	4b18      	ldr	r3, [pc, #96]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf18:	7a5b      	ldrb	r3, [r3, #9]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	4a16      	ldr	r2, [pc, #88]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf28:	7a5b      	ldrb	r3, [r3, #9]
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf30:	4413      	add	r3, r2
 800cf32:	79fa      	ldrb	r2, [r7, #7]
 800cf34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cf36:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf38:	7a5b      	ldrb	r3, [r3, #9]
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	b2d1      	uxtb	r1, r2
 800cf40:	4a0d      	ldr	r2, [pc, #52]	; (800cf78 <FATFS_LinkDriverEx+0x90>)
 800cf42:	7251      	strb	r1, [r2, #9]
 800cf44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cf46:	7dbb      	ldrb	r3, [r7, #22]
 800cf48:	3330      	adds	r3, #48	; 0x30
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3301      	adds	r3, #1
 800cf54:	223a      	movs	r2, #58	; 0x3a
 800cf56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	3302      	adds	r3, #2
 800cf5c:	222f      	movs	r2, #47	; 0x2f
 800cf5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	3303      	adds	r3, #3
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	371c      	adds	r7, #28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr
 800cf78:	200045c0 	.word	0x200045c0

0800cf7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf86:	2200      	movs	r2, #0
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff ffac 	bl	800cee8 <FATFS_LinkDriverEx>
 800cf90:	4603      	mov	r3, r0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b089      	sub	sp, #36	; 0x24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	6039      	str	r1, [r7, #0]
 800cfa6:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800cfa8:	88fb      	ldrh	r3, [r7, #6]
 800cfaa:	2b7f      	cmp	r3, #127	; 0x7f
 800cfac:	d802      	bhi.n	800cfb4 <ff_convert+0x18>
		c = chr;
 800cfae:	88fb      	ldrh	r3, [r7, #6]
 800cfb0:	837b      	strh	r3, [r7, #26]
 800cfb2:	e045      	b.n	800d040 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEMCP to unicode */
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <ff_convert+0x2a>
			p = oem2uni;
 800cfba:	4b24      	ldr	r3, [pc, #144]	; (800d04c <ff_convert+0xb0>)
 800cfbc:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800cfbe:	f244 2398 	movw	r3, #17048	; 0x4298
 800cfc2:	60bb      	str	r3, [r7, #8]
 800cfc4:	e004      	b.n	800cfd0 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800cfc6:	4b22      	ldr	r3, [pc, #136]	; (800d050 <ff_convert+0xb4>)
 800cfc8:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800cfca:	f244 2398 	movw	r3, #17048	; 0x4298
 800cfce:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	e021      	b.n	800d01e <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	0fda      	lsrs	r2, r3, #31
 800cfe2:	4413      	add	r3, r2
 800cfe4:	105b      	asrs	r3, r3, #1
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	4413      	add	r3, r2
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	88fa      	ldrh	r2, [r7, #6]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d013      	beq.n	800d026 <ff_convert+0x8a>
			if (chr > p[i * 2])
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	69fa      	ldr	r2, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	88fa      	ldrh	r2, [r7, #6]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d902      	bls.n	800d014 <ff_convert+0x78>
				li = i;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	e001      	b.n	800d018 <ff_convert+0x7c>
			else
				hi = i;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	613b      	str	r3, [r7, #16]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1da      	bne.n	800cfda <ff_convert+0x3e>
 800d024:	e000      	b.n	800d028 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800d026:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d006      	beq.n	800d03c <ff_convert+0xa0>
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	3302      	adds	r3, #2
 800d034:	69fa      	ldr	r2, [r7, #28]
 800d036:	4413      	add	r3, r2
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	e000      	b.n	800d03e <ff_convert+0xa2>
 800d03c:	2300      	movs	r3, #0
 800d03e:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800d040:	8b7b      	ldrh	r3, [r7, #26]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3724      	adds	r7, #36	; 0x24
 800d046:	46bd      	mov	sp, r7
 800d048:	bc80      	pop	{r7}
 800d04a:	4770      	bx	lr
 800d04c:	08023274 	.word	0x08023274
 800d050:	08012810 	.word	0x08012810

0800d054 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800d05e:	2300      	movs	r3, #0
 800d060:	60fb      	str	r3, [r7, #12]
 800d062:	e002      	b.n	800d06a <ff_wtoupper+0x16>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3301      	adds	r3, #1
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	4a0f      	ldr	r2, [pc, #60]	; (800d0a8 <ff_wtoupper+0x54>)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <ff_wtoupper+0x30>
 800d076:	4a0c      	ldr	r2, [pc, #48]	; (800d0a8 <ff_wtoupper+0x54>)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d07e:	88fa      	ldrh	r2, [r7, #6]
 800d080:	429a      	cmp	r2, r3
 800d082:	d1ef      	bne.n	800d064 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800d084:	4a08      	ldr	r2, [pc, #32]	; (800d0a8 <ff_wtoupper+0x54>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d004      	beq.n	800d09a <ff_wtoupper+0x46>
 800d090:	4a06      	ldr	r2, [pc, #24]	; (800d0ac <ff_wtoupper+0x58>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d098:	e000      	b.n	800d09c <ff_wtoupper+0x48>
 800d09a:	88fb      	ldrh	r3, [r7, #6]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bc80      	pop	{r7}
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	08033cd8 	.word	0x08033cd8
 800d0ac:	08033eb8 	.word	0x08033eb8

0800d0b0 <atoi>:
 800d0b0:	220a      	movs	r2, #10
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f001 be7c 	b.w	800edb0 <strtol>

0800d0b8 <__errno>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	; (800d0c0 <__errno+0x8>)
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	20000054 	.word	0x20000054

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	2600      	movs	r6, #0
 800d0c8:	4d0c      	ldr	r5, [pc, #48]	; (800d0fc <__libc_init_array+0x38>)
 800d0ca:	4c0d      	ldr	r4, [pc, #52]	; (800d100 <__libc_init_array+0x3c>)
 800d0cc:	1b64      	subs	r4, r4, r5
 800d0ce:	10a4      	asrs	r4, r4, #2
 800d0d0:	42a6      	cmp	r6, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	f004 fdaa 	bl	8011c2c <_init>
 800d0d8:	2600      	movs	r6, #0
 800d0da:	4d0a      	ldr	r5, [pc, #40]	; (800d104 <__libc_init_array+0x40>)
 800d0dc:	4c0a      	ldr	r4, [pc, #40]	; (800d108 <__libc_init_array+0x44>)
 800d0de:	1b64      	subs	r4, r4, r5
 800d0e0:	10a4      	asrs	r4, r4, #2
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ec:	4798      	blx	r3
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f6:	4798      	blx	r3
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	080345a8 	.word	0x080345a8
 800d100:	080345a8 	.word	0x080345a8
 800d104:	080345a8 	.word	0x080345a8
 800d108:	080345ac 	.word	0x080345ac

0800d10c <memcpy>:
 800d10c:	440a      	add	r2, r1
 800d10e:	4291      	cmp	r1, r2
 800d110:	f100 33ff 	add.w	r3, r0, #4294967295
 800d114:	d100      	bne.n	800d118 <memcpy+0xc>
 800d116:	4770      	bx	lr
 800d118:	b510      	push	{r4, lr}
 800d11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d11e:	4291      	cmp	r1, r2
 800d120:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d124:	d1f9      	bne.n	800d11a <memcpy+0xe>
 800d126:	bd10      	pop	{r4, pc}

0800d128 <memset>:
 800d128:	4603      	mov	r3, r0
 800d12a:	4402      	add	r2, r0
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d100      	bne.n	800d132 <memset+0xa>
 800d130:	4770      	bx	lr
 800d132:	f803 1b01 	strb.w	r1, [r3], #1
 800d136:	e7f9      	b.n	800d12c <memset+0x4>

0800d138 <__cvt>:
 800d138:	2b00      	cmp	r3, #0
 800d13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d13e:	461f      	mov	r7, r3
 800d140:	bfbb      	ittet	lt
 800d142:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d146:	461f      	movlt	r7, r3
 800d148:	2300      	movge	r3, #0
 800d14a:	232d      	movlt	r3, #45	; 0x2d
 800d14c:	b088      	sub	sp, #32
 800d14e:	4614      	mov	r4, r2
 800d150:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d152:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d154:	7013      	strb	r3, [r2, #0]
 800d156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d158:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d15c:	f023 0820 	bic.w	r8, r3, #32
 800d160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d164:	d005      	beq.n	800d172 <__cvt+0x3a>
 800d166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d16a:	d100      	bne.n	800d16e <__cvt+0x36>
 800d16c:	3501      	adds	r5, #1
 800d16e:	2302      	movs	r3, #2
 800d170:	e000      	b.n	800d174 <__cvt+0x3c>
 800d172:	2303      	movs	r3, #3
 800d174:	aa07      	add	r2, sp, #28
 800d176:	9204      	str	r2, [sp, #16]
 800d178:	aa06      	add	r2, sp, #24
 800d17a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d17e:	e9cd 3500 	strd	r3, r5, [sp]
 800d182:	4622      	mov	r2, r4
 800d184:	463b      	mov	r3, r7
 800d186:	f001 ff87 	bl	800f098 <_dtoa_r>
 800d18a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d18e:	4606      	mov	r6, r0
 800d190:	d102      	bne.n	800d198 <__cvt+0x60>
 800d192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d194:	07db      	lsls	r3, r3, #31
 800d196:	d522      	bpl.n	800d1de <__cvt+0xa6>
 800d198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d19c:	eb06 0905 	add.w	r9, r6, r5
 800d1a0:	d110      	bne.n	800d1c4 <__cvt+0x8c>
 800d1a2:	7833      	ldrb	r3, [r6, #0]
 800d1a4:	2b30      	cmp	r3, #48	; 0x30
 800d1a6:	d10a      	bne.n	800d1be <__cvt+0x86>
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f3 fc66 	bl	8000a80 <__aeabi_dcmpeq>
 800d1b4:	b918      	cbnz	r0, 800d1be <__cvt+0x86>
 800d1b6:	f1c5 0501 	rsb	r5, r5, #1
 800d1ba:	f8ca 5000 	str.w	r5, [sl]
 800d1be:	f8da 3000 	ldr.w	r3, [sl]
 800d1c2:	4499      	add	r9, r3
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 fc58 	bl	8000a80 <__aeabi_dcmpeq>
 800d1d0:	b108      	cbz	r0, 800d1d6 <__cvt+0x9e>
 800d1d2:	f8cd 901c 	str.w	r9, [sp, #28]
 800d1d6:	2230      	movs	r2, #48	; 0x30
 800d1d8:	9b07      	ldr	r3, [sp, #28]
 800d1da:	454b      	cmp	r3, r9
 800d1dc:	d307      	bcc.n	800d1ee <__cvt+0xb6>
 800d1de:	4630      	mov	r0, r6
 800d1e0:	9b07      	ldr	r3, [sp, #28]
 800d1e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d1e4:	1b9b      	subs	r3, r3, r6
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	b008      	add	sp, #32
 800d1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ee:	1c59      	adds	r1, r3, #1
 800d1f0:	9107      	str	r1, [sp, #28]
 800d1f2:	701a      	strb	r2, [r3, #0]
 800d1f4:	e7f0      	b.n	800d1d8 <__cvt+0xa0>

0800d1f6 <__exponent>:
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1fa:	2900      	cmp	r1, #0
 800d1fc:	f803 2b02 	strb.w	r2, [r3], #2
 800d200:	bfb6      	itet	lt
 800d202:	222d      	movlt	r2, #45	; 0x2d
 800d204:	222b      	movge	r2, #43	; 0x2b
 800d206:	4249      	neglt	r1, r1
 800d208:	2909      	cmp	r1, #9
 800d20a:	7042      	strb	r2, [r0, #1]
 800d20c:	dd2b      	ble.n	800d266 <__exponent+0x70>
 800d20e:	f10d 0407 	add.w	r4, sp, #7
 800d212:	46a4      	mov	ip, r4
 800d214:	270a      	movs	r7, #10
 800d216:	fb91 f6f7 	sdiv	r6, r1, r7
 800d21a:	460a      	mov	r2, r1
 800d21c:	46a6      	mov	lr, r4
 800d21e:	fb07 1516 	mls	r5, r7, r6, r1
 800d222:	2a63      	cmp	r2, #99	; 0x63
 800d224:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d228:	4631      	mov	r1, r6
 800d22a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d22e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d232:	dcf0      	bgt.n	800d216 <__exponent+0x20>
 800d234:	3130      	adds	r1, #48	; 0x30
 800d236:	f1ae 0502 	sub.w	r5, lr, #2
 800d23a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d23e:	4629      	mov	r1, r5
 800d240:	1c44      	adds	r4, r0, #1
 800d242:	4561      	cmp	r1, ip
 800d244:	d30a      	bcc.n	800d25c <__exponent+0x66>
 800d246:	f10d 0209 	add.w	r2, sp, #9
 800d24a:	eba2 020e 	sub.w	r2, r2, lr
 800d24e:	4565      	cmp	r5, ip
 800d250:	bf88      	it	hi
 800d252:	2200      	movhi	r2, #0
 800d254:	4413      	add	r3, r2
 800d256:	1a18      	subs	r0, r3, r0
 800d258:	b003      	add	sp, #12
 800d25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d260:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d264:	e7ed      	b.n	800d242 <__exponent+0x4c>
 800d266:	2330      	movs	r3, #48	; 0x30
 800d268:	3130      	adds	r1, #48	; 0x30
 800d26a:	7083      	strb	r3, [r0, #2]
 800d26c:	70c1      	strb	r1, [r0, #3]
 800d26e:	1d03      	adds	r3, r0, #4
 800d270:	e7f1      	b.n	800d256 <__exponent+0x60>
	...

0800d274 <_printf_float>:
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	b091      	sub	sp, #68	; 0x44
 800d27a:	460c      	mov	r4, r1
 800d27c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d280:	4616      	mov	r6, r2
 800d282:	461f      	mov	r7, r3
 800d284:	4605      	mov	r5, r0
 800d286:	f003 fa21 	bl	80106cc <_localeconv_r>
 800d28a:	6803      	ldr	r3, [r0, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	9309      	str	r3, [sp, #36]	; 0x24
 800d290:	f7f2 ffca 	bl	8000228 <strlen>
 800d294:	2300      	movs	r3, #0
 800d296:	930e      	str	r3, [sp, #56]	; 0x38
 800d298:	f8d8 3000 	ldr.w	r3, [r8]
 800d29c:	900a      	str	r0, [sp, #40]	; 0x28
 800d29e:	3307      	adds	r3, #7
 800d2a0:	f023 0307 	bic.w	r3, r3, #7
 800d2a4:	f103 0208 	add.w	r2, r3, #8
 800d2a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d2ac:	f8d4 b000 	ldr.w	fp, [r4]
 800d2b0:	f8c8 2000 	str.w	r2, [r8]
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d2c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	4b9c      	ldr	r3, [pc, #624]	; (800d540 <_printf_float+0x2cc>)
 800d2ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2d0:	f7f3 fc08 	bl	8000ae4 <__aeabi_dcmpun>
 800d2d4:	bb70      	cbnz	r0, 800d334 <_printf_float+0xc0>
 800d2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4b98      	ldr	r3, [pc, #608]	; (800d540 <_printf_float+0x2cc>)
 800d2de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2e0:	f7f3 fbe2 	bl	8000aa8 <__aeabi_dcmple>
 800d2e4:	bb30      	cbnz	r0, 800d334 <_printf_float+0xc0>
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4651      	mov	r1, sl
 800d2ee:	f7f3 fbd1 	bl	8000a94 <__aeabi_dcmplt>
 800d2f2:	b110      	cbz	r0, 800d2fa <_printf_float+0x86>
 800d2f4:	232d      	movs	r3, #45	; 0x2d
 800d2f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2fa:	4b92      	ldr	r3, [pc, #584]	; (800d544 <_printf_float+0x2d0>)
 800d2fc:	4892      	ldr	r0, [pc, #584]	; (800d548 <_printf_float+0x2d4>)
 800d2fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d302:	bf94      	ite	ls
 800d304:	4698      	movls	r8, r3
 800d306:	4680      	movhi	r8, r0
 800d308:	2303      	movs	r3, #3
 800d30a:	f04f 0a00 	mov.w	sl, #0
 800d30e:	6123      	str	r3, [r4, #16]
 800d310:	f02b 0304 	bic.w	r3, fp, #4
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	4633      	mov	r3, r6
 800d318:	4621      	mov	r1, r4
 800d31a:	4628      	mov	r0, r5
 800d31c:	9700      	str	r7, [sp, #0]
 800d31e:	aa0f      	add	r2, sp, #60	; 0x3c
 800d320:	f000 f9d4 	bl	800d6cc <_printf_common>
 800d324:	3001      	adds	r0, #1
 800d326:	f040 8090 	bne.w	800d44a <_printf_float+0x1d6>
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295
 800d32e:	b011      	add	sp, #68	; 0x44
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	4642      	mov	r2, r8
 800d336:	4653      	mov	r3, sl
 800d338:	4640      	mov	r0, r8
 800d33a:	4651      	mov	r1, sl
 800d33c:	f7f3 fbd2 	bl	8000ae4 <__aeabi_dcmpun>
 800d340:	b148      	cbz	r0, 800d356 <_printf_float+0xe2>
 800d342:	f1ba 0f00 	cmp.w	sl, #0
 800d346:	bfb8      	it	lt
 800d348:	232d      	movlt	r3, #45	; 0x2d
 800d34a:	4880      	ldr	r0, [pc, #512]	; (800d54c <_printf_float+0x2d8>)
 800d34c:	bfb8      	it	lt
 800d34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d352:	4b7f      	ldr	r3, [pc, #508]	; (800d550 <_printf_float+0x2dc>)
 800d354:	e7d3      	b.n	800d2fe <_printf_float+0x8a>
 800d356:	6863      	ldr	r3, [r4, #4]
 800d358:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	d142      	bne.n	800d3e6 <_printf_float+0x172>
 800d360:	2306      	movs	r3, #6
 800d362:	6063      	str	r3, [r4, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	9206      	str	r2, [sp, #24]
 800d368:	aa0e      	add	r2, sp, #56	; 0x38
 800d36a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d36e:	aa0d      	add	r2, sp, #52	; 0x34
 800d370:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d374:	9203      	str	r2, [sp, #12]
 800d376:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d37a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	6863      	ldr	r3, [r4, #4]
 800d382:	4642      	mov	r2, r8
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	4628      	mov	r0, r5
 800d388:	4653      	mov	r3, sl
 800d38a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d38c:	f7ff fed4 	bl	800d138 <__cvt>
 800d390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d392:	4680      	mov	r8, r0
 800d394:	2947      	cmp	r1, #71	; 0x47
 800d396:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d398:	d108      	bne.n	800d3ac <_printf_float+0x138>
 800d39a:	1cc8      	adds	r0, r1, #3
 800d39c:	db02      	blt.n	800d3a4 <_printf_float+0x130>
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	4299      	cmp	r1, r3
 800d3a2:	dd40      	ble.n	800d426 <_printf_float+0x1b2>
 800d3a4:	f1a9 0902 	sub.w	r9, r9, #2
 800d3a8:	fa5f f989 	uxtb.w	r9, r9
 800d3ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3b0:	d81f      	bhi.n	800d3f2 <_printf_float+0x17e>
 800d3b2:	464a      	mov	r2, r9
 800d3b4:	3901      	subs	r1, #1
 800d3b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3ba:	910d      	str	r1, [sp, #52]	; 0x34
 800d3bc:	f7ff ff1b 	bl	800d1f6 <__exponent>
 800d3c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3c2:	4682      	mov	sl, r0
 800d3c4:	1813      	adds	r3, r2, r0
 800d3c6:	2a01      	cmp	r2, #1
 800d3c8:	6123      	str	r3, [r4, #16]
 800d3ca:	dc02      	bgt.n	800d3d2 <_printf_float+0x15e>
 800d3cc:	6822      	ldr	r2, [r4, #0]
 800d3ce:	07d2      	lsls	r2, r2, #31
 800d3d0:	d501      	bpl.n	800d3d6 <_printf_float+0x162>
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d09b      	beq.n	800d316 <_printf_float+0xa2>
 800d3de:	232d      	movs	r3, #45	; 0x2d
 800d3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3e4:	e797      	b.n	800d316 <_printf_float+0xa2>
 800d3e6:	2947      	cmp	r1, #71	; 0x47
 800d3e8:	d1bc      	bne.n	800d364 <_printf_float+0xf0>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1ba      	bne.n	800d364 <_printf_float+0xf0>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7b7      	b.n	800d362 <_printf_float+0xee>
 800d3f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d3f6:	d118      	bne.n	800d42a <_printf_float+0x1b6>
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	6863      	ldr	r3, [r4, #4]
 800d3fc:	dd0b      	ble.n	800d416 <_printf_float+0x1a2>
 800d3fe:	6121      	str	r1, [r4, #16]
 800d400:	b913      	cbnz	r3, 800d408 <_printf_float+0x194>
 800d402:	6822      	ldr	r2, [r4, #0]
 800d404:	07d0      	lsls	r0, r2, #31
 800d406:	d502      	bpl.n	800d40e <_printf_float+0x19a>
 800d408:	3301      	adds	r3, #1
 800d40a:	440b      	add	r3, r1
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	f04f 0a00 	mov.w	sl, #0
 800d412:	65a1      	str	r1, [r4, #88]	; 0x58
 800d414:	e7df      	b.n	800d3d6 <_printf_float+0x162>
 800d416:	b913      	cbnz	r3, 800d41e <_printf_float+0x1aa>
 800d418:	6822      	ldr	r2, [r4, #0]
 800d41a:	07d2      	lsls	r2, r2, #31
 800d41c:	d501      	bpl.n	800d422 <_printf_float+0x1ae>
 800d41e:	3302      	adds	r3, #2
 800d420:	e7f4      	b.n	800d40c <_printf_float+0x198>
 800d422:	2301      	movs	r3, #1
 800d424:	e7f2      	b.n	800d40c <_printf_float+0x198>
 800d426:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d42c:	4299      	cmp	r1, r3
 800d42e:	db05      	blt.n	800d43c <_printf_float+0x1c8>
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	6121      	str	r1, [r4, #16]
 800d434:	07d8      	lsls	r0, r3, #31
 800d436:	d5ea      	bpl.n	800d40e <_printf_float+0x19a>
 800d438:	1c4b      	adds	r3, r1, #1
 800d43a:	e7e7      	b.n	800d40c <_printf_float+0x198>
 800d43c:	2900      	cmp	r1, #0
 800d43e:	bfcc      	ite	gt
 800d440:	2201      	movgt	r2, #1
 800d442:	f1c1 0202 	rsble	r2, r1, #2
 800d446:	4413      	add	r3, r2
 800d448:	e7e0      	b.n	800d40c <_printf_float+0x198>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	055a      	lsls	r2, r3, #21
 800d44e:	d407      	bmi.n	800d460 <_printf_float+0x1ec>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	4642      	mov	r2, r8
 800d454:	4631      	mov	r1, r6
 800d456:	4628      	mov	r0, r5
 800d458:	47b8      	blx	r7
 800d45a:	3001      	adds	r0, #1
 800d45c:	d12b      	bne.n	800d4b6 <_printf_float+0x242>
 800d45e:	e764      	b.n	800d32a <_printf_float+0xb6>
 800d460:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d464:	f240 80dd 	bls.w	800d622 <_printf_float+0x3ae>
 800d468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d46c:	2200      	movs	r2, #0
 800d46e:	2300      	movs	r3, #0
 800d470:	f7f3 fb06 	bl	8000a80 <__aeabi_dcmpeq>
 800d474:	2800      	cmp	r0, #0
 800d476:	d033      	beq.n	800d4e0 <_printf_float+0x26c>
 800d478:	2301      	movs	r3, #1
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	4a35      	ldr	r2, [pc, #212]	; (800d554 <_printf_float+0x2e0>)
 800d480:	47b8      	blx	r7
 800d482:	3001      	adds	r0, #1
 800d484:	f43f af51 	beq.w	800d32a <_printf_float+0xb6>
 800d488:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d48c:	429a      	cmp	r2, r3
 800d48e:	db02      	blt.n	800d496 <_printf_float+0x222>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	07d8      	lsls	r0, r3, #31
 800d494:	d50f      	bpl.n	800d4b6 <_printf_float+0x242>
 800d496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d49a:	4631      	mov	r1, r6
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f43f af42 	beq.w	800d32a <_printf_float+0xb6>
 800d4a6:	f04f 0800 	mov.w	r8, #0
 800d4aa:	f104 091a 	add.w	r9, r4, #26
 800d4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	4543      	cmp	r3, r8
 800d4b4:	dc09      	bgt.n	800d4ca <_printf_float+0x256>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	079b      	lsls	r3, r3, #30
 800d4ba:	f100 8102 	bmi.w	800d6c2 <_printf_float+0x44e>
 800d4be:	68e0      	ldr	r0, [r4, #12]
 800d4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4c2:	4298      	cmp	r0, r3
 800d4c4:	bfb8      	it	lt
 800d4c6:	4618      	movlt	r0, r3
 800d4c8:	e731      	b.n	800d32e <_printf_float+0xba>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	464a      	mov	r2, r9
 800d4ce:	4631      	mov	r1, r6
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	47b8      	blx	r7
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	f43f af28 	beq.w	800d32a <_printf_float+0xb6>
 800d4da:	f108 0801 	add.w	r8, r8, #1
 800d4de:	e7e6      	b.n	800d4ae <_printf_float+0x23a>
 800d4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dc38      	bgt.n	800d558 <_printf_float+0x2e4>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	4a19      	ldr	r2, [pc, #100]	; (800d554 <_printf_float+0x2e0>)
 800d4ee:	47b8      	blx	r7
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	f43f af1a 	beq.w	800d32a <_printf_float+0xb6>
 800d4f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	d102      	bne.n	800d504 <_printf_float+0x290>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	07d9      	lsls	r1, r3, #31
 800d502:	d5d8      	bpl.n	800d4b6 <_printf_float+0x242>
 800d504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d508:	4631      	mov	r1, r6
 800d50a:	4628      	mov	r0, r5
 800d50c:	47b8      	blx	r7
 800d50e:	3001      	adds	r0, #1
 800d510:	f43f af0b 	beq.w	800d32a <_printf_float+0xb6>
 800d514:	f04f 0900 	mov.w	r9, #0
 800d518:	f104 0a1a 	add.w	sl, r4, #26
 800d51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d51e:	425b      	negs	r3, r3
 800d520:	454b      	cmp	r3, r9
 800d522:	dc01      	bgt.n	800d528 <_printf_float+0x2b4>
 800d524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d526:	e794      	b.n	800d452 <_printf_float+0x1de>
 800d528:	2301      	movs	r3, #1
 800d52a:	4652      	mov	r2, sl
 800d52c:	4631      	mov	r1, r6
 800d52e:	4628      	mov	r0, r5
 800d530:	47b8      	blx	r7
 800d532:	3001      	adds	r0, #1
 800d534:	f43f aef9 	beq.w	800d32a <_printf_float+0xb6>
 800d538:	f109 0901 	add.w	r9, r9, #1
 800d53c:	e7ee      	b.n	800d51c <_printf_float+0x2a8>
 800d53e:	bf00      	nop
 800d540:	7fefffff 	.word	0x7fefffff
 800d544:	080341a0 	.word	0x080341a0
 800d548:	080341a4 	.word	0x080341a4
 800d54c:	080341ac 	.word	0x080341ac
 800d550:	080341a8 	.word	0x080341a8
 800d554:	080341b0 	.word	0x080341b0
 800d558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d55a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d55c:	429a      	cmp	r2, r3
 800d55e:	bfa8      	it	ge
 800d560:	461a      	movge	r2, r3
 800d562:	2a00      	cmp	r2, #0
 800d564:	4691      	mov	r9, r2
 800d566:	dc37      	bgt.n	800d5d8 <_printf_float+0x364>
 800d568:	f04f 0b00 	mov.w	fp, #0
 800d56c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d570:	f104 021a 	add.w	r2, r4, #26
 800d574:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d578:	ebaa 0309 	sub.w	r3, sl, r9
 800d57c:	455b      	cmp	r3, fp
 800d57e:	dc33      	bgt.n	800d5e8 <_printf_float+0x374>
 800d580:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d584:	429a      	cmp	r2, r3
 800d586:	db3b      	blt.n	800d600 <_printf_float+0x38c>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	07da      	lsls	r2, r3, #31
 800d58c:	d438      	bmi.n	800d600 <_printf_float+0x38c>
 800d58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d590:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d592:	eba3 020a 	sub.w	r2, r3, sl
 800d596:	eba3 0901 	sub.w	r9, r3, r1
 800d59a:	4591      	cmp	r9, r2
 800d59c:	bfa8      	it	ge
 800d59e:	4691      	movge	r9, r2
 800d5a0:	f1b9 0f00 	cmp.w	r9, #0
 800d5a4:	dc34      	bgt.n	800d610 <_printf_float+0x39c>
 800d5a6:	f04f 0800 	mov.w	r8, #0
 800d5aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5ae:	f104 0a1a 	add.w	sl, r4, #26
 800d5b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	eba3 0309 	sub.w	r3, r3, r9
 800d5bc:	4543      	cmp	r3, r8
 800d5be:	f77f af7a 	ble.w	800d4b6 <_printf_float+0x242>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	47b8      	blx	r7
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	f43f aeac 	beq.w	800d32a <_printf_float+0xb6>
 800d5d2:	f108 0801 	add.w	r8, r8, #1
 800d5d6:	e7ec      	b.n	800d5b2 <_printf_float+0x33e>
 800d5d8:	4613      	mov	r3, r2
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4642      	mov	r2, r8
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d1c0      	bne.n	800d568 <_printf_float+0x2f4>
 800d5e6:	e6a0      	b.n	800d32a <_printf_float+0xb6>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	920b      	str	r2, [sp, #44]	; 0x2c
 800d5f0:	47b8      	blx	r7
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	f43f ae99 	beq.w	800d32a <_printf_float+0xb6>
 800d5f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5fa:	f10b 0b01 	add.w	fp, fp, #1
 800d5fe:	e7b9      	b.n	800d574 <_printf_float+0x300>
 800d600:	4631      	mov	r1, r6
 800d602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d606:	4628      	mov	r0, r5
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	d1bf      	bne.n	800d58e <_printf_float+0x31a>
 800d60e:	e68c      	b.n	800d32a <_printf_float+0xb6>
 800d610:	464b      	mov	r3, r9
 800d612:	4631      	mov	r1, r6
 800d614:	4628      	mov	r0, r5
 800d616:	eb08 020a 	add.w	r2, r8, sl
 800d61a:	47b8      	blx	r7
 800d61c:	3001      	adds	r0, #1
 800d61e:	d1c2      	bne.n	800d5a6 <_printf_float+0x332>
 800d620:	e683      	b.n	800d32a <_printf_float+0xb6>
 800d622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d624:	2a01      	cmp	r2, #1
 800d626:	dc01      	bgt.n	800d62c <_printf_float+0x3b8>
 800d628:	07db      	lsls	r3, r3, #31
 800d62a:	d537      	bpl.n	800d69c <_printf_float+0x428>
 800d62c:	2301      	movs	r3, #1
 800d62e:	4642      	mov	r2, r8
 800d630:	4631      	mov	r1, r6
 800d632:	4628      	mov	r0, r5
 800d634:	47b8      	blx	r7
 800d636:	3001      	adds	r0, #1
 800d638:	f43f ae77 	beq.w	800d32a <_printf_float+0xb6>
 800d63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d640:	4631      	mov	r1, r6
 800d642:	4628      	mov	r0, r5
 800d644:	47b8      	blx	r7
 800d646:	3001      	adds	r0, #1
 800d648:	f43f ae6f 	beq.w	800d32a <_printf_float+0xb6>
 800d64c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d650:	2200      	movs	r2, #0
 800d652:	2300      	movs	r3, #0
 800d654:	f7f3 fa14 	bl	8000a80 <__aeabi_dcmpeq>
 800d658:	b9d8      	cbnz	r0, 800d692 <_printf_float+0x41e>
 800d65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d65c:	f108 0201 	add.w	r2, r8, #1
 800d660:	3b01      	subs	r3, #1
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	d10e      	bne.n	800d68a <_printf_float+0x416>
 800d66c:	e65d      	b.n	800d32a <_printf_float+0xb6>
 800d66e:	2301      	movs	r3, #1
 800d670:	464a      	mov	r2, r9
 800d672:	4631      	mov	r1, r6
 800d674:	4628      	mov	r0, r5
 800d676:	47b8      	blx	r7
 800d678:	3001      	adds	r0, #1
 800d67a:	f43f ae56 	beq.w	800d32a <_printf_float+0xb6>
 800d67e:	f108 0801 	add.w	r8, r8, #1
 800d682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d684:	3b01      	subs	r3, #1
 800d686:	4543      	cmp	r3, r8
 800d688:	dcf1      	bgt.n	800d66e <_printf_float+0x3fa>
 800d68a:	4653      	mov	r3, sl
 800d68c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d690:	e6e0      	b.n	800d454 <_printf_float+0x1e0>
 800d692:	f04f 0800 	mov.w	r8, #0
 800d696:	f104 091a 	add.w	r9, r4, #26
 800d69a:	e7f2      	b.n	800d682 <_printf_float+0x40e>
 800d69c:	2301      	movs	r3, #1
 800d69e:	4642      	mov	r2, r8
 800d6a0:	e7df      	b.n	800d662 <_printf_float+0x3ee>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	464a      	mov	r2, r9
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	47b8      	blx	r7
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	f43f ae3c 	beq.w	800d32a <_printf_float+0xb6>
 800d6b2:	f108 0801 	add.w	r8, r8, #1
 800d6b6:	68e3      	ldr	r3, [r4, #12]
 800d6b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6ba:	1a5b      	subs	r3, r3, r1
 800d6bc:	4543      	cmp	r3, r8
 800d6be:	dcf0      	bgt.n	800d6a2 <_printf_float+0x42e>
 800d6c0:	e6fd      	b.n	800d4be <_printf_float+0x24a>
 800d6c2:	f04f 0800 	mov.w	r8, #0
 800d6c6:	f104 0919 	add.w	r9, r4, #25
 800d6ca:	e7f4      	b.n	800d6b6 <_printf_float+0x442>

0800d6cc <_printf_common>:
 800d6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	4699      	mov	r9, r3
 800d6d4:	688a      	ldr	r2, [r1, #8]
 800d6d6:	690b      	ldr	r3, [r1, #16]
 800d6d8:	4607      	mov	r7, r0
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	bfb8      	it	lt
 800d6de:	4613      	movlt	r3, r2
 800d6e0:	6033      	str	r3, [r6, #0]
 800d6e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6ec:	b10a      	cbz	r2, 800d6f2 <_printf_common+0x26>
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	6033      	str	r3, [r6, #0]
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	0699      	lsls	r1, r3, #26
 800d6f6:	bf42      	ittt	mi
 800d6f8:	6833      	ldrmi	r3, [r6, #0]
 800d6fa:	3302      	addmi	r3, #2
 800d6fc:	6033      	strmi	r3, [r6, #0]
 800d6fe:	6825      	ldr	r5, [r4, #0]
 800d700:	f015 0506 	ands.w	r5, r5, #6
 800d704:	d106      	bne.n	800d714 <_printf_common+0x48>
 800d706:	f104 0a19 	add.w	sl, r4, #25
 800d70a:	68e3      	ldr	r3, [r4, #12]
 800d70c:	6832      	ldr	r2, [r6, #0]
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	42ab      	cmp	r3, r5
 800d712:	dc28      	bgt.n	800d766 <_printf_common+0x9a>
 800d714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d718:	1e13      	subs	r3, r2, #0
 800d71a:	6822      	ldr	r2, [r4, #0]
 800d71c:	bf18      	it	ne
 800d71e:	2301      	movne	r3, #1
 800d720:	0692      	lsls	r2, r2, #26
 800d722:	d42d      	bmi.n	800d780 <_printf_common+0xb4>
 800d724:	4649      	mov	r1, r9
 800d726:	4638      	mov	r0, r7
 800d728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d72c:	47c0      	blx	r8
 800d72e:	3001      	adds	r0, #1
 800d730:	d020      	beq.n	800d774 <_printf_common+0xa8>
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	68e5      	ldr	r5, [r4, #12]
 800d736:	f003 0306 	and.w	r3, r3, #6
 800d73a:	2b04      	cmp	r3, #4
 800d73c:	bf18      	it	ne
 800d73e:	2500      	movne	r5, #0
 800d740:	6832      	ldr	r2, [r6, #0]
 800d742:	f04f 0600 	mov.w	r6, #0
 800d746:	68a3      	ldr	r3, [r4, #8]
 800d748:	bf08      	it	eq
 800d74a:	1aad      	subeq	r5, r5, r2
 800d74c:	6922      	ldr	r2, [r4, #16]
 800d74e:	bf08      	it	eq
 800d750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d754:	4293      	cmp	r3, r2
 800d756:	bfc4      	itt	gt
 800d758:	1a9b      	subgt	r3, r3, r2
 800d75a:	18ed      	addgt	r5, r5, r3
 800d75c:	341a      	adds	r4, #26
 800d75e:	42b5      	cmp	r5, r6
 800d760:	d11a      	bne.n	800d798 <_printf_common+0xcc>
 800d762:	2000      	movs	r0, #0
 800d764:	e008      	b.n	800d778 <_printf_common+0xac>
 800d766:	2301      	movs	r3, #1
 800d768:	4652      	mov	r2, sl
 800d76a:	4649      	mov	r1, r9
 800d76c:	4638      	mov	r0, r7
 800d76e:	47c0      	blx	r8
 800d770:	3001      	adds	r0, #1
 800d772:	d103      	bne.n	800d77c <_printf_common+0xb0>
 800d774:	f04f 30ff 	mov.w	r0, #4294967295
 800d778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77c:	3501      	adds	r5, #1
 800d77e:	e7c4      	b.n	800d70a <_printf_common+0x3e>
 800d780:	2030      	movs	r0, #48	; 0x30
 800d782:	18e1      	adds	r1, r4, r3
 800d784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d788:	1c5a      	adds	r2, r3, #1
 800d78a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d78e:	4422      	add	r2, r4
 800d790:	3302      	adds	r3, #2
 800d792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d796:	e7c5      	b.n	800d724 <_printf_common+0x58>
 800d798:	2301      	movs	r3, #1
 800d79a:	4622      	mov	r2, r4
 800d79c:	4649      	mov	r1, r9
 800d79e:	4638      	mov	r0, r7
 800d7a0:	47c0      	blx	r8
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d0e6      	beq.n	800d774 <_printf_common+0xa8>
 800d7a6:	3601      	adds	r6, #1
 800d7a8:	e7d9      	b.n	800d75e <_printf_common+0x92>
	...

0800d7ac <_printf_i>:
 800d7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b0:	7e0f      	ldrb	r7, [r1, #24]
 800d7b2:	4691      	mov	r9, r2
 800d7b4:	2f78      	cmp	r7, #120	; 0x78
 800d7b6:	4680      	mov	r8, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	469a      	mov	sl, r3
 800d7bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7c2:	d807      	bhi.n	800d7d4 <_printf_i+0x28>
 800d7c4:	2f62      	cmp	r7, #98	; 0x62
 800d7c6:	d80a      	bhi.n	800d7de <_printf_i+0x32>
 800d7c8:	2f00      	cmp	r7, #0
 800d7ca:	f000 80d9 	beq.w	800d980 <_printf_i+0x1d4>
 800d7ce:	2f58      	cmp	r7, #88	; 0x58
 800d7d0:	f000 80a4 	beq.w	800d91c <_printf_i+0x170>
 800d7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7dc:	e03a      	b.n	800d854 <_printf_i+0xa8>
 800d7de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7e2:	2b15      	cmp	r3, #21
 800d7e4:	d8f6      	bhi.n	800d7d4 <_printf_i+0x28>
 800d7e6:	a101      	add	r1, pc, #4	; (adr r1, 800d7ec <_printf_i+0x40>)
 800d7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7ec:	0800d845 	.word	0x0800d845
 800d7f0:	0800d859 	.word	0x0800d859
 800d7f4:	0800d7d5 	.word	0x0800d7d5
 800d7f8:	0800d7d5 	.word	0x0800d7d5
 800d7fc:	0800d7d5 	.word	0x0800d7d5
 800d800:	0800d7d5 	.word	0x0800d7d5
 800d804:	0800d859 	.word	0x0800d859
 800d808:	0800d7d5 	.word	0x0800d7d5
 800d80c:	0800d7d5 	.word	0x0800d7d5
 800d810:	0800d7d5 	.word	0x0800d7d5
 800d814:	0800d7d5 	.word	0x0800d7d5
 800d818:	0800d967 	.word	0x0800d967
 800d81c:	0800d889 	.word	0x0800d889
 800d820:	0800d949 	.word	0x0800d949
 800d824:	0800d7d5 	.word	0x0800d7d5
 800d828:	0800d7d5 	.word	0x0800d7d5
 800d82c:	0800d989 	.word	0x0800d989
 800d830:	0800d7d5 	.word	0x0800d7d5
 800d834:	0800d889 	.word	0x0800d889
 800d838:	0800d7d5 	.word	0x0800d7d5
 800d83c:	0800d7d5 	.word	0x0800d7d5
 800d840:	0800d951 	.word	0x0800d951
 800d844:	682b      	ldr	r3, [r5, #0]
 800d846:	1d1a      	adds	r2, r3, #4
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	602a      	str	r2, [r5, #0]
 800d84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d854:	2301      	movs	r3, #1
 800d856:	e0a4      	b.n	800d9a2 <_printf_i+0x1f6>
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	6829      	ldr	r1, [r5, #0]
 800d85c:	0606      	lsls	r6, r0, #24
 800d85e:	f101 0304 	add.w	r3, r1, #4
 800d862:	d50a      	bpl.n	800d87a <_printf_i+0xce>
 800d864:	680e      	ldr	r6, [r1, #0]
 800d866:	602b      	str	r3, [r5, #0]
 800d868:	2e00      	cmp	r6, #0
 800d86a:	da03      	bge.n	800d874 <_printf_i+0xc8>
 800d86c:	232d      	movs	r3, #45	; 0x2d
 800d86e:	4276      	negs	r6, r6
 800d870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d874:	230a      	movs	r3, #10
 800d876:	485e      	ldr	r0, [pc, #376]	; (800d9f0 <_printf_i+0x244>)
 800d878:	e019      	b.n	800d8ae <_printf_i+0x102>
 800d87a:	680e      	ldr	r6, [r1, #0]
 800d87c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	bf18      	it	ne
 800d884:	b236      	sxthne	r6, r6
 800d886:	e7ef      	b.n	800d868 <_printf_i+0xbc>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	6820      	ldr	r0, [r4, #0]
 800d88c:	1d19      	adds	r1, r3, #4
 800d88e:	6029      	str	r1, [r5, #0]
 800d890:	0601      	lsls	r1, r0, #24
 800d892:	d501      	bpl.n	800d898 <_printf_i+0xec>
 800d894:	681e      	ldr	r6, [r3, #0]
 800d896:	e002      	b.n	800d89e <_printf_i+0xf2>
 800d898:	0646      	lsls	r6, r0, #25
 800d89a:	d5fb      	bpl.n	800d894 <_printf_i+0xe8>
 800d89c:	881e      	ldrh	r6, [r3, #0]
 800d89e:	2f6f      	cmp	r7, #111	; 0x6f
 800d8a0:	bf0c      	ite	eq
 800d8a2:	2308      	moveq	r3, #8
 800d8a4:	230a      	movne	r3, #10
 800d8a6:	4852      	ldr	r0, [pc, #328]	; (800d9f0 <_printf_i+0x244>)
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8ae:	6865      	ldr	r5, [r4, #4]
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	bfa8      	it	ge
 800d8b4:	6821      	ldrge	r1, [r4, #0]
 800d8b6:	60a5      	str	r5, [r4, #8]
 800d8b8:	bfa4      	itt	ge
 800d8ba:	f021 0104 	bicge.w	r1, r1, #4
 800d8be:	6021      	strge	r1, [r4, #0]
 800d8c0:	b90e      	cbnz	r6, 800d8c6 <_printf_i+0x11a>
 800d8c2:	2d00      	cmp	r5, #0
 800d8c4:	d04d      	beq.n	800d962 <_printf_i+0x1b6>
 800d8c6:	4615      	mov	r5, r2
 800d8c8:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8cc:	fb03 6711 	mls	r7, r3, r1, r6
 800d8d0:	5dc7      	ldrb	r7, [r0, r7]
 800d8d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8d6:	4637      	mov	r7, r6
 800d8d8:	42bb      	cmp	r3, r7
 800d8da:	460e      	mov	r6, r1
 800d8dc:	d9f4      	bls.n	800d8c8 <_printf_i+0x11c>
 800d8de:	2b08      	cmp	r3, #8
 800d8e0:	d10b      	bne.n	800d8fa <_printf_i+0x14e>
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	07de      	lsls	r6, r3, #31
 800d8e6:	d508      	bpl.n	800d8fa <_printf_i+0x14e>
 800d8e8:	6923      	ldr	r3, [r4, #16]
 800d8ea:	6861      	ldr	r1, [r4, #4]
 800d8ec:	4299      	cmp	r1, r3
 800d8ee:	bfde      	ittt	le
 800d8f0:	2330      	movle	r3, #48	; 0x30
 800d8f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8fa:	1b52      	subs	r2, r2, r5
 800d8fc:	6122      	str	r2, [r4, #16]
 800d8fe:	464b      	mov	r3, r9
 800d900:	4621      	mov	r1, r4
 800d902:	4640      	mov	r0, r8
 800d904:	f8cd a000 	str.w	sl, [sp]
 800d908:	aa03      	add	r2, sp, #12
 800d90a:	f7ff fedf 	bl	800d6cc <_printf_common>
 800d90e:	3001      	adds	r0, #1
 800d910:	d14c      	bne.n	800d9ac <_printf_i+0x200>
 800d912:	f04f 30ff 	mov.w	r0, #4294967295
 800d916:	b004      	add	sp, #16
 800d918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91c:	4834      	ldr	r0, [pc, #208]	; (800d9f0 <_printf_i+0x244>)
 800d91e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d922:	6829      	ldr	r1, [r5, #0]
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	f851 6b04 	ldr.w	r6, [r1], #4
 800d92a:	6029      	str	r1, [r5, #0]
 800d92c:	061d      	lsls	r5, r3, #24
 800d92e:	d514      	bpl.n	800d95a <_printf_i+0x1ae>
 800d930:	07df      	lsls	r7, r3, #31
 800d932:	bf44      	itt	mi
 800d934:	f043 0320 	orrmi.w	r3, r3, #32
 800d938:	6023      	strmi	r3, [r4, #0]
 800d93a:	b91e      	cbnz	r6, 800d944 <_printf_i+0x198>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	f023 0320 	bic.w	r3, r3, #32
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	2310      	movs	r3, #16
 800d946:	e7af      	b.n	800d8a8 <_printf_i+0xfc>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	f043 0320 	orr.w	r3, r3, #32
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	2378      	movs	r3, #120	; 0x78
 800d952:	4828      	ldr	r0, [pc, #160]	; (800d9f4 <_printf_i+0x248>)
 800d954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d958:	e7e3      	b.n	800d922 <_printf_i+0x176>
 800d95a:	0659      	lsls	r1, r3, #25
 800d95c:	bf48      	it	mi
 800d95e:	b2b6      	uxthmi	r6, r6
 800d960:	e7e6      	b.n	800d930 <_printf_i+0x184>
 800d962:	4615      	mov	r5, r2
 800d964:	e7bb      	b.n	800d8de <_printf_i+0x132>
 800d966:	682b      	ldr	r3, [r5, #0]
 800d968:	6826      	ldr	r6, [r4, #0]
 800d96a:	1d18      	adds	r0, r3, #4
 800d96c:	6961      	ldr	r1, [r4, #20]
 800d96e:	6028      	str	r0, [r5, #0]
 800d970:	0635      	lsls	r5, r6, #24
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	d501      	bpl.n	800d97a <_printf_i+0x1ce>
 800d976:	6019      	str	r1, [r3, #0]
 800d978:	e002      	b.n	800d980 <_printf_i+0x1d4>
 800d97a:	0670      	lsls	r0, r6, #25
 800d97c:	d5fb      	bpl.n	800d976 <_printf_i+0x1ca>
 800d97e:	8019      	strh	r1, [r3, #0]
 800d980:	2300      	movs	r3, #0
 800d982:	4615      	mov	r5, r2
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	e7ba      	b.n	800d8fe <_printf_i+0x152>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	2100      	movs	r1, #0
 800d98c:	1d1a      	adds	r2, r3, #4
 800d98e:	602a      	str	r2, [r5, #0]
 800d990:	681d      	ldr	r5, [r3, #0]
 800d992:	6862      	ldr	r2, [r4, #4]
 800d994:	4628      	mov	r0, r5
 800d996:	f002 ff1f 	bl	80107d8 <memchr>
 800d99a:	b108      	cbz	r0, 800d9a0 <_printf_i+0x1f4>
 800d99c:	1b40      	subs	r0, r0, r5
 800d99e:	6060      	str	r0, [r4, #4]
 800d9a0:	6863      	ldr	r3, [r4, #4]
 800d9a2:	6123      	str	r3, [r4, #16]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9aa:	e7a8      	b.n	800d8fe <_printf_i+0x152>
 800d9ac:	462a      	mov	r2, r5
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	4640      	mov	r0, r8
 800d9b2:	6923      	ldr	r3, [r4, #16]
 800d9b4:	47d0      	blx	sl
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	d0ab      	beq.n	800d912 <_printf_i+0x166>
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	079b      	lsls	r3, r3, #30
 800d9be:	d413      	bmi.n	800d9e8 <_printf_i+0x23c>
 800d9c0:	68e0      	ldr	r0, [r4, #12]
 800d9c2:	9b03      	ldr	r3, [sp, #12]
 800d9c4:	4298      	cmp	r0, r3
 800d9c6:	bfb8      	it	lt
 800d9c8:	4618      	movlt	r0, r3
 800d9ca:	e7a4      	b.n	800d916 <_printf_i+0x16a>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	47d0      	blx	sl
 800d9d6:	3001      	adds	r0, #1
 800d9d8:	d09b      	beq.n	800d912 <_printf_i+0x166>
 800d9da:	3501      	adds	r5, #1
 800d9dc:	68e3      	ldr	r3, [r4, #12]
 800d9de:	9903      	ldr	r1, [sp, #12]
 800d9e0:	1a5b      	subs	r3, r3, r1
 800d9e2:	42ab      	cmp	r3, r5
 800d9e4:	dcf2      	bgt.n	800d9cc <_printf_i+0x220>
 800d9e6:	e7eb      	b.n	800d9c0 <_printf_i+0x214>
 800d9e8:	2500      	movs	r5, #0
 800d9ea:	f104 0619 	add.w	r6, r4, #25
 800d9ee:	e7f5      	b.n	800d9dc <_printf_i+0x230>
 800d9f0:	080341b2 	.word	0x080341b2
 800d9f4:	080341c3 	.word	0x080341c3

0800d9f8 <_scanf_float>:
 800d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fc:	b087      	sub	sp, #28
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	688b      	ldr	r3, [r1, #8]
 800da02:	4617      	mov	r7, r2
 800da04:	1e5a      	subs	r2, r3, #1
 800da06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da0a:	bf85      	ittet	hi
 800da0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da10:	195b      	addhi	r3, r3, r5
 800da12:	2300      	movls	r3, #0
 800da14:	9302      	strhi	r3, [sp, #8]
 800da16:	bf88      	it	hi
 800da18:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da1c:	468b      	mov	fp, r1
 800da1e:	f04f 0500 	mov.w	r5, #0
 800da22:	bf8c      	ite	hi
 800da24:	608b      	strhi	r3, [r1, #8]
 800da26:	9302      	strls	r3, [sp, #8]
 800da28:	680b      	ldr	r3, [r1, #0]
 800da2a:	4680      	mov	r8, r0
 800da2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800da30:	f84b 3b1c 	str.w	r3, [fp], #28
 800da34:	460c      	mov	r4, r1
 800da36:	465e      	mov	r6, fp
 800da38:	46aa      	mov	sl, r5
 800da3a:	46a9      	mov	r9, r5
 800da3c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da40:	9501      	str	r5, [sp, #4]
 800da42:	68a2      	ldr	r2, [r4, #8]
 800da44:	b152      	cbz	r2, 800da5c <_scanf_float+0x64>
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b4e      	cmp	r3, #78	; 0x4e
 800da4c:	d864      	bhi.n	800db18 <_scanf_float+0x120>
 800da4e:	2b40      	cmp	r3, #64	; 0x40
 800da50:	d83c      	bhi.n	800dacc <_scanf_float+0xd4>
 800da52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800da56:	b2c8      	uxtb	r0, r1
 800da58:	280e      	cmp	r0, #14
 800da5a:	d93a      	bls.n	800dad2 <_scanf_float+0xda>
 800da5c:	f1b9 0f00 	cmp.w	r9, #0
 800da60:	d003      	beq.n	800da6a <_scanf_float+0x72>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da6e:	f1ba 0f01 	cmp.w	sl, #1
 800da72:	f200 8113 	bhi.w	800dc9c <_scanf_float+0x2a4>
 800da76:	455e      	cmp	r6, fp
 800da78:	f200 8105 	bhi.w	800dc86 <_scanf_float+0x28e>
 800da7c:	2501      	movs	r5, #1
 800da7e:	4628      	mov	r0, r5
 800da80:	b007      	add	sp, #28
 800da82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800da8a:	2a0d      	cmp	r2, #13
 800da8c:	d8e6      	bhi.n	800da5c <_scanf_float+0x64>
 800da8e:	a101      	add	r1, pc, #4	; (adr r1, 800da94 <_scanf_float+0x9c>)
 800da90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da94:	0800dbd3 	.word	0x0800dbd3
 800da98:	0800da5d 	.word	0x0800da5d
 800da9c:	0800da5d 	.word	0x0800da5d
 800daa0:	0800da5d 	.word	0x0800da5d
 800daa4:	0800dc33 	.word	0x0800dc33
 800daa8:	0800dc0b 	.word	0x0800dc0b
 800daac:	0800da5d 	.word	0x0800da5d
 800dab0:	0800da5d 	.word	0x0800da5d
 800dab4:	0800dbe1 	.word	0x0800dbe1
 800dab8:	0800da5d 	.word	0x0800da5d
 800dabc:	0800da5d 	.word	0x0800da5d
 800dac0:	0800da5d 	.word	0x0800da5d
 800dac4:	0800da5d 	.word	0x0800da5d
 800dac8:	0800db99 	.word	0x0800db99
 800dacc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dad0:	e7db      	b.n	800da8a <_scanf_float+0x92>
 800dad2:	290e      	cmp	r1, #14
 800dad4:	d8c2      	bhi.n	800da5c <_scanf_float+0x64>
 800dad6:	a001      	add	r0, pc, #4	; (adr r0, 800dadc <_scanf_float+0xe4>)
 800dad8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dadc:	0800db8b 	.word	0x0800db8b
 800dae0:	0800da5d 	.word	0x0800da5d
 800dae4:	0800db8b 	.word	0x0800db8b
 800dae8:	0800dc1f 	.word	0x0800dc1f
 800daec:	0800da5d 	.word	0x0800da5d
 800daf0:	0800db39 	.word	0x0800db39
 800daf4:	0800db75 	.word	0x0800db75
 800daf8:	0800db75 	.word	0x0800db75
 800dafc:	0800db75 	.word	0x0800db75
 800db00:	0800db75 	.word	0x0800db75
 800db04:	0800db75 	.word	0x0800db75
 800db08:	0800db75 	.word	0x0800db75
 800db0c:	0800db75 	.word	0x0800db75
 800db10:	0800db75 	.word	0x0800db75
 800db14:	0800db75 	.word	0x0800db75
 800db18:	2b6e      	cmp	r3, #110	; 0x6e
 800db1a:	d809      	bhi.n	800db30 <_scanf_float+0x138>
 800db1c:	2b60      	cmp	r3, #96	; 0x60
 800db1e:	d8b2      	bhi.n	800da86 <_scanf_float+0x8e>
 800db20:	2b54      	cmp	r3, #84	; 0x54
 800db22:	d077      	beq.n	800dc14 <_scanf_float+0x21c>
 800db24:	2b59      	cmp	r3, #89	; 0x59
 800db26:	d199      	bne.n	800da5c <_scanf_float+0x64>
 800db28:	2d07      	cmp	r5, #7
 800db2a:	d197      	bne.n	800da5c <_scanf_float+0x64>
 800db2c:	2508      	movs	r5, #8
 800db2e:	e029      	b.n	800db84 <_scanf_float+0x18c>
 800db30:	2b74      	cmp	r3, #116	; 0x74
 800db32:	d06f      	beq.n	800dc14 <_scanf_float+0x21c>
 800db34:	2b79      	cmp	r3, #121	; 0x79
 800db36:	e7f6      	b.n	800db26 <_scanf_float+0x12e>
 800db38:	6821      	ldr	r1, [r4, #0]
 800db3a:	05c8      	lsls	r0, r1, #23
 800db3c:	d51a      	bpl.n	800db74 <_scanf_float+0x17c>
 800db3e:	9b02      	ldr	r3, [sp, #8]
 800db40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db44:	6021      	str	r1, [r4, #0]
 800db46:	f109 0901 	add.w	r9, r9, #1
 800db4a:	b11b      	cbz	r3, 800db54 <_scanf_float+0x15c>
 800db4c:	3b01      	subs	r3, #1
 800db4e:	3201      	adds	r2, #1
 800db50:	9302      	str	r3, [sp, #8]
 800db52:	60a2      	str	r2, [r4, #8]
 800db54:	68a3      	ldr	r3, [r4, #8]
 800db56:	3b01      	subs	r3, #1
 800db58:	60a3      	str	r3, [r4, #8]
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	3301      	adds	r3, #1
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	3b01      	subs	r3, #1
 800db64:	2b00      	cmp	r3, #0
 800db66:	607b      	str	r3, [r7, #4]
 800db68:	f340 8084 	ble.w	800dc74 <_scanf_float+0x27c>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	3301      	adds	r3, #1
 800db70:	603b      	str	r3, [r7, #0]
 800db72:	e766      	b.n	800da42 <_scanf_float+0x4a>
 800db74:	eb1a 0f05 	cmn.w	sl, r5
 800db78:	f47f af70 	bne.w	800da5c <_scanf_float+0x64>
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800db82:	6022      	str	r2, [r4, #0]
 800db84:	f806 3b01 	strb.w	r3, [r6], #1
 800db88:	e7e4      	b.n	800db54 <_scanf_float+0x15c>
 800db8a:	6822      	ldr	r2, [r4, #0]
 800db8c:	0610      	lsls	r0, r2, #24
 800db8e:	f57f af65 	bpl.w	800da5c <_scanf_float+0x64>
 800db92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db96:	e7f4      	b.n	800db82 <_scanf_float+0x18a>
 800db98:	f1ba 0f00 	cmp.w	sl, #0
 800db9c:	d10e      	bne.n	800dbbc <_scanf_float+0x1c4>
 800db9e:	f1b9 0f00 	cmp.w	r9, #0
 800dba2:	d10e      	bne.n	800dbc2 <_scanf_float+0x1ca>
 800dba4:	6822      	ldr	r2, [r4, #0]
 800dba6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dbaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dbae:	d108      	bne.n	800dbc2 <_scanf_float+0x1ca>
 800dbb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbb4:	f04f 0a01 	mov.w	sl, #1
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	e7e3      	b.n	800db84 <_scanf_float+0x18c>
 800dbbc:	f1ba 0f02 	cmp.w	sl, #2
 800dbc0:	d055      	beq.n	800dc6e <_scanf_float+0x276>
 800dbc2:	2d01      	cmp	r5, #1
 800dbc4:	d002      	beq.n	800dbcc <_scanf_float+0x1d4>
 800dbc6:	2d04      	cmp	r5, #4
 800dbc8:	f47f af48 	bne.w	800da5c <_scanf_float+0x64>
 800dbcc:	3501      	adds	r5, #1
 800dbce:	b2ed      	uxtb	r5, r5
 800dbd0:	e7d8      	b.n	800db84 <_scanf_float+0x18c>
 800dbd2:	f1ba 0f01 	cmp.w	sl, #1
 800dbd6:	f47f af41 	bne.w	800da5c <_scanf_float+0x64>
 800dbda:	f04f 0a02 	mov.w	sl, #2
 800dbde:	e7d1      	b.n	800db84 <_scanf_float+0x18c>
 800dbe0:	b97d      	cbnz	r5, 800dc02 <_scanf_float+0x20a>
 800dbe2:	f1b9 0f00 	cmp.w	r9, #0
 800dbe6:	f47f af3c 	bne.w	800da62 <_scanf_float+0x6a>
 800dbea:	6822      	ldr	r2, [r4, #0]
 800dbec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dbf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dbf4:	f47f af39 	bne.w	800da6a <_scanf_float+0x72>
 800dbf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbfc:	2501      	movs	r5, #1
 800dbfe:	6022      	str	r2, [r4, #0]
 800dc00:	e7c0      	b.n	800db84 <_scanf_float+0x18c>
 800dc02:	2d03      	cmp	r5, #3
 800dc04:	d0e2      	beq.n	800dbcc <_scanf_float+0x1d4>
 800dc06:	2d05      	cmp	r5, #5
 800dc08:	e7de      	b.n	800dbc8 <_scanf_float+0x1d0>
 800dc0a:	2d02      	cmp	r5, #2
 800dc0c:	f47f af26 	bne.w	800da5c <_scanf_float+0x64>
 800dc10:	2503      	movs	r5, #3
 800dc12:	e7b7      	b.n	800db84 <_scanf_float+0x18c>
 800dc14:	2d06      	cmp	r5, #6
 800dc16:	f47f af21 	bne.w	800da5c <_scanf_float+0x64>
 800dc1a:	2507      	movs	r5, #7
 800dc1c:	e7b2      	b.n	800db84 <_scanf_float+0x18c>
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	0591      	lsls	r1, r2, #22
 800dc22:	f57f af1b 	bpl.w	800da5c <_scanf_float+0x64>
 800dc26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dc2a:	6022      	str	r2, [r4, #0]
 800dc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc30:	e7a8      	b.n	800db84 <_scanf_float+0x18c>
 800dc32:	6822      	ldr	r2, [r4, #0]
 800dc34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dc38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dc3c:	d006      	beq.n	800dc4c <_scanf_float+0x254>
 800dc3e:	0550      	lsls	r0, r2, #21
 800dc40:	f57f af0c 	bpl.w	800da5c <_scanf_float+0x64>
 800dc44:	f1b9 0f00 	cmp.w	r9, #0
 800dc48:	f43f af0f 	beq.w	800da6a <_scanf_float+0x72>
 800dc4c:	0591      	lsls	r1, r2, #22
 800dc4e:	bf58      	it	pl
 800dc50:	9901      	ldrpl	r1, [sp, #4]
 800dc52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc56:	bf58      	it	pl
 800dc58:	eba9 0101 	subpl.w	r1, r9, r1
 800dc5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dc60:	f04f 0900 	mov.w	r9, #0
 800dc64:	bf58      	it	pl
 800dc66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	e78a      	b.n	800db84 <_scanf_float+0x18c>
 800dc6e:	f04f 0a03 	mov.w	sl, #3
 800dc72:	e787      	b.n	800db84 <_scanf_float+0x18c>
 800dc74:	4639      	mov	r1, r7
 800dc76:	4640      	mov	r0, r8
 800dc78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc7c:	4798      	blx	r3
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	f43f aedf 	beq.w	800da42 <_scanf_float+0x4a>
 800dc84:	e6ea      	b.n	800da5c <_scanf_float+0x64>
 800dc86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc92:	4798      	blx	r3
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	6123      	str	r3, [r4, #16]
 800dc9a:	e6ec      	b.n	800da76 <_scanf_float+0x7e>
 800dc9c:	1e6b      	subs	r3, r5, #1
 800dc9e:	2b06      	cmp	r3, #6
 800dca0:	d825      	bhi.n	800dcee <_scanf_float+0x2f6>
 800dca2:	2d02      	cmp	r5, #2
 800dca4:	d836      	bhi.n	800dd14 <_scanf_float+0x31c>
 800dca6:	455e      	cmp	r6, fp
 800dca8:	f67f aee8 	bls.w	800da7c <_scanf_float+0x84>
 800dcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcb0:	463a      	mov	r2, r7
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcb8:	4798      	blx	r3
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	e7f1      	b.n	800dca6 <_scanf_float+0x2ae>
 800dcc2:	9802      	ldr	r0, [sp, #8]
 800dcc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dccc:	463a      	mov	r2, r7
 800dcce:	9002      	str	r0, [sp, #8]
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	4798      	blx	r3
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	6123      	str	r3, [r4, #16]
 800dcda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcde:	fa5f fa8a 	uxtb.w	sl, sl
 800dce2:	f1ba 0f02 	cmp.w	sl, #2
 800dce6:	d1ec      	bne.n	800dcc2 <_scanf_float+0x2ca>
 800dce8:	3d03      	subs	r5, #3
 800dcea:	b2ed      	uxtb	r5, r5
 800dcec:	1b76      	subs	r6, r6, r5
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	05da      	lsls	r2, r3, #23
 800dcf2:	d52f      	bpl.n	800dd54 <_scanf_float+0x35c>
 800dcf4:	055b      	lsls	r3, r3, #21
 800dcf6:	d510      	bpl.n	800dd1a <_scanf_float+0x322>
 800dcf8:	455e      	cmp	r6, fp
 800dcfa:	f67f aebf 	bls.w	800da7c <_scanf_float+0x84>
 800dcfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd02:	463a      	mov	r2, r7
 800dd04:	4640      	mov	r0, r8
 800dd06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd0a:	4798      	blx	r3
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	e7f1      	b.n	800dcf8 <_scanf_float+0x300>
 800dd14:	46aa      	mov	sl, r5
 800dd16:	9602      	str	r6, [sp, #8]
 800dd18:	e7df      	b.n	800dcda <_scanf_float+0x2e2>
 800dd1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd1e:	6923      	ldr	r3, [r4, #16]
 800dd20:	2965      	cmp	r1, #101	; 0x65
 800dd22:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd26:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd2a:	6123      	str	r3, [r4, #16]
 800dd2c:	d00c      	beq.n	800dd48 <_scanf_float+0x350>
 800dd2e:	2945      	cmp	r1, #69	; 0x45
 800dd30:	d00a      	beq.n	800dd48 <_scanf_float+0x350>
 800dd32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd36:	463a      	mov	r2, r7
 800dd38:	4640      	mov	r0, r8
 800dd3a:	4798      	blx	r3
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd42:	3b01      	subs	r3, #1
 800dd44:	1eb5      	subs	r5, r6, #2
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	463a      	mov	r2, r7
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd50:	4798      	blx	r3
 800dd52:	462e      	mov	r6, r5
 800dd54:	6825      	ldr	r5, [r4, #0]
 800dd56:	f015 0510 	ands.w	r5, r5, #16
 800dd5a:	d155      	bne.n	800de08 <_scanf_float+0x410>
 800dd5c:	7035      	strb	r5, [r6, #0]
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd68:	d11b      	bne.n	800dda2 <_scanf_float+0x3aa>
 800dd6a:	9b01      	ldr	r3, [sp, #4]
 800dd6c:	454b      	cmp	r3, r9
 800dd6e:	eba3 0209 	sub.w	r2, r3, r9
 800dd72:	d123      	bne.n	800ddbc <_scanf_float+0x3c4>
 800dd74:	2200      	movs	r2, #0
 800dd76:	4659      	mov	r1, fp
 800dd78:	4640      	mov	r0, r8
 800dd7a:	f000 ff39 	bl	800ebf0 <_strtod_r>
 800dd7e:	6822      	ldr	r2, [r4, #0]
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	f012 0f02 	tst.w	r2, #2
 800dd86:	4606      	mov	r6, r0
 800dd88:	460f      	mov	r7, r1
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	d021      	beq.n	800ddd2 <_scanf_float+0x3da>
 800dd8e:	1d1a      	adds	r2, r3, #4
 800dd90:	9903      	ldr	r1, [sp, #12]
 800dd92:	600a      	str	r2, [r1, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	e9c3 6700 	strd	r6, r7, [r3]
 800dd9a:	68e3      	ldr	r3, [r4, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60e3      	str	r3, [r4, #12]
 800dda0:	e66d      	b.n	800da7e <_scanf_float+0x86>
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0e5      	beq.n	800dd74 <_scanf_float+0x37c>
 800dda8:	9905      	ldr	r1, [sp, #20]
 800ddaa:	230a      	movs	r3, #10
 800ddac:	462a      	mov	r2, r5
 800ddae:	4640      	mov	r0, r8
 800ddb0:	3101      	adds	r1, #1
 800ddb2:	f000 fffb 	bl	800edac <_strtol_r>
 800ddb6:	9b04      	ldr	r3, [sp, #16]
 800ddb8:	9e05      	ldr	r6, [sp, #20]
 800ddba:	1ac2      	subs	r2, r0, r3
 800ddbc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ddc0:	429e      	cmp	r6, r3
 800ddc2:	bf28      	it	cs
 800ddc4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ddc8:	4630      	mov	r0, r6
 800ddca:	4910      	ldr	r1, [pc, #64]	; (800de0c <_scanf_float+0x414>)
 800ddcc:	f000 f8c8 	bl	800df60 <siprintf>
 800ddd0:	e7d0      	b.n	800dd74 <_scanf_float+0x37c>
 800ddd2:	f012 0f04 	tst.w	r2, #4
 800ddd6:	f103 0204 	add.w	r2, r3, #4
 800ddda:	d1d9      	bne.n	800dd90 <_scanf_float+0x398>
 800dddc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800dde0:	f8cc 2000 	str.w	r2, [ip]
 800dde4:	f8d3 8000 	ldr.w	r8, [r3]
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	f7f2 fe7a 	bl	8000ae4 <__aeabi_dcmpun>
 800ddf0:	b128      	cbz	r0, 800ddfe <_scanf_float+0x406>
 800ddf2:	4807      	ldr	r0, [pc, #28]	; (800de10 <_scanf_float+0x418>)
 800ddf4:	f000 f8b0 	bl	800df58 <nanf>
 800ddf8:	f8c8 0000 	str.w	r0, [r8]
 800ddfc:	e7cd      	b.n	800dd9a <_scanf_float+0x3a2>
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	f7f2 fecd 	bl	8000ba0 <__aeabi_d2f>
 800de06:	e7f7      	b.n	800ddf8 <_scanf_float+0x400>
 800de08:	2500      	movs	r5, #0
 800de0a:	e638      	b.n	800da7e <_scanf_float+0x86>
 800de0c:	080341d4 	.word	0x080341d4
 800de10:	080342df 	.word	0x080342df

0800de14 <iprintf>:
 800de14:	b40f      	push	{r0, r1, r2, r3}
 800de16:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <iprintf+0x2c>)
 800de18:	b513      	push	{r0, r1, r4, lr}
 800de1a:	681c      	ldr	r4, [r3, #0]
 800de1c:	b124      	cbz	r4, 800de28 <iprintf+0x14>
 800de1e:	69a3      	ldr	r3, [r4, #24]
 800de20:	b913      	cbnz	r3, 800de28 <iprintf+0x14>
 800de22:	4620      	mov	r0, r4
 800de24:	f002 f83c 	bl	800fea0 <__sinit>
 800de28:	ab05      	add	r3, sp, #20
 800de2a:	4620      	mov	r0, r4
 800de2c:	9a04      	ldr	r2, [sp, #16]
 800de2e:	68a1      	ldr	r1, [r4, #8]
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	f003 fc0b 	bl	801164c <_vfiprintf_r>
 800de36:	b002      	add	sp, #8
 800de38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de3c:	b004      	add	sp, #16
 800de3e:	4770      	bx	lr
 800de40:	20000054 	.word	0x20000054

0800de44 <putchar>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4b08      	ldr	r3, [pc, #32]	; (800de68 <putchar+0x24>)
 800de48:	4605      	mov	r5, r0
 800de4a:	681c      	ldr	r4, [r3, #0]
 800de4c:	b124      	cbz	r4, 800de58 <putchar+0x14>
 800de4e:	69a3      	ldr	r3, [r4, #24]
 800de50:	b913      	cbnz	r3, 800de58 <putchar+0x14>
 800de52:	4620      	mov	r0, r4
 800de54:	f002 f824 	bl	800fea0 <__sinit>
 800de58:	4629      	mov	r1, r5
 800de5a:	4620      	mov	r0, r4
 800de5c:	68a2      	ldr	r2, [r4, #8]
 800de5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de62:	f003 bd23 	b.w	80118ac <_putc_r>
 800de66:	bf00      	nop
 800de68:	20000054 	.word	0x20000054

0800de6c <_puts_r>:
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	460e      	mov	r6, r1
 800de70:	4605      	mov	r5, r0
 800de72:	b118      	cbz	r0, 800de7c <_puts_r+0x10>
 800de74:	6983      	ldr	r3, [r0, #24]
 800de76:	b90b      	cbnz	r3, 800de7c <_puts_r+0x10>
 800de78:	f002 f812 	bl	800fea0 <__sinit>
 800de7c:	69ab      	ldr	r3, [r5, #24]
 800de7e:	68ac      	ldr	r4, [r5, #8]
 800de80:	b913      	cbnz	r3, 800de88 <_puts_r+0x1c>
 800de82:	4628      	mov	r0, r5
 800de84:	f002 f80c 	bl	800fea0 <__sinit>
 800de88:	4b2c      	ldr	r3, [pc, #176]	; (800df3c <_puts_r+0xd0>)
 800de8a:	429c      	cmp	r4, r3
 800de8c:	d120      	bne.n	800ded0 <_puts_r+0x64>
 800de8e:	686c      	ldr	r4, [r5, #4]
 800de90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de92:	07db      	lsls	r3, r3, #31
 800de94:	d405      	bmi.n	800dea2 <_puts_r+0x36>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	0598      	lsls	r0, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_puts_r+0x36>
 800de9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de9e:	f002 fc1a 	bl	80106d6 <__retarget_lock_acquire_recursive>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	0719      	lsls	r1, r3, #28
 800dea6:	d51d      	bpl.n	800dee4 <_puts_r+0x78>
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	b1db      	cbz	r3, 800dee4 <_puts_r+0x78>
 800deac:	3e01      	subs	r6, #1
 800deae:	68a3      	ldr	r3, [r4, #8]
 800deb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800deb4:	3b01      	subs	r3, #1
 800deb6:	60a3      	str	r3, [r4, #8]
 800deb8:	bb39      	cbnz	r1, 800df0a <_puts_r+0x9e>
 800deba:	2b00      	cmp	r3, #0
 800debc:	da38      	bge.n	800df30 <_puts_r+0xc4>
 800debe:	4622      	mov	r2, r4
 800dec0:	210a      	movs	r1, #10
 800dec2:	4628      	mov	r0, r5
 800dec4:	f000 ff7e 	bl	800edc4 <__swbuf_r>
 800dec8:	3001      	adds	r0, #1
 800deca:	d011      	beq.n	800def0 <_puts_r+0x84>
 800decc:	250a      	movs	r5, #10
 800dece:	e011      	b.n	800def4 <_puts_r+0x88>
 800ded0:	4b1b      	ldr	r3, [pc, #108]	; (800df40 <_puts_r+0xd4>)
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d101      	bne.n	800deda <_puts_r+0x6e>
 800ded6:	68ac      	ldr	r4, [r5, #8]
 800ded8:	e7da      	b.n	800de90 <_puts_r+0x24>
 800deda:	4b1a      	ldr	r3, [pc, #104]	; (800df44 <_puts_r+0xd8>)
 800dedc:	429c      	cmp	r4, r3
 800dede:	bf08      	it	eq
 800dee0:	68ec      	ldreq	r4, [r5, #12]
 800dee2:	e7d5      	b.n	800de90 <_puts_r+0x24>
 800dee4:	4621      	mov	r1, r4
 800dee6:	4628      	mov	r0, r5
 800dee8:	f000 ffbe 	bl	800ee68 <__swsetup_r>
 800deec:	2800      	cmp	r0, #0
 800deee:	d0dd      	beq.n	800deac <_puts_r+0x40>
 800def0:	f04f 35ff 	mov.w	r5, #4294967295
 800def4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800def6:	07da      	lsls	r2, r3, #31
 800def8:	d405      	bmi.n	800df06 <_puts_r+0x9a>
 800defa:	89a3      	ldrh	r3, [r4, #12]
 800defc:	059b      	lsls	r3, r3, #22
 800defe:	d402      	bmi.n	800df06 <_puts_r+0x9a>
 800df00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df02:	f002 fbe9 	bl	80106d8 <__retarget_lock_release_recursive>
 800df06:	4628      	mov	r0, r5
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	da04      	bge.n	800df18 <_puts_r+0xac>
 800df0e:	69a2      	ldr	r2, [r4, #24]
 800df10:	429a      	cmp	r2, r3
 800df12:	dc06      	bgt.n	800df22 <_puts_r+0xb6>
 800df14:	290a      	cmp	r1, #10
 800df16:	d004      	beq.n	800df22 <_puts_r+0xb6>
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	1c5a      	adds	r2, r3, #1
 800df1c:	6022      	str	r2, [r4, #0]
 800df1e:	7019      	strb	r1, [r3, #0]
 800df20:	e7c5      	b.n	800deae <_puts_r+0x42>
 800df22:	4622      	mov	r2, r4
 800df24:	4628      	mov	r0, r5
 800df26:	f000 ff4d 	bl	800edc4 <__swbuf_r>
 800df2a:	3001      	adds	r0, #1
 800df2c:	d1bf      	bne.n	800deae <_puts_r+0x42>
 800df2e:	e7df      	b.n	800def0 <_puts_r+0x84>
 800df30:	250a      	movs	r5, #10
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	6022      	str	r2, [r4, #0]
 800df38:	701d      	strb	r5, [r3, #0]
 800df3a:	e7db      	b.n	800def4 <_puts_r+0x88>
 800df3c:	0803437c 	.word	0x0803437c
 800df40:	0803439c 	.word	0x0803439c
 800df44:	0803435c 	.word	0x0803435c

0800df48 <puts>:
 800df48:	4b02      	ldr	r3, [pc, #8]	; (800df54 <puts+0xc>)
 800df4a:	4601      	mov	r1, r0
 800df4c:	6818      	ldr	r0, [r3, #0]
 800df4e:	f7ff bf8d 	b.w	800de6c <_puts_r>
 800df52:	bf00      	nop
 800df54:	20000054 	.word	0x20000054

0800df58 <nanf>:
 800df58:	4800      	ldr	r0, [pc, #0]	; (800df5c <nanf+0x4>)
 800df5a:	4770      	bx	lr
 800df5c:	7fc00000 	.word	0x7fc00000

0800df60 <siprintf>:
 800df60:	b40e      	push	{r1, r2, r3}
 800df62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df66:	b500      	push	{lr}
 800df68:	b09c      	sub	sp, #112	; 0x70
 800df6a:	ab1d      	add	r3, sp, #116	; 0x74
 800df6c:	9002      	str	r0, [sp, #8]
 800df6e:	9006      	str	r0, [sp, #24]
 800df70:	9107      	str	r1, [sp, #28]
 800df72:	9104      	str	r1, [sp, #16]
 800df74:	4808      	ldr	r0, [pc, #32]	; (800df98 <siprintf+0x38>)
 800df76:	4909      	ldr	r1, [pc, #36]	; (800df9c <siprintf+0x3c>)
 800df78:	f853 2b04 	ldr.w	r2, [r3], #4
 800df7c:	9105      	str	r1, [sp, #20]
 800df7e:	6800      	ldr	r0, [r0, #0]
 800df80:	a902      	add	r1, sp, #8
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	f003 fa3a 	bl	80113fc <_svfiprintf_r>
 800df88:	2200      	movs	r2, #0
 800df8a:	9b02      	ldr	r3, [sp, #8]
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	b01c      	add	sp, #112	; 0x70
 800df90:	f85d eb04 	ldr.w	lr, [sp], #4
 800df94:	b003      	add	sp, #12
 800df96:	4770      	bx	lr
 800df98:	20000054 	.word	0x20000054
 800df9c:	ffff0208 	.word	0xffff0208

0800dfa0 <strcpy>:
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfa6:	f803 2b01 	strb.w	r2, [r3], #1
 800dfaa:	2a00      	cmp	r2, #0
 800dfac:	d1f9      	bne.n	800dfa2 <strcpy+0x2>
 800dfae:	4770      	bx	lr

0800dfb0 <strncmp>:
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	b172      	cbz	r2, 800dfd4 <strncmp+0x24>
 800dfb6:	3901      	subs	r1, #1
 800dfb8:	1884      	adds	r4, r0, r2
 800dfba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dfbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfc2:	4290      	cmp	r0, r2
 800dfc4:	d101      	bne.n	800dfca <strncmp+0x1a>
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	d101      	bne.n	800dfce <strncmp+0x1e>
 800dfca:	1a80      	subs	r0, r0, r2
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d1f3      	bne.n	800dfba <strncmp+0xa>
 800dfd2:	e7fa      	b.n	800dfca <strncmp+0x1a>
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	e7f9      	b.n	800dfcc <strncmp+0x1c>

0800dfd8 <sulp>:
 800dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfdc:	460f      	mov	r7, r1
 800dfde:	4690      	mov	r8, r2
 800dfe0:	f002 ff78 	bl	8010ed4 <__ulp>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	f1b8 0f00 	cmp.w	r8, #0
 800dfec:	d011      	beq.n	800e012 <sulp+0x3a>
 800dfee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	dd0b      	ble.n	800e012 <sulp+0x3a>
 800dffa:	2400      	movs	r4, #0
 800dffc:	051b      	lsls	r3, r3, #20
 800dffe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e006:	4622      	mov	r2, r4
 800e008:	462b      	mov	r3, r5
 800e00a:	f7f2 fad1 	bl	80005b0 <__aeabi_dmul>
 800e00e:	4604      	mov	r4, r0
 800e010:	460d      	mov	r5, r1
 800e012:	4620      	mov	r0, r4
 800e014:	4629      	mov	r1, r5
 800e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01a:	0000      	movs	r0, r0
 800e01c:	0000      	movs	r0, r0
	...

0800e020 <_strtod_l>:
 800e020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e024:	469b      	mov	fp, r3
 800e026:	2300      	movs	r3, #0
 800e028:	b09f      	sub	sp, #124	; 0x7c
 800e02a:	931a      	str	r3, [sp, #104]	; 0x68
 800e02c:	4b9e      	ldr	r3, [pc, #632]	; (800e2a8 <_strtod_l+0x288>)
 800e02e:	4682      	mov	sl, r0
 800e030:	681f      	ldr	r7, [r3, #0]
 800e032:	460e      	mov	r6, r1
 800e034:	4638      	mov	r0, r7
 800e036:	9215      	str	r2, [sp, #84]	; 0x54
 800e038:	f7f2 f8f6 	bl	8000228 <strlen>
 800e03c:	f04f 0800 	mov.w	r8, #0
 800e040:	4604      	mov	r4, r0
 800e042:	f04f 0900 	mov.w	r9, #0
 800e046:	9619      	str	r6, [sp, #100]	; 0x64
 800e048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e04a:	781a      	ldrb	r2, [r3, #0]
 800e04c:	2a2b      	cmp	r2, #43	; 0x2b
 800e04e:	d04c      	beq.n	800e0ea <_strtod_l+0xca>
 800e050:	d83a      	bhi.n	800e0c8 <_strtod_l+0xa8>
 800e052:	2a0d      	cmp	r2, #13
 800e054:	d833      	bhi.n	800e0be <_strtod_l+0x9e>
 800e056:	2a08      	cmp	r2, #8
 800e058:	d833      	bhi.n	800e0c2 <_strtod_l+0xa2>
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	d03d      	beq.n	800e0da <_strtod_l+0xba>
 800e05e:	2300      	movs	r3, #0
 800e060:	930a      	str	r3, [sp, #40]	; 0x28
 800e062:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e064:	782b      	ldrb	r3, [r5, #0]
 800e066:	2b30      	cmp	r3, #48	; 0x30
 800e068:	f040 80aa 	bne.w	800e1c0 <_strtod_l+0x1a0>
 800e06c:	786b      	ldrb	r3, [r5, #1]
 800e06e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e072:	2b58      	cmp	r3, #88	; 0x58
 800e074:	d166      	bne.n	800e144 <_strtod_l+0x124>
 800e076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e078:	4650      	mov	r0, sl
 800e07a:	9301      	str	r3, [sp, #4]
 800e07c:	ab1a      	add	r3, sp, #104	; 0x68
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	4a8a      	ldr	r2, [pc, #552]	; (800e2ac <_strtod_l+0x28c>)
 800e082:	f8cd b008 	str.w	fp, [sp, #8]
 800e086:	ab1b      	add	r3, sp, #108	; 0x6c
 800e088:	a919      	add	r1, sp, #100	; 0x64
 800e08a:	f002 f821 	bl	80100d0 <__gethex>
 800e08e:	f010 0607 	ands.w	r6, r0, #7
 800e092:	4604      	mov	r4, r0
 800e094:	d005      	beq.n	800e0a2 <_strtod_l+0x82>
 800e096:	2e06      	cmp	r6, #6
 800e098:	d129      	bne.n	800e0ee <_strtod_l+0xce>
 800e09a:	2300      	movs	r3, #0
 800e09c:	3501      	adds	r5, #1
 800e09e:	9519      	str	r5, [sp, #100]	; 0x64
 800e0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 858a 	bne.w	800ebbe <_strtod_l+0xb9e>
 800e0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ac:	b1d3      	cbz	r3, 800e0e4 <_strtod_l+0xc4>
 800e0ae:	4642      	mov	r2, r8
 800e0b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	b01f      	add	sp, #124	; 0x7c
 800e0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0be:	2a20      	cmp	r2, #32
 800e0c0:	d1cd      	bne.n	800e05e <_strtod_l+0x3e>
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	9319      	str	r3, [sp, #100]	; 0x64
 800e0c6:	e7bf      	b.n	800e048 <_strtod_l+0x28>
 800e0c8:	2a2d      	cmp	r2, #45	; 0x2d
 800e0ca:	d1c8      	bne.n	800e05e <_strtod_l+0x3e>
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	920a      	str	r2, [sp, #40]	; 0x28
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	9219      	str	r2, [sp, #100]	; 0x64
 800e0d4:	785b      	ldrb	r3, [r3, #1]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1c3      	bne.n	800e062 <_strtod_l+0x42>
 800e0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0dc:	9619      	str	r6, [sp, #100]	; 0x64
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f040 856b 	bne.w	800ebba <_strtod_l+0xb9a>
 800e0e4:	4642      	mov	r2, r8
 800e0e6:	464b      	mov	r3, r9
 800e0e8:	e7e4      	b.n	800e0b4 <_strtod_l+0x94>
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	e7ef      	b.n	800e0ce <_strtod_l+0xae>
 800e0ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e0f0:	b13a      	cbz	r2, 800e102 <_strtod_l+0xe2>
 800e0f2:	2135      	movs	r1, #53	; 0x35
 800e0f4:	a81c      	add	r0, sp, #112	; 0x70
 800e0f6:	f002 fff1 	bl	80110dc <__copybits>
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e0fe:	f002 fbb9 	bl	8010874 <_Bfree>
 800e102:	3e01      	subs	r6, #1
 800e104:	2e04      	cmp	r6, #4
 800e106:	d806      	bhi.n	800e116 <_strtod_l+0xf6>
 800e108:	e8df f006 	tbb	[pc, r6]
 800e10c:	1714030a 	.word	0x1714030a
 800e110:	0a          	.byte	0x0a
 800e111:	00          	.byte	0x00
 800e112:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e116:	0721      	lsls	r1, r4, #28
 800e118:	d5c3      	bpl.n	800e0a2 <_strtod_l+0x82>
 800e11a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e11e:	e7c0      	b.n	800e0a2 <_strtod_l+0x82>
 800e120:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e122:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800e126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e12a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e12e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e132:	e7f0      	b.n	800e116 <_strtod_l+0xf6>
 800e134:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e2b0 <_strtod_l+0x290>
 800e138:	e7ed      	b.n	800e116 <_strtod_l+0xf6>
 800e13a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e13e:	f04f 38ff 	mov.w	r8, #4294967295
 800e142:	e7e8      	b.n	800e116 <_strtod_l+0xf6>
 800e144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	9219      	str	r2, [sp, #100]	; 0x64
 800e14a:	785b      	ldrb	r3, [r3, #1]
 800e14c:	2b30      	cmp	r3, #48	; 0x30
 800e14e:	d0f9      	beq.n	800e144 <_strtod_l+0x124>
 800e150:	2b00      	cmp	r3, #0
 800e152:	d0a6      	beq.n	800e0a2 <_strtod_l+0x82>
 800e154:	2301      	movs	r3, #1
 800e156:	9307      	str	r3, [sp, #28]
 800e158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e15a:	220a      	movs	r2, #10
 800e15c:	9308      	str	r3, [sp, #32]
 800e15e:	2300      	movs	r3, #0
 800e160:	469b      	mov	fp, r3
 800e162:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e166:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e168:	7805      	ldrb	r5, [r0, #0]
 800e16a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e16e:	b2d9      	uxtb	r1, r3
 800e170:	2909      	cmp	r1, #9
 800e172:	d927      	bls.n	800e1c4 <_strtod_l+0x1a4>
 800e174:	4622      	mov	r2, r4
 800e176:	4639      	mov	r1, r7
 800e178:	f7ff ff1a 	bl	800dfb0 <strncmp>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d033      	beq.n	800e1e8 <_strtod_l+0x1c8>
 800e180:	2000      	movs	r0, #0
 800e182:	462a      	mov	r2, r5
 800e184:	465c      	mov	r4, fp
 800e186:	4603      	mov	r3, r0
 800e188:	9004      	str	r0, [sp, #16]
 800e18a:	2a65      	cmp	r2, #101	; 0x65
 800e18c:	d001      	beq.n	800e192 <_strtod_l+0x172>
 800e18e:	2a45      	cmp	r2, #69	; 0x45
 800e190:	d114      	bne.n	800e1bc <_strtod_l+0x19c>
 800e192:	b91c      	cbnz	r4, 800e19c <_strtod_l+0x17c>
 800e194:	9a07      	ldr	r2, [sp, #28]
 800e196:	4302      	orrs	r2, r0
 800e198:	d09f      	beq.n	800e0da <_strtod_l+0xba>
 800e19a:	2400      	movs	r4, #0
 800e19c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e19e:	1c72      	adds	r2, r6, #1
 800e1a0:	9219      	str	r2, [sp, #100]	; 0x64
 800e1a2:	7872      	ldrb	r2, [r6, #1]
 800e1a4:	2a2b      	cmp	r2, #43	; 0x2b
 800e1a6:	d079      	beq.n	800e29c <_strtod_l+0x27c>
 800e1a8:	2a2d      	cmp	r2, #45	; 0x2d
 800e1aa:	f000 8083 	beq.w	800e2b4 <_strtod_l+0x294>
 800e1ae:	2700      	movs	r7, #0
 800e1b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e1b4:	2909      	cmp	r1, #9
 800e1b6:	f240 8083 	bls.w	800e2c0 <_strtod_l+0x2a0>
 800e1ba:	9619      	str	r6, [sp, #100]	; 0x64
 800e1bc:	2500      	movs	r5, #0
 800e1be:	e09f      	b.n	800e300 <_strtod_l+0x2e0>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	e7c8      	b.n	800e156 <_strtod_l+0x136>
 800e1c4:	f1bb 0f08 	cmp.w	fp, #8
 800e1c8:	bfd5      	itete	le
 800e1ca:	9906      	ldrle	r1, [sp, #24]
 800e1cc:	9905      	ldrgt	r1, [sp, #20]
 800e1ce:	fb02 3301 	mlale	r3, r2, r1, r3
 800e1d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e1d6:	f100 0001 	add.w	r0, r0, #1
 800e1da:	bfd4      	ite	le
 800e1dc:	9306      	strle	r3, [sp, #24]
 800e1de:	9305      	strgt	r3, [sp, #20]
 800e1e0:	f10b 0b01 	add.w	fp, fp, #1
 800e1e4:	9019      	str	r0, [sp, #100]	; 0x64
 800e1e6:	e7be      	b.n	800e166 <_strtod_l+0x146>
 800e1e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1ea:	191a      	adds	r2, r3, r4
 800e1ec:	9219      	str	r2, [sp, #100]	; 0x64
 800e1ee:	5d1a      	ldrb	r2, [r3, r4]
 800e1f0:	f1bb 0f00 	cmp.w	fp, #0
 800e1f4:	d036      	beq.n	800e264 <_strtod_l+0x244>
 800e1f6:	465c      	mov	r4, fp
 800e1f8:	9004      	str	r0, [sp, #16]
 800e1fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e1fe:	2b09      	cmp	r3, #9
 800e200:	d912      	bls.n	800e228 <_strtod_l+0x208>
 800e202:	2301      	movs	r3, #1
 800e204:	e7c1      	b.n	800e18a <_strtod_l+0x16a>
 800e206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e208:	3001      	adds	r0, #1
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	9219      	str	r2, [sp, #100]	; 0x64
 800e20e:	785a      	ldrb	r2, [r3, #1]
 800e210:	2a30      	cmp	r2, #48	; 0x30
 800e212:	d0f8      	beq.n	800e206 <_strtod_l+0x1e6>
 800e214:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e218:	2b08      	cmp	r3, #8
 800e21a:	f200 84d5 	bhi.w	800ebc8 <_strtod_l+0xba8>
 800e21e:	9004      	str	r0, [sp, #16]
 800e220:	2000      	movs	r0, #0
 800e222:	4604      	mov	r4, r0
 800e224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e226:	9308      	str	r3, [sp, #32]
 800e228:	3a30      	subs	r2, #48	; 0x30
 800e22a:	f100 0301 	add.w	r3, r0, #1
 800e22e:	d013      	beq.n	800e258 <_strtod_l+0x238>
 800e230:	9904      	ldr	r1, [sp, #16]
 800e232:	1905      	adds	r5, r0, r4
 800e234:	4419      	add	r1, r3
 800e236:	9104      	str	r1, [sp, #16]
 800e238:	4623      	mov	r3, r4
 800e23a:	210a      	movs	r1, #10
 800e23c:	42ab      	cmp	r3, r5
 800e23e:	d113      	bne.n	800e268 <_strtod_l+0x248>
 800e240:	1823      	adds	r3, r4, r0
 800e242:	2b08      	cmp	r3, #8
 800e244:	f104 0401 	add.w	r4, r4, #1
 800e248:	4404      	add	r4, r0
 800e24a:	dc1b      	bgt.n	800e284 <_strtod_l+0x264>
 800e24c:	230a      	movs	r3, #10
 800e24e:	9906      	ldr	r1, [sp, #24]
 800e250:	fb03 2301 	mla	r3, r3, r1, r2
 800e254:	9306      	str	r3, [sp, #24]
 800e256:	2300      	movs	r3, #0
 800e258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e25a:	4618      	mov	r0, r3
 800e25c:	1c51      	adds	r1, r2, #1
 800e25e:	9119      	str	r1, [sp, #100]	; 0x64
 800e260:	7852      	ldrb	r2, [r2, #1]
 800e262:	e7ca      	b.n	800e1fa <_strtod_l+0x1da>
 800e264:	4658      	mov	r0, fp
 800e266:	e7d3      	b.n	800e210 <_strtod_l+0x1f0>
 800e268:	2b08      	cmp	r3, #8
 800e26a:	dc04      	bgt.n	800e276 <_strtod_l+0x256>
 800e26c:	9f06      	ldr	r7, [sp, #24]
 800e26e:	434f      	muls	r7, r1
 800e270:	9706      	str	r7, [sp, #24]
 800e272:	3301      	adds	r3, #1
 800e274:	e7e2      	b.n	800e23c <_strtod_l+0x21c>
 800e276:	1c5f      	adds	r7, r3, #1
 800e278:	2f10      	cmp	r7, #16
 800e27a:	bfde      	ittt	le
 800e27c:	9f05      	ldrle	r7, [sp, #20]
 800e27e:	434f      	mulle	r7, r1
 800e280:	9705      	strle	r7, [sp, #20]
 800e282:	e7f6      	b.n	800e272 <_strtod_l+0x252>
 800e284:	2c10      	cmp	r4, #16
 800e286:	bfdf      	itttt	le
 800e288:	230a      	movle	r3, #10
 800e28a:	9905      	ldrle	r1, [sp, #20]
 800e28c:	fb03 2301 	mlale	r3, r3, r1, r2
 800e290:	9305      	strle	r3, [sp, #20]
 800e292:	e7e0      	b.n	800e256 <_strtod_l+0x236>
 800e294:	2300      	movs	r3, #0
 800e296:	9304      	str	r3, [sp, #16]
 800e298:	2301      	movs	r3, #1
 800e29a:	e77b      	b.n	800e194 <_strtod_l+0x174>
 800e29c:	2700      	movs	r7, #0
 800e29e:	1cb2      	adds	r2, r6, #2
 800e2a0:	9219      	str	r2, [sp, #100]	; 0x64
 800e2a2:	78b2      	ldrb	r2, [r6, #2]
 800e2a4:	e784      	b.n	800e1b0 <_strtod_l+0x190>
 800e2a6:	bf00      	nop
 800e2a8:	08034424 	.word	0x08034424
 800e2ac:	080341dc 	.word	0x080341dc
 800e2b0:	7ff00000 	.word	0x7ff00000
 800e2b4:	2701      	movs	r7, #1
 800e2b6:	e7f2      	b.n	800e29e <_strtod_l+0x27e>
 800e2b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2ba:	1c51      	adds	r1, r2, #1
 800e2bc:	9119      	str	r1, [sp, #100]	; 0x64
 800e2be:	7852      	ldrb	r2, [r2, #1]
 800e2c0:	2a30      	cmp	r2, #48	; 0x30
 800e2c2:	d0f9      	beq.n	800e2b8 <_strtod_l+0x298>
 800e2c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e2c8:	2908      	cmp	r1, #8
 800e2ca:	f63f af77 	bhi.w	800e1bc <_strtod_l+0x19c>
 800e2ce:	f04f 0e0a 	mov.w	lr, #10
 800e2d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e2d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e2da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2dc:	1c51      	adds	r1, r2, #1
 800e2de:	9119      	str	r1, [sp, #100]	; 0x64
 800e2e0:	7852      	ldrb	r2, [r2, #1]
 800e2e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e2e6:	2d09      	cmp	r5, #9
 800e2e8:	d935      	bls.n	800e356 <_strtod_l+0x336>
 800e2ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e2ec:	1b49      	subs	r1, r1, r5
 800e2ee:	2908      	cmp	r1, #8
 800e2f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e2f4:	dc02      	bgt.n	800e2fc <_strtod_l+0x2dc>
 800e2f6:	4565      	cmp	r5, ip
 800e2f8:	bfa8      	it	ge
 800e2fa:	4665      	movge	r5, ip
 800e2fc:	b107      	cbz	r7, 800e300 <_strtod_l+0x2e0>
 800e2fe:	426d      	negs	r5, r5
 800e300:	2c00      	cmp	r4, #0
 800e302:	d14c      	bne.n	800e39e <_strtod_l+0x37e>
 800e304:	9907      	ldr	r1, [sp, #28]
 800e306:	4301      	orrs	r1, r0
 800e308:	f47f aecb 	bne.w	800e0a2 <_strtod_l+0x82>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f47f aee4 	bne.w	800e0da <_strtod_l+0xba>
 800e312:	2a69      	cmp	r2, #105	; 0x69
 800e314:	d026      	beq.n	800e364 <_strtod_l+0x344>
 800e316:	dc23      	bgt.n	800e360 <_strtod_l+0x340>
 800e318:	2a49      	cmp	r2, #73	; 0x49
 800e31a:	d023      	beq.n	800e364 <_strtod_l+0x344>
 800e31c:	2a4e      	cmp	r2, #78	; 0x4e
 800e31e:	f47f aedc 	bne.w	800e0da <_strtod_l+0xba>
 800e322:	499d      	ldr	r1, [pc, #628]	; (800e598 <_strtod_l+0x578>)
 800e324:	a819      	add	r0, sp, #100	; 0x64
 800e326:	f002 f921 	bl	801056c <__match>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f43f aed5 	beq.w	800e0da <_strtod_l+0xba>
 800e330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b28      	cmp	r3, #40	; 0x28
 800e336:	d12c      	bne.n	800e392 <_strtod_l+0x372>
 800e338:	4998      	ldr	r1, [pc, #608]	; (800e59c <_strtod_l+0x57c>)
 800e33a:	aa1c      	add	r2, sp, #112	; 0x70
 800e33c:	a819      	add	r0, sp, #100	; 0x64
 800e33e:	f002 f929 	bl	8010594 <__hexnan>
 800e342:	2805      	cmp	r0, #5
 800e344:	d125      	bne.n	800e392 <_strtod_l+0x372>
 800e346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e348:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e34c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e350:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e354:	e6a5      	b.n	800e0a2 <_strtod_l+0x82>
 800e356:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e35a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e35e:	e7bc      	b.n	800e2da <_strtod_l+0x2ba>
 800e360:	2a6e      	cmp	r2, #110	; 0x6e
 800e362:	e7dc      	b.n	800e31e <_strtod_l+0x2fe>
 800e364:	498e      	ldr	r1, [pc, #568]	; (800e5a0 <_strtod_l+0x580>)
 800e366:	a819      	add	r0, sp, #100	; 0x64
 800e368:	f002 f900 	bl	801056c <__match>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f43f aeb4 	beq.w	800e0da <_strtod_l+0xba>
 800e372:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e374:	498b      	ldr	r1, [pc, #556]	; (800e5a4 <_strtod_l+0x584>)
 800e376:	3b01      	subs	r3, #1
 800e378:	a819      	add	r0, sp, #100	; 0x64
 800e37a:	9319      	str	r3, [sp, #100]	; 0x64
 800e37c:	f002 f8f6 	bl	801056c <__match>
 800e380:	b910      	cbnz	r0, 800e388 <_strtod_l+0x368>
 800e382:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e384:	3301      	adds	r3, #1
 800e386:	9319      	str	r3, [sp, #100]	; 0x64
 800e388:	f04f 0800 	mov.w	r8, #0
 800e38c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e5a8 <_strtod_l+0x588>
 800e390:	e687      	b.n	800e0a2 <_strtod_l+0x82>
 800e392:	4886      	ldr	r0, [pc, #536]	; (800e5ac <_strtod_l+0x58c>)
 800e394:	f003 fad2 	bl	801193c <nan>
 800e398:	4680      	mov	r8, r0
 800e39a:	4689      	mov	r9, r1
 800e39c:	e681      	b.n	800e0a2 <_strtod_l+0x82>
 800e39e:	9b04      	ldr	r3, [sp, #16]
 800e3a0:	f1bb 0f00 	cmp.w	fp, #0
 800e3a4:	bf08      	it	eq
 800e3a6:	46a3      	moveq	fp, r4
 800e3a8:	1aeb      	subs	r3, r5, r3
 800e3aa:	2c10      	cmp	r4, #16
 800e3ac:	9806      	ldr	r0, [sp, #24]
 800e3ae:	4626      	mov	r6, r4
 800e3b0:	9307      	str	r3, [sp, #28]
 800e3b2:	bfa8      	it	ge
 800e3b4:	2610      	movge	r6, #16
 800e3b6:	f7f2 f881 	bl	80004bc <__aeabi_ui2d>
 800e3ba:	2c09      	cmp	r4, #9
 800e3bc:	4680      	mov	r8, r0
 800e3be:	4689      	mov	r9, r1
 800e3c0:	dd13      	ble.n	800e3ea <_strtod_l+0x3ca>
 800e3c2:	4b7b      	ldr	r3, [pc, #492]	; (800e5b0 <_strtod_l+0x590>)
 800e3c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e3c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e3cc:	f7f2 f8f0 	bl	80005b0 <__aeabi_dmul>
 800e3d0:	4680      	mov	r8, r0
 800e3d2:	9805      	ldr	r0, [sp, #20]
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	f7f2 f871 	bl	80004bc <__aeabi_ui2d>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	460b      	mov	r3, r1
 800e3de:	4640      	mov	r0, r8
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	f7f1 ff2f 	bl	8000244 <__adddf3>
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	4689      	mov	r9, r1
 800e3ea:	2c0f      	cmp	r4, #15
 800e3ec:	dc36      	bgt.n	800e45c <_strtod_l+0x43c>
 800e3ee:	9b07      	ldr	r3, [sp, #28]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f43f ae56 	beq.w	800e0a2 <_strtod_l+0x82>
 800e3f6:	dd22      	ble.n	800e43e <_strtod_l+0x41e>
 800e3f8:	2b16      	cmp	r3, #22
 800e3fa:	dc09      	bgt.n	800e410 <_strtod_l+0x3f0>
 800e3fc:	496c      	ldr	r1, [pc, #432]	; (800e5b0 <_strtod_l+0x590>)
 800e3fe:	4642      	mov	r2, r8
 800e400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e404:	464b      	mov	r3, r9
 800e406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e40a:	f7f2 f8d1 	bl	80005b0 <__aeabi_dmul>
 800e40e:	e7c3      	b.n	800e398 <_strtod_l+0x378>
 800e410:	9a07      	ldr	r2, [sp, #28]
 800e412:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e416:	4293      	cmp	r3, r2
 800e418:	db20      	blt.n	800e45c <_strtod_l+0x43c>
 800e41a:	4d65      	ldr	r5, [pc, #404]	; (800e5b0 <_strtod_l+0x590>)
 800e41c:	f1c4 040f 	rsb	r4, r4, #15
 800e420:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e424:	4642      	mov	r2, r8
 800e426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e42a:	464b      	mov	r3, r9
 800e42c:	f7f2 f8c0 	bl	80005b0 <__aeabi_dmul>
 800e430:	9b07      	ldr	r3, [sp, #28]
 800e432:	1b1c      	subs	r4, r3, r4
 800e434:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e43c:	e7e5      	b.n	800e40a <_strtod_l+0x3ea>
 800e43e:	9b07      	ldr	r3, [sp, #28]
 800e440:	3316      	adds	r3, #22
 800e442:	db0b      	blt.n	800e45c <_strtod_l+0x43c>
 800e444:	9b04      	ldr	r3, [sp, #16]
 800e446:	4640      	mov	r0, r8
 800e448:	1b5d      	subs	r5, r3, r5
 800e44a:	4b59      	ldr	r3, [pc, #356]	; (800e5b0 <_strtod_l+0x590>)
 800e44c:	4649      	mov	r1, r9
 800e44e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e452:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e456:	f7f2 f9d5 	bl	8000804 <__aeabi_ddiv>
 800e45a:	e79d      	b.n	800e398 <_strtod_l+0x378>
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	1ba6      	subs	r6, r4, r6
 800e460:	441e      	add	r6, r3
 800e462:	2e00      	cmp	r6, #0
 800e464:	dd74      	ble.n	800e550 <_strtod_l+0x530>
 800e466:	f016 030f 	ands.w	r3, r6, #15
 800e46a:	d00a      	beq.n	800e482 <_strtod_l+0x462>
 800e46c:	4950      	ldr	r1, [pc, #320]	; (800e5b0 <_strtod_l+0x590>)
 800e46e:	4642      	mov	r2, r8
 800e470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e478:	464b      	mov	r3, r9
 800e47a:	f7f2 f899 	bl	80005b0 <__aeabi_dmul>
 800e47e:	4680      	mov	r8, r0
 800e480:	4689      	mov	r9, r1
 800e482:	f036 060f 	bics.w	r6, r6, #15
 800e486:	d052      	beq.n	800e52e <_strtod_l+0x50e>
 800e488:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e48c:	dd27      	ble.n	800e4de <_strtod_l+0x4be>
 800e48e:	f04f 0b00 	mov.w	fp, #0
 800e492:	f8cd b010 	str.w	fp, [sp, #16]
 800e496:	f8cd b020 	str.w	fp, [sp, #32]
 800e49a:	f8cd b018 	str.w	fp, [sp, #24]
 800e49e:	2322      	movs	r3, #34	; 0x22
 800e4a0:	f04f 0800 	mov.w	r8, #0
 800e4a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e5a8 <_strtod_l+0x588>
 800e4a8:	f8ca 3000 	str.w	r3, [sl]
 800e4ac:	9b08      	ldr	r3, [sp, #32]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f43f adf7 	beq.w	800e0a2 <_strtod_l+0x82>
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e4b8:	f002 f9dc 	bl	8010874 <_Bfree>
 800e4bc:	4650      	mov	r0, sl
 800e4be:	9906      	ldr	r1, [sp, #24]
 800e4c0:	f002 f9d8 	bl	8010874 <_Bfree>
 800e4c4:	4650      	mov	r0, sl
 800e4c6:	9904      	ldr	r1, [sp, #16]
 800e4c8:	f002 f9d4 	bl	8010874 <_Bfree>
 800e4cc:	4650      	mov	r0, sl
 800e4ce:	9908      	ldr	r1, [sp, #32]
 800e4d0:	f002 f9d0 	bl	8010874 <_Bfree>
 800e4d4:	4659      	mov	r1, fp
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	f002 f9cc 	bl	8010874 <_Bfree>
 800e4dc:	e5e1      	b.n	800e0a2 <_strtod_l+0x82>
 800e4de:	4b35      	ldr	r3, [pc, #212]	; (800e5b4 <_strtod_l+0x594>)
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	9305      	str	r3, [sp, #20]
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	461f      	mov	r7, r3
 800e4ea:	1136      	asrs	r6, r6, #4
 800e4ec:	2e01      	cmp	r6, #1
 800e4ee:	dc21      	bgt.n	800e534 <_strtod_l+0x514>
 800e4f0:	b10b      	cbz	r3, 800e4f6 <_strtod_l+0x4d6>
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	4689      	mov	r9, r1
 800e4f6:	4b2f      	ldr	r3, [pc, #188]	; (800e5b4 <_strtod_l+0x594>)
 800e4f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e4fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e500:	4642      	mov	r2, r8
 800e502:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e506:	464b      	mov	r3, r9
 800e508:	f7f2 f852 	bl	80005b0 <__aeabi_dmul>
 800e50c:	4b26      	ldr	r3, [pc, #152]	; (800e5a8 <_strtod_l+0x588>)
 800e50e:	460a      	mov	r2, r1
 800e510:	400b      	ands	r3, r1
 800e512:	4929      	ldr	r1, [pc, #164]	; (800e5b8 <_strtod_l+0x598>)
 800e514:	4680      	mov	r8, r0
 800e516:	428b      	cmp	r3, r1
 800e518:	d8b9      	bhi.n	800e48e <_strtod_l+0x46e>
 800e51a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e51e:	428b      	cmp	r3, r1
 800e520:	bf86      	itte	hi
 800e522:	f04f 38ff 	movhi.w	r8, #4294967295
 800e526:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e5bc <_strtod_l+0x59c>
 800e52a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e52e:	2300      	movs	r3, #0
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	e07f      	b.n	800e634 <_strtod_l+0x614>
 800e534:	07f2      	lsls	r2, r6, #31
 800e536:	d505      	bpl.n	800e544 <_strtod_l+0x524>
 800e538:	9b05      	ldr	r3, [sp, #20]
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f2 f837 	bl	80005b0 <__aeabi_dmul>
 800e542:	2301      	movs	r3, #1
 800e544:	9a05      	ldr	r2, [sp, #20]
 800e546:	3701      	adds	r7, #1
 800e548:	3208      	adds	r2, #8
 800e54a:	1076      	asrs	r6, r6, #1
 800e54c:	9205      	str	r2, [sp, #20]
 800e54e:	e7cd      	b.n	800e4ec <_strtod_l+0x4cc>
 800e550:	d0ed      	beq.n	800e52e <_strtod_l+0x50e>
 800e552:	4276      	negs	r6, r6
 800e554:	f016 020f 	ands.w	r2, r6, #15
 800e558:	d00a      	beq.n	800e570 <_strtod_l+0x550>
 800e55a:	4b15      	ldr	r3, [pc, #84]	; (800e5b0 <_strtod_l+0x590>)
 800e55c:	4640      	mov	r0, r8
 800e55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e562:	4649      	mov	r1, r9
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f2 f94c 	bl	8000804 <__aeabi_ddiv>
 800e56c:	4680      	mov	r8, r0
 800e56e:	4689      	mov	r9, r1
 800e570:	1136      	asrs	r6, r6, #4
 800e572:	d0dc      	beq.n	800e52e <_strtod_l+0x50e>
 800e574:	2e1f      	cmp	r6, #31
 800e576:	dd23      	ble.n	800e5c0 <_strtod_l+0x5a0>
 800e578:	f04f 0b00 	mov.w	fp, #0
 800e57c:	f8cd b010 	str.w	fp, [sp, #16]
 800e580:	f8cd b020 	str.w	fp, [sp, #32]
 800e584:	f8cd b018 	str.w	fp, [sp, #24]
 800e588:	2322      	movs	r3, #34	; 0x22
 800e58a:	f04f 0800 	mov.w	r8, #0
 800e58e:	f04f 0900 	mov.w	r9, #0
 800e592:	f8ca 3000 	str.w	r3, [sl]
 800e596:	e789      	b.n	800e4ac <_strtod_l+0x48c>
 800e598:	080341ad 	.word	0x080341ad
 800e59c:	080341f0 	.word	0x080341f0
 800e5a0:	080341a5 	.word	0x080341a5
 800e5a4:	080342e3 	.word	0x080342e3
 800e5a8:	7ff00000 	.word	0x7ff00000
 800e5ac:	080342df 	.word	0x080342df
 800e5b0:	080344c0 	.word	0x080344c0
 800e5b4:	08034498 	.word	0x08034498
 800e5b8:	7ca00000 	.word	0x7ca00000
 800e5bc:	7fefffff 	.word	0x7fefffff
 800e5c0:	f016 0310 	ands.w	r3, r6, #16
 800e5c4:	bf18      	it	ne
 800e5c6:	236a      	movne	r3, #106	; 0x6a
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	9305      	str	r3, [sp, #20]
 800e5cc:	4649      	mov	r1, r9
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	4fb0      	ldr	r7, [pc, #704]	; (800e894 <_strtod_l+0x874>)
 800e5d2:	07f2      	lsls	r2, r6, #31
 800e5d4:	d504      	bpl.n	800e5e0 <_strtod_l+0x5c0>
 800e5d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5da:	f7f1 ffe9 	bl	80005b0 <__aeabi_dmul>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	1076      	asrs	r6, r6, #1
 800e5e2:	f107 0708 	add.w	r7, r7, #8
 800e5e6:	d1f4      	bne.n	800e5d2 <_strtod_l+0x5b2>
 800e5e8:	b10b      	cbz	r3, 800e5ee <_strtod_l+0x5ce>
 800e5ea:	4680      	mov	r8, r0
 800e5ec:	4689      	mov	r9, r1
 800e5ee:	9b05      	ldr	r3, [sp, #20]
 800e5f0:	b1c3      	cbz	r3, 800e624 <_strtod_l+0x604>
 800e5f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e5f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	dd11      	ble.n	800e624 <_strtod_l+0x604>
 800e600:	2b1f      	cmp	r3, #31
 800e602:	f340 8127 	ble.w	800e854 <_strtod_l+0x834>
 800e606:	2b34      	cmp	r3, #52	; 0x34
 800e608:	bfd8      	it	le
 800e60a:	f04f 33ff 	movle.w	r3, #4294967295
 800e60e:	f04f 0800 	mov.w	r8, #0
 800e612:	bfcf      	iteee	gt
 800e614:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e61c:	fa03 f202 	lslle.w	r2, r3, r2
 800e620:	ea02 0901 	andle.w	r9, r2, r1
 800e624:	2200      	movs	r2, #0
 800e626:	2300      	movs	r3, #0
 800e628:	4640      	mov	r0, r8
 800e62a:	4649      	mov	r1, r9
 800e62c:	f7f2 fa28 	bl	8000a80 <__aeabi_dcmpeq>
 800e630:	2800      	cmp	r0, #0
 800e632:	d1a1      	bne.n	800e578 <_strtod_l+0x558>
 800e634:	9b06      	ldr	r3, [sp, #24]
 800e636:	465a      	mov	r2, fp
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4650      	mov	r0, sl
 800e63c:	4623      	mov	r3, r4
 800e63e:	9908      	ldr	r1, [sp, #32]
 800e640:	f002 f980 	bl	8010944 <__s2b>
 800e644:	9008      	str	r0, [sp, #32]
 800e646:	2800      	cmp	r0, #0
 800e648:	f43f af21 	beq.w	800e48e <_strtod_l+0x46e>
 800e64c:	9b04      	ldr	r3, [sp, #16]
 800e64e:	f04f 0b00 	mov.w	fp, #0
 800e652:	1b5d      	subs	r5, r3, r5
 800e654:	9b07      	ldr	r3, [sp, #28]
 800e656:	f8cd b010 	str.w	fp, [sp, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	bfb4      	ite	lt
 800e65e:	462b      	movlt	r3, r5
 800e660:	2300      	movge	r3, #0
 800e662:	930e      	str	r3, [sp, #56]	; 0x38
 800e664:	9b07      	ldr	r3, [sp, #28]
 800e666:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e66a:	9314      	str	r3, [sp, #80]	; 0x50
 800e66c:	9b08      	ldr	r3, [sp, #32]
 800e66e:	4650      	mov	r0, sl
 800e670:	6859      	ldr	r1, [r3, #4]
 800e672:	f002 f8bf 	bl	80107f4 <_Balloc>
 800e676:	9006      	str	r0, [sp, #24]
 800e678:	2800      	cmp	r0, #0
 800e67a:	f43f af10 	beq.w	800e49e <_strtod_l+0x47e>
 800e67e:	9b08      	ldr	r3, [sp, #32]
 800e680:	300c      	adds	r0, #12
 800e682:	691a      	ldr	r2, [r3, #16]
 800e684:	f103 010c 	add.w	r1, r3, #12
 800e688:	3202      	adds	r2, #2
 800e68a:	0092      	lsls	r2, r2, #2
 800e68c:	f7fe fd3e 	bl	800d10c <memcpy>
 800e690:	ab1c      	add	r3, sp, #112	; 0x70
 800e692:	9301      	str	r3, [sp, #4]
 800e694:	ab1b      	add	r3, sp, #108	; 0x6c
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	4642      	mov	r2, r8
 800e69a:	464b      	mov	r3, r9
 800e69c:	4650      	mov	r0, sl
 800e69e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e6a2:	f002 fc91 	bl	8010fc8 <__d2b>
 800e6a6:	901a      	str	r0, [sp, #104]	; 0x68
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	f43f aef8 	beq.w	800e49e <_strtod_l+0x47e>
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	4650      	mov	r0, sl
 800e6b2:	f002 f9df 	bl	8010a74 <__i2b>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	9004      	str	r0, [sp, #16]
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	f43f aeef 	beq.w	800e49e <_strtod_l+0x47e>
 800e6c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e6c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e6c4:	2d00      	cmp	r5, #0
 800e6c6:	bfab      	itete	ge
 800e6c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e6ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e6cc:	18ee      	addge	r6, r5, r3
 800e6ce:	1b5c      	sublt	r4, r3, r5
 800e6d0:	9b05      	ldr	r3, [sp, #20]
 800e6d2:	bfa8      	it	ge
 800e6d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e6d6:	eba5 0503 	sub.w	r5, r5, r3
 800e6da:	4415      	add	r5, r2
 800e6dc:	4b6e      	ldr	r3, [pc, #440]	; (800e898 <_strtod_l+0x878>)
 800e6de:	f105 35ff 	add.w	r5, r5, #4294967295
 800e6e2:	bfb8      	it	lt
 800e6e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6ec:	f280 80c4 	bge.w	800e878 <_strtod_l+0x858>
 800e6f0:	1b5b      	subs	r3, r3, r5
 800e6f2:	2b1f      	cmp	r3, #31
 800e6f4:	f04f 0701 	mov.w	r7, #1
 800e6f8:	eba2 0203 	sub.w	r2, r2, r3
 800e6fc:	f300 80b1 	bgt.w	800e862 <_strtod_l+0x842>
 800e700:	2500      	movs	r5, #0
 800e702:	fa07 f303 	lsl.w	r3, r7, r3
 800e706:	930f      	str	r3, [sp, #60]	; 0x3c
 800e708:	18b7      	adds	r7, r6, r2
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	42be      	cmp	r6, r7
 800e70e:	4414      	add	r4, r2
 800e710:	441c      	add	r4, r3
 800e712:	4633      	mov	r3, r6
 800e714:	bfa8      	it	ge
 800e716:	463b      	movge	r3, r7
 800e718:	42a3      	cmp	r3, r4
 800e71a:	bfa8      	it	ge
 800e71c:	4623      	movge	r3, r4
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfc2      	ittt	gt
 800e722:	1aff      	subgt	r7, r7, r3
 800e724:	1ae4      	subgt	r4, r4, r3
 800e726:	1af6      	subgt	r6, r6, r3
 800e728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	dd17      	ble.n	800e75e <_strtod_l+0x73e>
 800e72e:	461a      	mov	r2, r3
 800e730:	4650      	mov	r0, sl
 800e732:	9904      	ldr	r1, [sp, #16]
 800e734:	f002 fa5c 	bl	8010bf0 <__pow5mult>
 800e738:	9004      	str	r0, [sp, #16]
 800e73a:	2800      	cmp	r0, #0
 800e73c:	f43f aeaf 	beq.w	800e49e <_strtod_l+0x47e>
 800e740:	4601      	mov	r1, r0
 800e742:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e744:	4650      	mov	r0, sl
 800e746:	f002 f9ab 	bl	8010aa0 <__multiply>
 800e74a:	9009      	str	r0, [sp, #36]	; 0x24
 800e74c:	2800      	cmp	r0, #0
 800e74e:	f43f aea6 	beq.w	800e49e <_strtod_l+0x47e>
 800e752:	4650      	mov	r0, sl
 800e754:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e756:	f002 f88d 	bl	8010874 <_Bfree>
 800e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75c:	931a      	str	r3, [sp, #104]	; 0x68
 800e75e:	2f00      	cmp	r7, #0
 800e760:	f300 808e 	bgt.w	800e880 <_strtod_l+0x860>
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dd08      	ble.n	800e77c <_strtod_l+0x75c>
 800e76a:	4650      	mov	r0, sl
 800e76c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e76e:	9906      	ldr	r1, [sp, #24]
 800e770:	f002 fa3e 	bl	8010bf0 <__pow5mult>
 800e774:	9006      	str	r0, [sp, #24]
 800e776:	2800      	cmp	r0, #0
 800e778:	f43f ae91 	beq.w	800e49e <_strtod_l+0x47e>
 800e77c:	2c00      	cmp	r4, #0
 800e77e:	dd08      	ble.n	800e792 <_strtod_l+0x772>
 800e780:	4622      	mov	r2, r4
 800e782:	4650      	mov	r0, sl
 800e784:	9906      	ldr	r1, [sp, #24]
 800e786:	f002 fa8d 	bl	8010ca4 <__lshift>
 800e78a:	9006      	str	r0, [sp, #24]
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f43f ae86 	beq.w	800e49e <_strtod_l+0x47e>
 800e792:	2e00      	cmp	r6, #0
 800e794:	dd08      	ble.n	800e7a8 <_strtod_l+0x788>
 800e796:	4632      	mov	r2, r6
 800e798:	4650      	mov	r0, sl
 800e79a:	9904      	ldr	r1, [sp, #16]
 800e79c:	f002 fa82 	bl	8010ca4 <__lshift>
 800e7a0:	9004      	str	r0, [sp, #16]
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	f43f ae7b 	beq.w	800e49e <_strtod_l+0x47e>
 800e7a8:	4650      	mov	r0, sl
 800e7aa:	9a06      	ldr	r2, [sp, #24]
 800e7ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e7ae:	f002 fb05 	bl	8010dbc <__mdiff>
 800e7b2:	4683      	mov	fp, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f43f ae72 	beq.w	800e49e <_strtod_l+0x47e>
 800e7ba:	2400      	movs	r4, #0
 800e7bc:	68c3      	ldr	r3, [r0, #12]
 800e7be:	9904      	ldr	r1, [sp, #16]
 800e7c0:	60c4      	str	r4, [r0, #12]
 800e7c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7c4:	f002 fade 	bl	8010d84 <__mcmp>
 800e7c8:	42a0      	cmp	r0, r4
 800e7ca:	da6b      	bge.n	800e8a4 <_strtod_l+0x884>
 800e7cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7ce:	ea53 0308 	orrs.w	r3, r3, r8
 800e7d2:	f040 8091 	bne.w	800e8f8 <_strtod_l+0x8d8>
 800e7d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f040 808c 	bne.w	800e8f8 <_strtod_l+0x8d8>
 800e7e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7e4:	0d1b      	lsrs	r3, r3, #20
 800e7e6:	051b      	lsls	r3, r3, #20
 800e7e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e7ec:	f240 8084 	bls.w	800e8f8 <_strtod_l+0x8d8>
 800e7f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e7f4:	b91b      	cbnz	r3, 800e7fe <_strtod_l+0x7de>
 800e7f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	dd7c      	ble.n	800e8f8 <_strtod_l+0x8d8>
 800e7fe:	4659      	mov	r1, fp
 800e800:	2201      	movs	r2, #1
 800e802:	4650      	mov	r0, sl
 800e804:	f002 fa4e 	bl	8010ca4 <__lshift>
 800e808:	9904      	ldr	r1, [sp, #16]
 800e80a:	4683      	mov	fp, r0
 800e80c:	f002 faba 	bl	8010d84 <__mcmp>
 800e810:	2800      	cmp	r0, #0
 800e812:	dd71      	ble.n	800e8f8 <_strtod_l+0x8d8>
 800e814:	9905      	ldr	r1, [sp, #20]
 800e816:	464b      	mov	r3, r9
 800e818:	4a20      	ldr	r2, [pc, #128]	; (800e89c <_strtod_l+0x87c>)
 800e81a:	2900      	cmp	r1, #0
 800e81c:	f000 808c 	beq.w	800e938 <_strtod_l+0x918>
 800e820:	ea02 0109 	and.w	r1, r2, r9
 800e824:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e828:	f300 8086 	bgt.w	800e938 <_strtod_l+0x918>
 800e82c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e830:	f77f aeaa 	ble.w	800e588 <_strtod_l+0x568>
 800e834:	4640      	mov	r0, r8
 800e836:	4649      	mov	r1, r9
 800e838:	4b19      	ldr	r3, [pc, #100]	; (800e8a0 <_strtod_l+0x880>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	f7f1 feb8 	bl	80005b0 <__aeabi_dmul>
 800e840:	460b      	mov	r3, r1
 800e842:	4303      	orrs	r3, r0
 800e844:	bf08      	it	eq
 800e846:	2322      	moveq	r3, #34	; 0x22
 800e848:	4680      	mov	r8, r0
 800e84a:	4689      	mov	r9, r1
 800e84c:	bf08      	it	eq
 800e84e:	f8ca 3000 	streq.w	r3, [sl]
 800e852:	e62f      	b.n	800e4b4 <_strtod_l+0x494>
 800e854:	f04f 32ff 	mov.w	r2, #4294967295
 800e858:	fa02 f303 	lsl.w	r3, r2, r3
 800e85c:	ea03 0808 	and.w	r8, r3, r8
 800e860:	e6e0      	b.n	800e624 <_strtod_l+0x604>
 800e862:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e866:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e86a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e86e:	35e2      	adds	r5, #226	; 0xe2
 800e870:	fa07 f505 	lsl.w	r5, r7, r5
 800e874:	970f      	str	r7, [sp, #60]	; 0x3c
 800e876:	e747      	b.n	800e708 <_strtod_l+0x6e8>
 800e878:	2301      	movs	r3, #1
 800e87a:	2500      	movs	r5, #0
 800e87c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e87e:	e743      	b.n	800e708 <_strtod_l+0x6e8>
 800e880:	463a      	mov	r2, r7
 800e882:	4650      	mov	r0, sl
 800e884:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e886:	f002 fa0d 	bl	8010ca4 <__lshift>
 800e88a:	901a      	str	r0, [sp, #104]	; 0x68
 800e88c:	2800      	cmp	r0, #0
 800e88e:	f47f af69 	bne.w	800e764 <_strtod_l+0x744>
 800e892:	e604      	b.n	800e49e <_strtod_l+0x47e>
 800e894:	08034208 	.word	0x08034208
 800e898:	fffffc02 	.word	0xfffffc02
 800e89c:	7ff00000 	.word	0x7ff00000
 800e8a0:	39500000 	.word	0x39500000
 800e8a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e8a8:	d165      	bne.n	800e976 <_strtod_l+0x956>
 800e8aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8b0:	b35a      	cbz	r2, 800e90a <_strtod_l+0x8ea>
 800e8b2:	4a99      	ldr	r2, [pc, #612]	; (800eb18 <_strtod_l+0xaf8>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d12b      	bne.n	800e910 <_strtod_l+0x8f0>
 800e8b8:	9b05      	ldr	r3, [sp, #20]
 800e8ba:	4641      	mov	r1, r8
 800e8bc:	b303      	cbz	r3, 800e900 <_strtod_l+0x8e0>
 800e8be:	464a      	mov	r2, r9
 800e8c0:	4b96      	ldr	r3, [pc, #600]	; (800eb1c <_strtod_l+0xafc>)
 800e8c2:	4013      	ands	r3, r2
 800e8c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8cc:	d81b      	bhi.n	800e906 <_strtod_l+0x8e6>
 800e8ce:	0d1b      	lsrs	r3, r3, #20
 800e8d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d8:	4299      	cmp	r1, r3
 800e8da:	d119      	bne.n	800e910 <_strtod_l+0x8f0>
 800e8dc:	4b90      	ldr	r3, [pc, #576]	; (800eb20 <_strtod_l+0xb00>)
 800e8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d102      	bne.n	800e8ea <_strtod_l+0x8ca>
 800e8e4:	3101      	adds	r1, #1
 800e8e6:	f43f adda 	beq.w	800e49e <_strtod_l+0x47e>
 800e8ea:	f04f 0800 	mov.w	r8, #0
 800e8ee:	4b8b      	ldr	r3, [pc, #556]	; (800eb1c <_strtod_l+0xafc>)
 800e8f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8f2:	401a      	ands	r2, r3
 800e8f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e8f8:	9b05      	ldr	r3, [sp, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d19a      	bne.n	800e834 <_strtod_l+0x814>
 800e8fe:	e5d9      	b.n	800e4b4 <_strtod_l+0x494>
 800e900:	f04f 33ff 	mov.w	r3, #4294967295
 800e904:	e7e8      	b.n	800e8d8 <_strtod_l+0x8b8>
 800e906:	4613      	mov	r3, r2
 800e908:	e7e6      	b.n	800e8d8 <_strtod_l+0x8b8>
 800e90a:	ea53 0308 	orrs.w	r3, r3, r8
 800e90e:	d081      	beq.n	800e814 <_strtod_l+0x7f4>
 800e910:	b1e5      	cbz	r5, 800e94c <_strtod_l+0x92c>
 800e912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e914:	421d      	tst	r5, r3
 800e916:	d0ef      	beq.n	800e8f8 <_strtod_l+0x8d8>
 800e918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e91a:	4640      	mov	r0, r8
 800e91c:	4649      	mov	r1, r9
 800e91e:	9a05      	ldr	r2, [sp, #20]
 800e920:	b1c3      	cbz	r3, 800e954 <_strtod_l+0x934>
 800e922:	f7ff fb59 	bl	800dfd8 <sulp>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e92e:	f7f1 fc89 	bl	8000244 <__adddf3>
 800e932:	4680      	mov	r8, r0
 800e934:	4689      	mov	r9, r1
 800e936:	e7df      	b.n	800e8f8 <_strtod_l+0x8d8>
 800e938:	4013      	ands	r3, r2
 800e93a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e93e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e942:	f04f 38ff 	mov.w	r8, #4294967295
 800e946:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e94a:	e7d5      	b.n	800e8f8 <_strtod_l+0x8d8>
 800e94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e94e:	ea13 0f08 	tst.w	r3, r8
 800e952:	e7e0      	b.n	800e916 <_strtod_l+0x8f6>
 800e954:	f7ff fb40 	bl	800dfd8 <sulp>
 800e958:	4602      	mov	r2, r0
 800e95a:	460b      	mov	r3, r1
 800e95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e960:	f7f1 fc6e 	bl	8000240 <__aeabi_dsub>
 800e964:	2200      	movs	r2, #0
 800e966:	2300      	movs	r3, #0
 800e968:	4680      	mov	r8, r0
 800e96a:	4689      	mov	r9, r1
 800e96c:	f7f2 f888 	bl	8000a80 <__aeabi_dcmpeq>
 800e970:	2800      	cmp	r0, #0
 800e972:	d0c1      	beq.n	800e8f8 <_strtod_l+0x8d8>
 800e974:	e608      	b.n	800e588 <_strtod_l+0x568>
 800e976:	4658      	mov	r0, fp
 800e978:	9904      	ldr	r1, [sp, #16]
 800e97a:	f002 fb81 	bl	8011080 <__ratio>
 800e97e:	2200      	movs	r2, #0
 800e980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	f7f2 f88e 	bl	8000aa8 <__aeabi_dcmple>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d070      	beq.n	800ea72 <_strtod_l+0xa52>
 800e990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e992:	2b00      	cmp	r3, #0
 800e994:	d042      	beq.n	800ea1c <_strtod_l+0x9fc>
 800e996:	2600      	movs	r6, #0
 800e998:	4f62      	ldr	r7, [pc, #392]	; (800eb24 <_strtod_l+0xb04>)
 800e99a:	4d62      	ldr	r5, [pc, #392]	; (800eb24 <_strtod_l+0xb04>)
 800e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9a2:	0d1b      	lsrs	r3, r3, #20
 800e9a4:	051b      	lsls	r3, r3, #20
 800e9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9aa:	4b5f      	ldr	r3, [pc, #380]	; (800eb28 <_strtod_l+0xb08>)
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	f040 80c3 	bne.w	800eb38 <_strtod_l+0xb18>
 800e9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b4:	4640      	mov	r0, r8
 800e9b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e9ba:	4649      	mov	r1, r9
 800e9bc:	f002 fa8a 	bl	8010ed4 <__ulp>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	f7f1 fdf2 	bl	80005b0 <__aeabi_dmul>
 800e9cc:	4642      	mov	r2, r8
 800e9ce:	464b      	mov	r3, r9
 800e9d0:	f7f1 fc38 	bl	8000244 <__adddf3>
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4951      	ldr	r1, [pc, #324]	; (800eb1c <_strtod_l+0xafc>)
 800e9d8:	4a54      	ldr	r2, [pc, #336]	; (800eb2c <_strtod_l+0xb0c>)
 800e9da:	4019      	ands	r1, r3
 800e9dc:	4291      	cmp	r1, r2
 800e9de:	4680      	mov	r8, r0
 800e9e0:	d95d      	bls.n	800ea9e <_strtod_l+0xa7e>
 800e9e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9e4:	4b4e      	ldr	r3, [pc, #312]	; (800eb20 <_strtod_l+0xb00>)
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d103      	bne.n	800e9f2 <_strtod_l+0x9d2>
 800e9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	f43f ad56 	beq.w	800e49e <_strtod_l+0x47e>
 800e9f2:	f04f 38ff 	mov.w	r8, #4294967295
 800e9f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800eb20 <_strtod_l+0xb00>
 800e9fa:	4650      	mov	r0, sl
 800e9fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e9fe:	f001 ff39 	bl	8010874 <_Bfree>
 800ea02:	4650      	mov	r0, sl
 800ea04:	9906      	ldr	r1, [sp, #24]
 800ea06:	f001 ff35 	bl	8010874 <_Bfree>
 800ea0a:	4650      	mov	r0, sl
 800ea0c:	9904      	ldr	r1, [sp, #16]
 800ea0e:	f001 ff31 	bl	8010874 <_Bfree>
 800ea12:	4659      	mov	r1, fp
 800ea14:	4650      	mov	r0, sl
 800ea16:	f001 ff2d 	bl	8010874 <_Bfree>
 800ea1a:	e627      	b.n	800e66c <_strtod_l+0x64c>
 800ea1c:	f1b8 0f00 	cmp.w	r8, #0
 800ea20:	d119      	bne.n	800ea56 <_strtod_l+0xa36>
 800ea22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea28:	b9e3      	cbnz	r3, 800ea64 <_strtod_l+0xa44>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	4639      	mov	r1, r7
 800ea30:	4b3c      	ldr	r3, [pc, #240]	; (800eb24 <_strtod_l+0xb04>)
 800ea32:	f7f2 f82f 	bl	8000a94 <__aeabi_dcmplt>
 800ea36:	b9c8      	cbnz	r0, 800ea6c <_strtod_l+0xa4c>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	4b3c      	ldr	r3, [pc, #240]	; (800eb30 <_strtod_l+0xb10>)
 800ea40:	f7f1 fdb6 	bl	80005b0 <__aeabi_dmul>
 800ea44:	4604      	mov	r4, r0
 800ea46:	460d      	mov	r5, r1
 800ea48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ea4c:	9416      	str	r4, [sp, #88]	; 0x58
 800ea4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea50:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ea54:	e7a2      	b.n	800e99c <_strtod_l+0x97c>
 800ea56:	f1b8 0f01 	cmp.w	r8, #1
 800ea5a:	d103      	bne.n	800ea64 <_strtod_l+0xa44>
 800ea5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f43f ad92 	beq.w	800e588 <_strtod_l+0x568>
 800ea64:	2600      	movs	r6, #0
 800ea66:	2400      	movs	r4, #0
 800ea68:	4f32      	ldr	r7, [pc, #200]	; (800eb34 <_strtod_l+0xb14>)
 800ea6a:	e796      	b.n	800e99a <_strtod_l+0x97a>
 800ea6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ea6e:	4d30      	ldr	r5, [pc, #192]	; (800eb30 <_strtod_l+0xb10>)
 800ea70:	e7ea      	b.n	800ea48 <_strtod_l+0xa28>
 800ea72:	4b2f      	ldr	r3, [pc, #188]	; (800eb30 <_strtod_l+0xb10>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	4630      	mov	r0, r6
 800ea78:	4639      	mov	r1, r7
 800ea7a:	f7f1 fd99 	bl	80005b0 <__aeabi_dmul>
 800ea7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea80:	4604      	mov	r4, r0
 800ea82:	460d      	mov	r5, r1
 800ea84:	b933      	cbnz	r3, 800ea94 <_strtod_l+0xa74>
 800ea86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea8a:	9010      	str	r0, [sp, #64]	; 0x40
 800ea8c:	9311      	str	r3, [sp, #68]	; 0x44
 800ea8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ea92:	e783      	b.n	800e99c <_strtod_l+0x97c>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ea9c:	e7f7      	b.n	800ea8e <_strtod_l+0xa6e>
 800ea9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800eaa2:	9b05      	ldr	r3, [sp, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1a8      	bne.n	800e9fa <_strtod_l+0x9da>
 800eaa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eaac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eaae:	0d1b      	lsrs	r3, r3, #20
 800eab0:	051b      	lsls	r3, r3, #20
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d1a1      	bne.n	800e9fa <_strtod_l+0x9da>
 800eab6:	4620      	mov	r0, r4
 800eab8:	4629      	mov	r1, r5
 800eaba:	f7f2 f8c1 	bl	8000c40 <__aeabi_d2lz>
 800eabe:	f7f1 fd49 	bl	8000554 <__aeabi_l2d>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4620      	mov	r0, r4
 800eac8:	4629      	mov	r1, r5
 800eaca:	f7f1 fbb9 	bl	8000240 <__aeabi_dsub>
 800eace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ead0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ead4:	ea43 0308 	orr.w	r3, r3, r8
 800ead8:	4313      	orrs	r3, r2
 800eada:	4604      	mov	r4, r0
 800eadc:	460d      	mov	r5, r1
 800eade:	d066      	beq.n	800ebae <_strtod_l+0xb8e>
 800eae0:	a309      	add	r3, pc, #36	; (adr r3, 800eb08 <_strtod_l+0xae8>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f1 ffd5 	bl	8000a94 <__aeabi_dcmplt>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f47f ace2 	bne.w	800e4b4 <_strtod_l+0x494>
 800eaf0:	a307      	add	r3, pc, #28	; (adr r3, 800eb10 <_strtod_l+0xaf0>)
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	4629      	mov	r1, r5
 800eafa:	f7f1 ffe9 	bl	8000ad0 <__aeabi_dcmpgt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	f43f af7b 	beq.w	800e9fa <_strtod_l+0x9da>
 800eb04:	e4d6      	b.n	800e4b4 <_strtod_l+0x494>
 800eb06:	bf00      	nop
 800eb08:	94a03595 	.word	0x94a03595
 800eb0c:	3fdfffff 	.word	0x3fdfffff
 800eb10:	35afe535 	.word	0x35afe535
 800eb14:	3fe00000 	.word	0x3fe00000
 800eb18:	000fffff 	.word	0x000fffff
 800eb1c:	7ff00000 	.word	0x7ff00000
 800eb20:	7fefffff 	.word	0x7fefffff
 800eb24:	3ff00000 	.word	0x3ff00000
 800eb28:	7fe00000 	.word	0x7fe00000
 800eb2c:	7c9fffff 	.word	0x7c9fffff
 800eb30:	3fe00000 	.word	0x3fe00000
 800eb34:	bff00000 	.word	0xbff00000
 800eb38:	9b05      	ldr	r3, [sp, #20]
 800eb3a:	b313      	cbz	r3, 800eb82 <_strtod_l+0xb62>
 800eb3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb42:	d81e      	bhi.n	800eb82 <_strtod_l+0xb62>
 800eb44:	a326      	add	r3, pc, #152	; (adr r3, 800ebe0 <_strtod_l+0xbc0>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	f7f1 ffab 	bl	8000aa8 <__aeabi_dcmple>
 800eb52:	b190      	cbz	r0, 800eb7a <_strtod_l+0xb5a>
 800eb54:	4629      	mov	r1, r5
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7f2 f802 	bl	8000b60 <__aeabi_d2uiz>
 800eb5c:	2801      	cmp	r0, #1
 800eb5e:	bf38      	it	cc
 800eb60:	2001      	movcc	r0, #1
 800eb62:	f7f1 fcab 	bl	80004bc <__aeabi_ui2d>
 800eb66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb68:	4604      	mov	r4, r0
 800eb6a:	460d      	mov	r5, r1
 800eb6c:	b9d3      	cbnz	r3, 800eba4 <_strtod_l+0xb84>
 800eb6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb72:	9012      	str	r0, [sp, #72]	; 0x48
 800eb74:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800eb7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800eb80:	1a9f      	subs	r7, r3, r2
 800eb82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb86:	f002 f9a5 	bl	8010ed4 <__ulp>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4630      	mov	r0, r6
 800eb90:	4639      	mov	r1, r7
 800eb92:	f7f1 fd0d 	bl	80005b0 <__aeabi_dmul>
 800eb96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb9a:	f7f1 fb53 	bl	8000244 <__adddf3>
 800eb9e:	4680      	mov	r8, r0
 800eba0:	4689      	mov	r9, r1
 800eba2:	e77e      	b.n	800eaa2 <_strtod_l+0xa82>
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ebac:	e7e3      	b.n	800eb76 <_strtod_l+0xb56>
 800ebae:	a30e      	add	r3, pc, #56	; (adr r3, 800ebe8 <_strtod_l+0xbc8>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	f7f1 ff6e 	bl	8000a94 <__aeabi_dcmplt>
 800ebb8:	e7a1      	b.n	800eafe <_strtod_l+0xade>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	930a      	str	r3, [sp, #40]	; 0x28
 800ebbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	f7ff ba71 	b.w	800e0aa <_strtod_l+0x8a>
 800ebc8:	2a65      	cmp	r2, #101	; 0x65
 800ebca:	f43f ab63 	beq.w	800e294 <_strtod_l+0x274>
 800ebce:	2a45      	cmp	r2, #69	; 0x45
 800ebd0:	f43f ab60 	beq.w	800e294 <_strtod_l+0x274>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f7ff bb95 	b.w	800e304 <_strtod_l+0x2e4>
 800ebda:	bf00      	nop
 800ebdc:	f3af 8000 	nop.w
 800ebe0:	ffc00000 	.word	0xffc00000
 800ebe4:	41dfffff 	.word	0x41dfffff
 800ebe8:	94a03595 	.word	0x94a03595
 800ebec:	3fcfffff 	.word	0x3fcfffff

0800ebf0 <_strtod_r>:
 800ebf0:	4b01      	ldr	r3, [pc, #4]	; (800ebf8 <_strtod_r+0x8>)
 800ebf2:	f7ff ba15 	b.w	800e020 <_strtod_l>
 800ebf6:	bf00      	nop
 800ebf8:	200000bc 	.word	0x200000bc

0800ebfc <strtok>:
 800ebfc:	4b16      	ldr	r3, [pc, #88]	; (800ec58 <strtok+0x5c>)
 800ebfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec02:	681f      	ldr	r7, [r3, #0]
 800ec04:	4605      	mov	r5, r0
 800ec06:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ec08:	460e      	mov	r6, r1
 800ec0a:	b9ec      	cbnz	r4, 800ec48 <strtok+0x4c>
 800ec0c:	2050      	movs	r0, #80	; 0x50
 800ec0e:	f001 fdc9 	bl	80107a4 <malloc>
 800ec12:	4602      	mov	r2, r0
 800ec14:	65b8      	str	r0, [r7, #88]	; 0x58
 800ec16:	b920      	cbnz	r0, 800ec22 <strtok+0x26>
 800ec18:	2157      	movs	r1, #87	; 0x57
 800ec1a:	4b10      	ldr	r3, [pc, #64]	; (800ec5c <strtok+0x60>)
 800ec1c:	4810      	ldr	r0, [pc, #64]	; (800ec60 <strtok+0x64>)
 800ec1e:	f000 f991 	bl	800ef44 <__assert_func>
 800ec22:	e9c0 4400 	strd	r4, r4, [r0]
 800ec26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ec2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ec32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ec36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ec3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ec3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ec42:	6184      	str	r4, [r0, #24]
 800ec44:	7704      	strb	r4, [r0, #28]
 800ec46:	6244      	str	r4, [r0, #36]	; 0x24
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	f000 b806 	b.w	800ec64 <__strtok_r>
 800ec58:	20000054 	.word	0x20000054
 800ec5c:	08034230 	.word	0x08034230
 800ec60:	08034247 	.word	0x08034247

0800ec64 <__strtok_r>:
 800ec64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec66:	b908      	cbnz	r0, 800ec6c <__strtok_r+0x8>
 800ec68:	6810      	ldr	r0, [r2, #0]
 800ec6a:	b188      	cbz	r0, 800ec90 <__strtok_r+0x2c>
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	460f      	mov	r7, r1
 800ec70:	4620      	mov	r0, r4
 800ec72:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ec76:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ec7a:	b91e      	cbnz	r6, 800ec84 <__strtok_r+0x20>
 800ec7c:	b965      	cbnz	r5, 800ec98 <__strtok_r+0x34>
 800ec7e:	4628      	mov	r0, r5
 800ec80:	6015      	str	r5, [r2, #0]
 800ec82:	e005      	b.n	800ec90 <__strtok_r+0x2c>
 800ec84:	42b5      	cmp	r5, r6
 800ec86:	d1f6      	bne.n	800ec76 <__strtok_r+0x12>
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1f0      	bne.n	800ec6e <__strtok_r+0xa>
 800ec8c:	6014      	str	r4, [r2, #0]
 800ec8e:	7003      	strb	r3, [r0, #0]
 800ec90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec92:	461c      	mov	r4, r3
 800ec94:	e00c      	b.n	800ecb0 <__strtok_r+0x4c>
 800ec96:	b915      	cbnz	r5, 800ec9e <__strtok_r+0x3a>
 800ec98:	460e      	mov	r6, r1
 800ec9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eca2:	42ab      	cmp	r3, r5
 800eca4:	d1f7      	bne.n	800ec96 <__strtok_r+0x32>
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d0f3      	beq.n	800ec92 <__strtok_r+0x2e>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ecb0:	6014      	str	r4, [r2, #0]
 800ecb2:	e7ed      	b.n	800ec90 <__strtok_r+0x2c>

0800ecb4 <_strtol_l.constprop.0>:
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecba:	4680      	mov	r8, r0
 800ecbc:	d001      	beq.n	800ecc2 <_strtol_l.constprop.0+0xe>
 800ecbe:	2b24      	cmp	r3, #36	; 0x24
 800ecc0:	d906      	bls.n	800ecd0 <_strtol_l.constprop.0+0x1c>
 800ecc2:	f7fe f9f9 	bl	800d0b8 <__errno>
 800ecc6:	2316      	movs	r3, #22
 800ecc8:	6003      	str	r3, [r0, #0]
 800ecca:	2000      	movs	r0, #0
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd0:	460d      	mov	r5, r1
 800ecd2:	4f35      	ldr	r7, [pc, #212]	; (800eda8 <_strtol_l.constprop.0+0xf4>)
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecda:	5de6      	ldrb	r6, [r4, r7]
 800ecdc:	f016 0608 	ands.w	r6, r6, #8
 800ece0:	d1f8      	bne.n	800ecd4 <_strtol_l.constprop.0+0x20>
 800ece2:	2c2d      	cmp	r4, #45	; 0x2d
 800ece4:	d12f      	bne.n	800ed46 <_strtol_l.constprop.0+0x92>
 800ece6:	2601      	movs	r6, #1
 800ece8:	782c      	ldrb	r4, [r5, #0]
 800ecea:	1c85      	adds	r5, r0, #2
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d057      	beq.n	800eda0 <_strtol_l.constprop.0+0xec>
 800ecf0:	2b10      	cmp	r3, #16
 800ecf2:	d109      	bne.n	800ed08 <_strtol_l.constprop.0+0x54>
 800ecf4:	2c30      	cmp	r4, #48	; 0x30
 800ecf6:	d107      	bne.n	800ed08 <_strtol_l.constprop.0+0x54>
 800ecf8:	7828      	ldrb	r0, [r5, #0]
 800ecfa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ecfe:	2858      	cmp	r0, #88	; 0x58
 800ed00:	d149      	bne.n	800ed96 <_strtol_l.constprop.0+0xe2>
 800ed02:	2310      	movs	r3, #16
 800ed04:	786c      	ldrb	r4, [r5, #1]
 800ed06:	3502      	adds	r5, #2
 800ed08:	2700      	movs	r7, #0
 800ed0a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ed0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ed12:	fbbe f9f3 	udiv	r9, lr, r3
 800ed16:	4638      	mov	r0, r7
 800ed18:	fb03 ea19 	mls	sl, r3, r9, lr
 800ed1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ed20:	f1bc 0f09 	cmp.w	ip, #9
 800ed24:	d814      	bhi.n	800ed50 <_strtol_l.constprop.0+0x9c>
 800ed26:	4664      	mov	r4, ip
 800ed28:	42a3      	cmp	r3, r4
 800ed2a:	dd22      	ble.n	800ed72 <_strtol_l.constprop.0+0xbe>
 800ed2c:	2f00      	cmp	r7, #0
 800ed2e:	db1d      	blt.n	800ed6c <_strtol_l.constprop.0+0xb8>
 800ed30:	4581      	cmp	r9, r0
 800ed32:	d31b      	bcc.n	800ed6c <_strtol_l.constprop.0+0xb8>
 800ed34:	d101      	bne.n	800ed3a <_strtol_l.constprop.0+0x86>
 800ed36:	45a2      	cmp	sl, r4
 800ed38:	db18      	blt.n	800ed6c <_strtol_l.constprop.0+0xb8>
 800ed3a:	2701      	movs	r7, #1
 800ed3c:	fb00 4003 	mla	r0, r0, r3, r4
 800ed40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed44:	e7ea      	b.n	800ed1c <_strtol_l.constprop.0+0x68>
 800ed46:	2c2b      	cmp	r4, #43	; 0x2b
 800ed48:	bf04      	itt	eq
 800ed4a:	782c      	ldrbeq	r4, [r5, #0]
 800ed4c:	1c85      	addeq	r5, r0, #2
 800ed4e:	e7cd      	b.n	800ecec <_strtol_l.constprop.0+0x38>
 800ed50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ed54:	f1bc 0f19 	cmp.w	ip, #25
 800ed58:	d801      	bhi.n	800ed5e <_strtol_l.constprop.0+0xaa>
 800ed5a:	3c37      	subs	r4, #55	; 0x37
 800ed5c:	e7e4      	b.n	800ed28 <_strtol_l.constprop.0+0x74>
 800ed5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ed62:	f1bc 0f19 	cmp.w	ip, #25
 800ed66:	d804      	bhi.n	800ed72 <_strtol_l.constprop.0+0xbe>
 800ed68:	3c57      	subs	r4, #87	; 0x57
 800ed6a:	e7dd      	b.n	800ed28 <_strtol_l.constprop.0+0x74>
 800ed6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ed70:	e7e6      	b.n	800ed40 <_strtol_l.constprop.0+0x8c>
 800ed72:	2f00      	cmp	r7, #0
 800ed74:	da07      	bge.n	800ed86 <_strtol_l.constprop.0+0xd2>
 800ed76:	2322      	movs	r3, #34	; 0x22
 800ed78:	4670      	mov	r0, lr
 800ed7a:	f8c8 3000 	str.w	r3, [r8]
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	d0a4      	beq.n	800eccc <_strtol_l.constprop.0+0x18>
 800ed82:	1e69      	subs	r1, r5, #1
 800ed84:	e005      	b.n	800ed92 <_strtol_l.constprop.0+0xde>
 800ed86:	b106      	cbz	r6, 800ed8a <_strtol_l.constprop.0+0xd6>
 800ed88:	4240      	negs	r0, r0
 800ed8a:	2a00      	cmp	r2, #0
 800ed8c:	d09e      	beq.n	800eccc <_strtol_l.constprop.0+0x18>
 800ed8e:	2f00      	cmp	r7, #0
 800ed90:	d1f7      	bne.n	800ed82 <_strtol_l.constprop.0+0xce>
 800ed92:	6011      	str	r1, [r2, #0]
 800ed94:	e79a      	b.n	800eccc <_strtol_l.constprop.0+0x18>
 800ed96:	2430      	movs	r4, #48	; 0x30
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1b5      	bne.n	800ed08 <_strtol_l.constprop.0+0x54>
 800ed9c:	2308      	movs	r3, #8
 800ed9e:	e7b3      	b.n	800ed08 <_strtol_l.constprop.0+0x54>
 800eda0:	2c30      	cmp	r4, #48	; 0x30
 800eda2:	d0a9      	beq.n	800ecf8 <_strtol_l.constprop.0+0x44>
 800eda4:	230a      	movs	r3, #10
 800eda6:	e7af      	b.n	800ed08 <_strtol_l.constprop.0+0x54>
 800eda8:	08034099 	.word	0x08034099

0800edac <_strtol_r>:
 800edac:	f7ff bf82 	b.w	800ecb4 <_strtol_l.constprop.0>

0800edb0 <strtol>:
 800edb0:	4613      	mov	r3, r2
 800edb2:	460a      	mov	r2, r1
 800edb4:	4601      	mov	r1, r0
 800edb6:	4802      	ldr	r0, [pc, #8]	; (800edc0 <strtol+0x10>)
 800edb8:	6800      	ldr	r0, [r0, #0]
 800edba:	f7ff bf7b 	b.w	800ecb4 <_strtol_l.constprop.0>
 800edbe:	bf00      	nop
 800edc0:	20000054 	.word	0x20000054

0800edc4 <__swbuf_r>:
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	460e      	mov	r6, r1
 800edc8:	4614      	mov	r4, r2
 800edca:	4605      	mov	r5, r0
 800edcc:	b118      	cbz	r0, 800edd6 <__swbuf_r+0x12>
 800edce:	6983      	ldr	r3, [r0, #24]
 800edd0:	b90b      	cbnz	r3, 800edd6 <__swbuf_r+0x12>
 800edd2:	f001 f865 	bl	800fea0 <__sinit>
 800edd6:	4b21      	ldr	r3, [pc, #132]	; (800ee5c <__swbuf_r+0x98>)
 800edd8:	429c      	cmp	r4, r3
 800edda:	d12b      	bne.n	800ee34 <__swbuf_r+0x70>
 800eddc:	686c      	ldr	r4, [r5, #4]
 800edde:	69a3      	ldr	r3, [r4, #24]
 800ede0:	60a3      	str	r3, [r4, #8]
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	071a      	lsls	r2, r3, #28
 800ede6:	d52f      	bpl.n	800ee48 <__swbuf_r+0x84>
 800ede8:	6923      	ldr	r3, [r4, #16]
 800edea:	b36b      	cbz	r3, 800ee48 <__swbuf_r+0x84>
 800edec:	6923      	ldr	r3, [r4, #16]
 800edee:	6820      	ldr	r0, [r4, #0]
 800edf0:	b2f6      	uxtb	r6, r6
 800edf2:	1ac0      	subs	r0, r0, r3
 800edf4:	6963      	ldr	r3, [r4, #20]
 800edf6:	4637      	mov	r7, r6
 800edf8:	4283      	cmp	r3, r0
 800edfa:	dc04      	bgt.n	800ee06 <__swbuf_r+0x42>
 800edfc:	4621      	mov	r1, r4
 800edfe:	4628      	mov	r0, r5
 800ee00:	f000 ffba 	bl	800fd78 <_fflush_r>
 800ee04:	bb30      	cbnz	r0, 800ee54 <__swbuf_r+0x90>
 800ee06:	68a3      	ldr	r3, [r4, #8]
 800ee08:	3001      	adds	r0, #1
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	60a3      	str	r3, [r4, #8]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	1c5a      	adds	r2, r3, #1
 800ee12:	6022      	str	r2, [r4, #0]
 800ee14:	701e      	strb	r6, [r3, #0]
 800ee16:	6963      	ldr	r3, [r4, #20]
 800ee18:	4283      	cmp	r3, r0
 800ee1a:	d004      	beq.n	800ee26 <__swbuf_r+0x62>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	07db      	lsls	r3, r3, #31
 800ee20:	d506      	bpl.n	800ee30 <__swbuf_r+0x6c>
 800ee22:	2e0a      	cmp	r6, #10
 800ee24:	d104      	bne.n	800ee30 <__swbuf_r+0x6c>
 800ee26:	4621      	mov	r1, r4
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f000 ffa5 	bl	800fd78 <_fflush_r>
 800ee2e:	b988      	cbnz	r0, 800ee54 <__swbuf_r+0x90>
 800ee30:	4638      	mov	r0, r7
 800ee32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee34:	4b0a      	ldr	r3, [pc, #40]	; (800ee60 <__swbuf_r+0x9c>)
 800ee36:	429c      	cmp	r4, r3
 800ee38:	d101      	bne.n	800ee3e <__swbuf_r+0x7a>
 800ee3a:	68ac      	ldr	r4, [r5, #8]
 800ee3c:	e7cf      	b.n	800edde <__swbuf_r+0x1a>
 800ee3e:	4b09      	ldr	r3, [pc, #36]	; (800ee64 <__swbuf_r+0xa0>)
 800ee40:	429c      	cmp	r4, r3
 800ee42:	bf08      	it	eq
 800ee44:	68ec      	ldreq	r4, [r5, #12]
 800ee46:	e7ca      	b.n	800edde <__swbuf_r+0x1a>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f80c 	bl	800ee68 <__swsetup_r>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d0cb      	beq.n	800edec <__swbuf_r+0x28>
 800ee54:	f04f 37ff 	mov.w	r7, #4294967295
 800ee58:	e7ea      	b.n	800ee30 <__swbuf_r+0x6c>
 800ee5a:	bf00      	nop
 800ee5c:	0803437c 	.word	0x0803437c
 800ee60:	0803439c 	.word	0x0803439c
 800ee64:	0803435c 	.word	0x0803435c

0800ee68 <__swsetup_r>:
 800ee68:	4b32      	ldr	r3, [pc, #200]	; (800ef34 <__swsetup_r+0xcc>)
 800ee6a:	b570      	push	{r4, r5, r6, lr}
 800ee6c:	681d      	ldr	r5, [r3, #0]
 800ee6e:	4606      	mov	r6, r0
 800ee70:	460c      	mov	r4, r1
 800ee72:	b125      	cbz	r5, 800ee7e <__swsetup_r+0x16>
 800ee74:	69ab      	ldr	r3, [r5, #24]
 800ee76:	b913      	cbnz	r3, 800ee7e <__swsetup_r+0x16>
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f001 f811 	bl	800fea0 <__sinit>
 800ee7e:	4b2e      	ldr	r3, [pc, #184]	; (800ef38 <__swsetup_r+0xd0>)
 800ee80:	429c      	cmp	r4, r3
 800ee82:	d10f      	bne.n	800eea4 <__swsetup_r+0x3c>
 800ee84:	686c      	ldr	r4, [r5, #4]
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee8c:	0719      	lsls	r1, r3, #28
 800ee8e:	d42c      	bmi.n	800eeea <__swsetup_r+0x82>
 800ee90:	06dd      	lsls	r5, r3, #27
 800ee92:	d411      	bmi.n	800eeb8 <__swsetup_r+0x50>
 800ee94:	2309      	movs	r3, #9
 800ee96:	6033      	str	r3, [r6, #0]
 800ee98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eea0:	81a3      	strh	r3, [r4, #12]
 800eea2:	e03e      	b.n	800ef22 <__swsetup_r+0xba>
 800eea4:	4b25      	ldr	r3, [pc, #148]	; (800ef3c <__swsetup_r+0xd4>)
 800eea6:	429c      	cmp	r4, r3
 800eea8:	d101      	bne.n	800eeae <__swsetup_r+0x46>
 800eeaa:	68ac      	ldr	r4, [r5, #8]
 800eeac:	e7eb      	b.n	800ee86 <__swsetup_r+0x1e>
 800eeae:	4b24      	ldr	r3, [pc, #144]	; (800ef40 <__swsetup_r+0xd8>)
 800eeb0:	429c      	cmp	r4, r3
 800eeb2:	bf08      	it	eq
 800eeb4:	68ec      	ldreq	r4, [r5, #12]
 800eeb6:	e7e6      	b.n	800ee86 <__swsetup_r+0x1e>
 800eeb8:	0758      	lsls	r0, r3, #29
 800eeba:	d512      	bpl.n	800eee2 <__swsetup_r+0x7a>
 800eebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eebe:	b141      	cbz	r1, 800eed2 <__swsetup_r+0x6a>
 800eec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eec4:	4299      	cmp	r1, r3
 800eec6:	d002      	beq.n	800eece <__swsetup_r+0x66>
 800eec8:	4630      	mov	r0, r6
 800eeca:	f002 f95f 	bl	801118c <_free_r>
 800eece:	2300      	movs	r3, #0
 800eed0:	6363      	str	r3, [r4, #52]	; 0x34
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eed8:	81a3      	strh	r3, [r4, #12]
 800eeda:	2300      	movs	r3, #0
 800eedc:	6063      	str	r3, [r4, #4]
 800eede:	6923      	ldr	r3, [r4, #16]
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	89a3      	ldrh	r3, [r4, #12]
 800eee4:	f043 0308 	orr.w	r3, r3, #8
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	6923      	ldr	r3, [r4, #16]
 800eeec:	b94b      	cbnz	r3, 800ef02 <__swsetup_r+0x9a>
 800eeee:	89a3      	ldrh	r3, [r4, #12]
 800eef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef8:	d003      	beq.n	800ef02 <__swsetup_r+0x9a>
 800eefa:	4621      	mov	r1, r4
 800eefc:	4630      	mov	r0, r6
 800eefe:	f001 fc11 	bl	8010724 <__smakebuf_r>
 800ef02:	89a0      	ldrh	r0, [r4, #12]
 800ef04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef08:	f010 0301 	ands.w	r3, r0, #1
 800ef0c:	d00a      	beq.n	800ef24 <__swsetup_r+0xbc>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60a3      	str	r3, [r4, #8]
 800ef12:	6963      	ldr	r3, [r4, #20]
 800ef14:	425b      	negs	r3, r3
 800ef16:	61a3      	str	r3, [r4, #24]
 800ef18:	6923      	ldr	r3, [r4, #16]
 800ef1a:	b943      	cbnz	r3, 800ef2e <__swsetup_r+0xc6>
 800ef1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef20:	d1ba      	bne.n	800ee98 <__swsetup_r+0x30>
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	0781      	lsls	r1, r0, #30
 800ef26:	bf58      	it	pl
 800ef28:	6963      	ldrpl	r3, [r4, #20]
 800ef2a:	60a3      	str	r3, [r4, #8]
 800ef2c:	e7f4      	b.n	800ef18 <__swsetup_r+0xb0>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	e7f7      	b.n	800ef22 <__swsetup_r+0xba>
 800ef32:	bf00      	nop
 800ef34:	20000054 	.word	0x20000054
 800ef38:	0803437c 	.word	0x0803437c
 800ef3c:	0803439c 	.word	0x0803439c
 800ef40:	0803435c 	.word	0x0803435c

0800ef44 <__assert_func>:
 800ef44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef46:	4614      	mov	r4, r2
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <__assert_func+0x2c>)
 800ef4c:	4605      	mov	r5, r0
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68d8      	ldr	r0, [r3, #12]
 800ef52:	b14c      	cbz	r4, 800ef68 <__assert_func+0x24>
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <__assert_func+0x30>)
 800ef56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef5a:	9100      	str	r1, [sp, #0]
 800ef5c:	462b      	mov	r3, r5
 800ef5e:	4906      	ldr	r1, [pc, #24]	; (800ef78 <__assert_func+0x34>)
 800ef60:	f001 f81c 	bl	800ff9c <fiprintf>
 800ef64:	f002 fd62 	bl	8011a2c <abort>
 800ef68:	4b04      	ldr	r3, [pc, #16]	; (800ef7c <__assert_func+0x38>)
 800ef6a:	461c      	mov	r4, r3
 800ef6c:	e7f3      	b.n	800ef56 <__assert_func+0x12>
 800ef6e:	bf00      	nop
 800ef70:	20000054 	.word	0x20000054
 800ef74:	080342a4 	.word	0x080342a4
 800ef78:	080342b1 	.word	0x080342b1
 800ef7c:	080342df 	.word	0x080342df

0800ef80 <quorem>:
 800ef80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	6903      	ldr	r3, [r0, #16]
 800ef86:	690c      	ldr	r4, [r1, #16]
 800ef88:	4607      	mov	r7, r0
 800ef8a:	42a3      	cmp	r3, r4
 800ef8c:	f2c0 8082 	blt.w	800f094 <quorem+0x114>
 800ef90:	3c01      	subs	r4, #1
 800ef92:	f100 0514 	add.w	r5, r0, #20
 800ef96:	f101 0814 	add.w	r8, r1, #20
 800ef9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa8:	3301      	adds	r3, #1
 800efaa:	429a      	cmp	r2, r3
 800efac:	fbb2 f6f3 	udiv	r6, r2, r3
 800efb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800efb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efb8:	d331      	bcc.n	800f01e <quorem+0x9e>
 800efba:	f04f 0e00 	mov.w	lr, #0
 800efbe:	4640      	mov	r0, r8
 800efc0:	46ac      	mov	ip, r5
 800efc2:	46f2      	mov	sl, lr
 800efc4:	f850 2b04 	ldr.w	r2, [r0], #4
 800efc8:	b293      	uxth	r3, r2
 800efca:	fb06 e303 	mla	r3, r6, r3, lr
 800efce:	0c12      	lsrs	r2, r2, #16
 800efd0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	fb06 e202 	mla	r2, r6, r2, lr
 800efda:	ebaa 0303 	sub.w	r3, sl, r3
 800efde:	f8dc a000 	ldr.w	sl, [ip]
 800efe2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efe6:	fa1f fa8a 	uxth.w	sl, sl
 800efea:	4453      	add	r3, sl
 800efec:	f8dc a000 	ldr.w	sl, [ip]
 800eff0:	b292      	uxth	r2, r2
 800eff2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800effa:	b29b      	uxth	r3, r3
 800effc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f000:	4581      	cmp	r9, r0
 800f002:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f006:	f84c 3b04 	str.w	r3, [ip], #4
 800f00a:	d2db      	bcs.n	800efc4 <quorem+0x44>
 800f00c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f010:	b92b      	cbnz	r3, 800f01e <quorem+0x9e>
 800f012:	9b01      	ldr	r3, [sp, #4]
 800f014:	3b04      	subs	r3, #4
 800f016:	429d      	cmp	r5, r3
 800f018:	461a      	mov	r2, r3
 800f01a:	d32f      	bcc.n	800f07c <quorem+0xfc>
 800f01c:	613c      	str	r4, [r7, #16]
 800f01e:	4638      	mov	r0, r7
 800f020:	f001 feb0 	bl	8010d84 <__mcmp>
 800f024:	2800      	cmp	r0, #0
 800f026:	db25      	blt.n	800f074 <quorem+0xf4>
 800f028:	4628      	mov	r0, r5
 800f02a:	f04f 0c00 	mov.w	ip, #0
 800f02e:	3601      	adds	r6, #1
 800f030:	f858 1b04 	ldr.w	r1, [r8], #4
 800f034:	f8d0 e000 	ldr.w	lr, [r0]
 800f038:	b28b      	uxth	r3, r1
 800f03a:	ebac 0303 	sub.w	r3, ip, r3
 800f03e:	fa1f f28e 	uxth.w	r2, lr
 800f042:	4413      	add	r3, r2
 800f044:	0c0a      	lsrs	r2, r1, #16
 800f046:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f04a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f04e:	b29b      	uxth	r3, r3
 800f050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f054:	45c1      	cmp	r9, r8
 800f056:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f05a:	f840 3b04 	str.w	r3, [r0], #4
 800f05e:	d2e7      	bcs.n	800f030 <quorem+0xb0>
 800f060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f068:	b922      	cbnz	r2, 800f074 <quorem+0xf4>
 800f06a:	3b04      	subs	r3, #4
 800f06c:	429d      	cmp	r5, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	d30a      	bcc.n	800f088 <quorem+0x108>
 800f072:	613c      	str	r4, [r7, #16]
 800f074:	4630      	mov	r0, r6
 800f076:	b003      	add	sp, #12
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	3b04      	subs	r3, #4
 800f080:	2a00      	cmp	r2, #0
 800f082:	d1cb      	bne.n	800f01c <quorem+0x9c>
 800f084:	3c01      	subs	r4, #1
 800f086:	e7c6      	b.n	800f016 <quorem+0x96>
 800f088:	6812      	ldr	r2, [r2, #0]
 800f08a:	3b04      	subs	r3, #4
 800f08c:	2a00      	cmp	r2, #0
 800f08e:	d1f0      	bne.n	800f072 <quorem+0xf2>
 800f090:	3c01      	subs	r4, #1
 800f092:	e7eb      	b.n	800f06c <quorem+0xec>
 800f094:	2000      	movs	r0, #0
 800f096:	e7ee      	b.n	800f076 <quorem+0xf6>

0800f098 <_dtoa_r>:
 800f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09c:	4616      	mov	r6, r2
 800f09e:	461f      	mov	r7, r3
 800f0a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f0a2:	b099      	sub	sp, #100	; 0x64
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f0ae:	b974      	cbnz	r4, 800f0ce <_dtoa_r+0x36>
 800f0b0:	2010      	movs	r0, #16
 800f0b2:	f001 fb77 	bl	80107a4 <malloc>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	6268      	str	r0, [r5, #36]	; 0x24
 800f0ba:	b920      	cbnz	r0, 800f0c6 <_dtoa_r+0x2e>
 800f0bc:	21ea      	movs	r1, #234	; 0xea
 800f0be:	4ba8      	ldr	r3, [pc, #672]	; (800f360 <_dtoa_r+0x2c8>)
 800f0c0:	48a8      	ldr	r0, [pc, #672]	; (800f364 <_dtoa_r+0x2cc>)
 800f0c2:	f7ff ff3f 	bl	800ef44 <__assert_func>
 800f0c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0ca:	6004      	str	r4, [r0, #0]
 800f0cc:	60c4      	str	r4, [r0, #12]
 800f0ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0d0:	6819      	ldr	r1, [r3, #0]
 800f0d2:	b151      	cbz	r1, 800f0ea <_dtoa_r+0x52>
 800f0d4:	685a      	ldr	r2, [r3, #4]
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	4093      	lsls	r3, r2
 800f0da:	604a      	str	r2, [r1, #4]
 800f0dc:	608b      	str	r3, [r1, #8]
 800f0de:	4628      	mov	r0, r5
 800f0e0:	f001 fbc8 	bl	8010874 <_Bfree>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	1e3b      	subs	r3, r7, #0
 800f0ec:	bfaf      	iteee	ge
 800f0ee:	2300      	movge	r3, #0
 800f0f0:	2201      	movlt	r2, #1
 800f0f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f0f6:	9305      	strlt	r3, [sp, #20]
 800f0f8:	bfa8      	it	ge
 800f0fa:	f8c8 3000 	strge.w	r3, [r8]
 800f0fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f102:	4b99      	ldr	r3, [pc, #612]	; (800f368 <_dtoa_r+0x2d0>)
 800f104:	bfb8      	it	lt
 800f106:	f8c8 2000 	strlt.w	r2, [r8]
 800f10a:	ea33 0309 	bics.w	r3, r3, r9
 800f10e:	d119      	bne.n	800f144 <_dtoa_r+0xac>
 800f110:	f242 730f 	movw	r3, #9999	; 0x270f
 800f114:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f11c:	4333      	orrs	r3, r6
 800f11e:	f000 857f 	beq.w	800fc20 <_dtoa_r+0xb88>
 800f122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f124:	b953      	cbnz	r3, 800f13c <_dtoa_r+0xa4>
 800f126:	4b91      	ldr	r3, [pc, #580]	; (800f36c <_dtoa_r+0x2d4>)
 800f128:	e022      	b.n	800f170 <_dtoa_r+0xd8>
 800f12a:	4b91      	ldr	r3, [pc, #580]	; (800f370 <_dtoa_r+0x2d8>)
 800f12c:	9303      	str	r3, [sp, #12]
 800f12e:	3308      	adds	r3, #8
 800f130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f132:	6013      	str	r3, [r2, #0]
 800f134:	9803      	ldr	r0, [sp, #12]
 800f136:	b019      	add	sp, #100	; 0x64
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	4b8b      	ldr	r3, [pc, #556]	; (800f36c <_dtoa_r+0x2d4>)
 800f13e:	9303      	str	r3, [sp, #12]
 800f140:	3303      	adds	r3, #3
 800f142:	e7f5      	b.n	800f130 <_dtoa_r+0x98>
 800f144:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f148:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f14c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f150:	2200      	movs	r2, #0
 800f152:	2300      	movs	r3, #0
 800f154:	f7f1 fc94 	bl	8000a80 <__aeabi_dcmpeq>
 800f158:	4680      	mov	r8, r0
 800f15a:	b158      	cbz	r0, 800f174 <_dtoa_r+0xdc>
 800f15c:	2301      	movs	r3, #1
 800f15e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f160:	6013      	str	r3, [r2, #0]
 800f162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 8558 	beq.w	800fc1a <_dtoa_r+0xb82>
 800f16a:	4882      	ldr	r0, [pc, #520]	; (800f374 <_dtoa_r+0x2dc>)
 800f16c:	6018      	str	r0, [r3, #0]
 800f16e:	1e43      	subs	r3, r0, #1
 800f170:	9303      	str	r3, [sp, #12]
 800f172:	e7df      	b.n	800f134 <_dtoa_r+0x9c>
 800f174:	ab16      	add	r3, sp, #88	; 0x58
 800f176:	9301      	str	r3, [sp, #4]
 800f178:	ab17      	add	r3, sp, #92	; 0x5c
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	4628      	mov	r0, r5
 800f17e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f182:	f001 ff21 	bl	8010fc8 <__d2b>
 800f186:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f18a:	4683      	mov	fp, r0
 800f18c:	2c00      	cmp	r4, #0
 800f18e:	d07f      	beq.n	800f290 <_dtoa_r+0x1f8>
 800f190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f196:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f19a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f19e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f1a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f1a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	4b72      	ldr	r3, [pc, #456]	; (800f378 <_dtoa_r+0x2e0>)
 800f1ae:	f7f1 f847 	bl	8000240 <__aeabi_dsub>
 800f1b2:	a365      	add	r3, pc, #404	; (adr r3, 800f348 <_dtoa_r+0x2b0>)
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	f7f1 f9fa 	bl	80005b0 <__aeabi_dmul>
 800f1bc:	a364      	add	r3, pc, #400	; (adr r3, 800f350 <_dtoa_r+0x2b8>)
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	f7f1 f83f 	bl	8000244 <__adddf3>
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	460f      	mov	r7, r1
 800f1cc:	f7f1 f986 	bl	80004dc <__aeabi_i2d>
 800f1d0:	a361      	add	r3, pc, #388	; (adr r3, 800f358 <_dtoa_r+0x2c0>)
 800f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d6:	f7f1 f9eb 	bl	80005b0 <__aeabi_dmul>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	4630      	mov	r0, r6
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7f1 f82f 	bl	8000244 <__adddf3>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	460f      	mov	r7, r1
 800f1ea:	f7f1 fc91 	bl	8000b10 <__aeabi_d2iz>
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	f7f1 fc4c 	bl	8000a94 <__aeabi_dcmplt>
 800f1fc:	b148      	cbz	r0, 800f212 <_dtoa_r+0x17a>
 800f1fe:	4650      	mov	r0, sl
 800f200:	f7f1 f96c 	bl	80004dc <__aeabi_i2d>
 800f204:	4632      	mov	r2, r6
 800f206:	463b      	mov	r3, r7
 800f208:	f7f1 fc3a 	bl	8000a80 <__aeabi_dcmpeq>
 800f20c:	b908      	cbnz	r0, 800f212 <_dtoa_r+0x17a>
 800f20e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f212:	f1ba 0f16 	cmp.w	sl, #22
 800f216:	d858      	bhi.n	800f2ca <_dtoa_r+0x232>
 800f218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f21c:	4b57      	ldr	r3, [pc, #348]	; (800f37c <_dtoa_r+0x2e4>)
 800f21e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 fc35 	bl	8000a94 <__aeabi_dcmplt>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d04f      	beq.n	800f2ce <_dtoa_r+0x236>
 800f22e:	2300      	movs	r3, #0
 800f230:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f234:	930f      	str	r3, [sp, #60]	; 0x3c
 800f236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f238:	1b1c      	subs	r4, r3, r4
 800f23a:	1e63      	subs	r3, r4, #1
 800f23c:	9309      	str	r3, [sp, #36]	; 0x24
 800f23e:	bf49      	itett	mi
 800f240:	f1c4 0301 	rsbmi	r3, r4, #1
 800f244:	2300      	movpl	r3, #0
 800f246:	9306      	strmi	r3, [sp, #24]
 800f248:	2300      	movmi	r3, #0
 800f24a:	bf54      	ite	pl
 800f24c:	9306      	strpl	r3, [sp, #24]
 800f24e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f250:	f1ba 0f00 	cmp.w	sl, #0
 800f254:	db3d      	blt.n	800f2d2 <_dtoa_r+0x23a>
 800f256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f258:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f25c:	4453      	add	r3, sl
 800f25e:	9309      	str	r3, [sp, #36]	; 0x24
 800f260:	2300      	movs	r3, #0
 800f262:	930a      	str	r3, [sp, #40]	; 0x28
 800f264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f266:	2b09      	cmp	r3, #9
 800f268:	f200 808c 	bhi.w	800f384 <_dtoa_r+0x2ec>
 800f26c:	2b05      	cmp	r3, #5
 800f26e:	bfc4      	itt	gt
 800f270:	3b04      	subgt	r3, #4
 800f272:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f276:	bfc8      	it	gt
 800f278:	2400      	movgt	r4, #0
 800f27a:	f1a3 0302 	sub.w	r3, r3, #2
 800f27e:	bfd8      	it	le
 800f280:	2401      	movle	r4, #1
 800f282:	2b03      	cmp	r3, #3
 800f284:	f200 808a 	bhi.w	800f39c <_dtoa_r+0x304>
 800f288:	e8df f003 	tbb	[pc, r3]
 800f28c:	5b4d4f2d 	.word	0x5b4d4f2d
 800f290:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f294:	441c      	add	r4, r3
 800f296:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f29a:	2b20      	cmp	r3, #32
 800f29c:	bfc3      	ittte	gt
 800f29e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f2a6:	fa09 f303 	lslgt.w	r3, r9, r3
 800f2aa:	f1c3 0320 	rsble	r3, r3, #32
 800f2ae:	bfc6      	itte	gt
 800f2b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f2b4:	4318      	orrgt	r0, r3
 800f2b6:	fa06 f003 	lslle.w	r0, r6, r3
 800f2ba:	f7f1 f8ff 	bl	80004bc <__aeabi_ui2d>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f2c4:	3c01      	subs	r4, #1
 800f2c6:	9313      	str	r3, [sp, #76]	; 0x4c
 800f2c8:	e76f      	b.n	800f1aa <_dtoa_r+0x112>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e7b2      	b.n	800f234 <_dtoa_r+0x19c>
 800f2ce:	900f      	str	r0, [sp, #60]	; 0x3c
 800f2d0:	e7b1      	b.n	800f236 <_dtoa_r+0x19e>
 800f2d2:	9b06      	ldr	r3, [sp, #24]
 800f2d4:	eba3 030a 	sub.w	r3, r3, sl
 800f2d8:	9306      	str	r3, [sp, #24]
 800f2da:	f1ca 0300 	rsb	r3, sl, #0
 800f2de:	930a      	str	r3, [sp, #40]	; 0x28
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	930e      	str	r3, [sp, #56]	; 0x38
 800f2e4:	e7be      	b.n	800f264 <_dtoa_r+0x1cc>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	dc58      	bgt.n	800f3a2 <_dtoa_r+0x30a>
 800f2f0:	f04f 0901 	mov.w	r9, #1
 800f2f4:	464b      	mov	r3, r9
 800f2f6:	f8cd 9020 	str.w	r9, [sp, #32]
 800f2fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f2fe:	2200      	movs	r2, #0
 800f300:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f302:	6042      	str	r2, [r0, #4]
 800f304:	2204      	movs	r2, #4
 800f306:	f102 0614 	add.w	r6, r2, #20
 800f30a:	429e      	cmp	r6, r3
 800f30c:	6841      	ldr	r1, [r0, #4]
 800f30e:	d94e      	bls.n	800f3ae <_dtoa_r+0x316>
 800f310:	4628      	mov	r0, r5
 800f312:	f001 fa6f 	bl	80107f4 <_Balloc>
 800f316:	9003      	str	r0, [sp, #12]
 800f318:	2800      	cmp	r0, #0
 800f31a:	d14c      	bne.n	800f3b6 <_dtoa_r+0x31e>
 800f31c:	4602      	mov	r2, r0
 800f31e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f322:	4b17      	ldr	r3, [pc, #92]	; (800f380 <_dtoa_r+0x2e8>)
 800f324:	e6cc      	b.n	800f0c0 <_dtoa_r+0x28>
 800f326:	2301      	movs	r3, #1
 800f328:	e7de      	b.n	800f2e8 <_dtoa_r+0x250>
 800f32a:	2300      	movs	r3, #0
 800f32c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f32e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f330:	eb0a 0903 	add.w	r9, sl, r3
 800f334:	f109 0301 	add.w	r3, r9, #1
 800f338:	2b01      	cmp	r3, #1
 800f33a:	9308      	str	r3, [sp, #32]
 800f33c:	bfb8      	it	lt
 800f33e:	2301      	movlt	r3, #1
 800f340:	e7dd      	b.n	800f2fe <_dtoa_r+0x266>
 800f342:	2301      	movs	r3, #1
 800f344:	e7f2      	b.n	800f32c <_dtoa_r+0x294>
 800f346:	bf00      	nop
 800f348:	636f4361 	.word	0x636f4361
 800f34c:	3fd287a7 	.word	0x3fd287a7
 800f350:	8b60c8b3 	.word	0x8b60c8b3
 800f354:	3fc68a28 	.word	0x3fc68a28
 800f358:	509f79fb 	.word	0x509f79fb
 800f35c:	3fd34413 	.word	0x3fd34413
 800f360:	08034230 	.word	0x08034230
 800f364:	080342ed 	.word	0x080342ed
 800f368:	7ff00000 	.word	0x7ff00000
 800f36c:	080342e9 	.word	0x080342e9
 800f370:	080342e0 	.word	0x080342e0
 800f374:	080341b1 	.word	0x080341b1
 800f378:	3ff80000 	.word	0x3ff80000
 800f37c:	080344c0 	.word	0x080344c0
 800f380:	08034348 	.word	0x08034348
 800f384:	2401      	movs	r4, #1
 800f386:	2300      	movs	r3, #0
 800f388:	940b      	str	r4, [sp, #44]	; 0x2c
 800f38a:	9322      	str	r3, [sp, #136]	; 0x88
 800f38c:	f04f 39ff 	mov.w	r9, #4294967295
 800f390:	2200      	movs	r2, #0
 800f392:	2312      	movs	r3, #18
 800f394:	f8cd 9020 	str.w	r9, [sp, #32]
 800f398:	9223      	str	r2, [sp, #140]	; 0x8c
 800f39a:	e7b0      	b.n	800f2fe <_dtoa_r+0x266>
 800f39c:	2301      	movs	r3, #1
 800f39e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3a0:	e7f4      	b.n	800f38c <_dtoa_r+0x2f4>
 800f3a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800f3a6:	464b      	mov	r3, r9
 800f3a8:	f8cd 9020 	str.w	r9, [sp, #32]
 800f3ac:	e7a7      	b.n	800f2fe <_dtoa_r+0x266>
 800f3ae:	3101      	adds	r1, #1
 800f3b0:	6041      	str	r1, [r0, #4]
 800f3b2:	0052      	lsls	r2, r2, #1
 800f3b4:	e7a7      	b.n	800f306 <_dtoa_r+0x26e>
 800f3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3b8:	9a03      	ldr	r2, [sp, #12]
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	9b08      	ldr	r3, [sp, #32]
 800f3be:	2b0e      	cmp	r3, #14
 800f3c0:	f200 80a8 	bhi.w	800f514 <_dtoa_r+0x47c>
 800f3c4:	2c00      	cmp	r4, #0
 800f3c6:	f000 80a5 	beq.w	800f514 <_dtoa_r+0x47c>
 800f3ca:	f1ba 0f00 	cmp.w	sl, #0
 800f3ce:	dd34      	ble.n	800f43a <_dtoa_r+0x3a2>
 800f3d0:	4a9a      	ldr	r2, [pc, #616]	; (800f63c <_dtoa_r+0x5a4>)
 800f3d2:	f00a 030f 	and.w	r3, sl, #15
 800f3d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f3da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f3de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f3e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f3e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800f3ea:	d016      	beq.n	800f41a <_dtoa_r+0x382>
 800f3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3f0:	4b93      	ldr	r3, [pc, #588]	; (800f640 <_dtoa_r+0x5a8>)
 800f3f2:	2703      	movs	r7, #3
 800f3f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3f8:	f7f1 fa04 	bl	8000804 <__aeabi_ddiv>
 800f3fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f400:	f004 040f 	and.w	r4, r4, #15
 800f404:	4e8e      	ldr	r6, [pc, #568]	; (800f640 <_dtoa_r+0x5a8>)
 800f406:	b954      	cbnz	r4, 800f41e <_dtoa_r+0x386>
 800f408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f410:	f7f1 f9f8 	bl	8000804 <__aeabi_ddiv>
 800f414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f418:	e029      	b.n	800f46e <_dtoa_r+0x3d6>
 800f41a:	2702      	movs	r7, #2
 800f41c:	e7f2      	b.n	800f404 <_dtoa_r+0x36c>
 800f41e:	07e1      	lsls	r1, r4, #31
 800f420:	d508      	bpl.n	800f434 <_dtoa_r+0x39c>
 800f422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f42a:	f7f1 f8c1 	bl	80005b0 <__aeabi_dmul>
 800f42e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f432:	3701      	adds	r7, #1
 800f434:	1064      	asrs	r4, r4, #1
 800f436:	3608      	adds	r6, #8
 800f438:	e7e5      	b.n	800f406 <_dtoa_r+0x36e>
 800f43a:	f000 80a5 	beq.w	800f588 <_dtoa_r+0x4f0>
 800f43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f442:	f1ca 0400 	rsb	r4, sl, #0
 800f446:	4b7d      	ldr	r3, [pc, #500]	; (800f63c <_dtoa_r+0x5a4>)
 800f448:	f004 020f 	and.w	r2, r4, #15
 800f44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	f7f1 f8ac 	bl	80005b0 <__aeabi_dmul>
 800f458:	2702      	movs	r7, #2
 800f45a:	2300      	movs	r3, #0
 800f45c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f460:	4e77      	ldr	r6, [pc, #476]	; (800f640 <_dtoa_r+0x5a8>)
 800f462:	1124      	asrs	r4, r4, #4
 800f464:	2c00      	cmp	r4, #0
 800f466:	f040 8084 	bne.w	800f572 <_dtoa_r+0x4da>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1d2      	bne.n	800f414 <_dtoa_r+0x37c>
 800f46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 808b 	beq.w	800f58c <_dtoa_r+0x4f4>
 800f476:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f47a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f47e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f482:	2200      	movs	r2, #0
 800f484:	4b6f      	ldr	r3, [pc, #444]	; (800f644 <_dtoa_r+0x5ac>)
 800f486:	f7f1 fb05 	bl	8000a94 <__aeabi_dcmplt>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d07e      	beq.n	800f58c <_dtoa_r+0x4f4>
 800f48e:	9b08      	ldr	r3, [sp, #32]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d07b      	beq.n	800f58c <_dtoa_r+0x4f4>
 800f494:	f1b9 0f00 	cmp.w	r9, #0
 800f498:	dd38      	ble.n	800f50c <_dtoa_r+0x474>
 800f49a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4b69      	ldr	r3, [pc, #420]	; (800f648 <_dtoa_r+0x5b0>)
 800f4a2:	f7f1 f885 	bl	80005b0 <__aeabi_dmul>
 800f4a6:	464c      	mov	r4, r9
 800f4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 800f4b0:	3701      	adds	r7, #1
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	f7f1 f812 	bl	80004dc <__aeabi_i2d>
 800f4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4bc:	f7f1 f878 	bl	80005b0 <__aeabi_dmul>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	4b62      	ldr	r3, [pc, #392]	; (800f64c <_dtoa_r+0x5b4>)
 800f4c4:	f7f0 febe 	bl	8000244 <__adddf3>
 800f4c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f4cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f4d0:	9611      	str	r6, [sp, #68]	; 0x44
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d15d      	bne.n	800f592 <_dtoa_r+0x4fa>
 800f4d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	4b5c      	ldr	r3, [pc, #368]	; (800f650 <_dtoa_r+0x5b8>)
 800f4de:	f7f0 feaf 	bl	8000240 <__aeabi_dsub>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f4ea:	4633      	mov	r3, r6
 800f4ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4ee:	f7f1 faef 	bl	8000ad0 <__aeabi_dcmpgt>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	f040 829c 	bne.w	800fa30 <_dtoa_r+0x998>
 800f4f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f502:	f7f1 fac7 	bl	8000a94 <__aeabi_dcmplt>
 800f506:	2800      	cmp	r0, #0
 800f508:	f040 8290 	bne.w	800fa2c <_dtoa_r+0x994>
 800f50c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f510:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f516:	2b00      	cmp	r3, #0
 800f518:	f2c0 8152 	blt.w	800f7c0 <_dtoa_r+0x728>
 800f51c:	f1ba 0f0e 	cmp.w	sl, #14
 800f520:	f300 814e 	bgt.w	800f7c0 <_dtoa_r+0x728>
 800f524:	4b45      	ldr	r3, [pc, #276]	; (800f63c <_dtoa_r+0x5a4>)
 800f526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f52a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f52e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f534:	2b00      	cmp	r3, #0
 800f536:	f280 80db 	bge.w	800f6f0 <_dtoa_r+0x658>
 800f53a:	9b08      	ldr	r3, [sp, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f300 80d7 	bgt.w	800f6f0 <_dtoa_r+0x658>
 800f542:	f040 8272 	bne.w	800fa2a <_dtoa_r+0x992>
 800f546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f54a:	2200      	movs	r2, #0
 800f54c:	4b40      	ldr	r3, [pc, #256]	; (800f650 <_dtoa_r+0x5b8>)
 800f54e:	f7f1 f82f 	bl	80005b0 <__aeabi_dmul>
 800f552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f556:	f7f1 fab1 	bl	8000abc <__aeabi_dcmpge>
 800f55a:	9c08      	ldr	r4, [sp, #32]
 800f55c:	4626      	mov	r6, r4
 800f55e:	2800      	cmp	r0, #0
 800f560:	f040 8248 	bne.w	800f9f4 <_dtoa_r+0x95c>
 800f564:	2331      	movs	r3, #49	; 0x31
 800f566:	9f03      	ldr	r7, [sp, #12]
 800f568:	f10a 0a01 	add.w	sl, sl, #1
 800f56c:	f807 3b01 	strb.w	r3, [r7], #1
 800f570:	e244      	b.n	800f9fc <_dtoa_r+0x964>
 800f572:	07e2      	lsls	r2, r4, #31
 800f574:	d505      	bpl.n	800f582 <_dtoa_r+0x4ea>
 800f576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f57a:	f7f1 f819 	bl	80005b0 <__aeabi_dmul>
 800f57e:	2301      	movs	r3, #1
 800f580:	3701      	adds	r7, #1
 800f582:	1064      	asrs	r4, r4, #1
 800f584:	3608      	adds	r6, #8
 800f586:	e76d      	b.n	800f464 <_dtoa_r+0x3cc>
 800f588:	2702      	movs	r7, #2
 800f58a:	e770      	b.n	800f46e <_dtoa_r+0x3d6>
 800f58c:	46d0      	mov	r8, sl
 800f58e:	9c08      	ldr	r4, [sp, #32]
 800f590:	e78f      	b.n	800f4b2 <_dtoa_r+0x41a>
 800f592:	9903      	ldr	r1, [sp, #12]
 800f594:	4b29      	ldr	r3, [pc, #164]	; (800f63c <_dtoa_r+0x5a4>)
 800f596:	4421      	add	r1, r4
 800f598:	9112      	str	r1, [sp, #72]	; 0x48
 800f59a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f59c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f5a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5a8:	2900      	cmp	r1, #0
 800f5aa:	d055      	beq.n	800f658 <_dtoa_r+0x5c0>
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	4929      	ldr	r1, [pc, #164]	; (800f654 <_dtoa_r+0x5bc>)
 800f5b0:	f7f1 f928 	bl	8000804 <__aeabi_ddiv>
 800f5b4:	463b      	mov	r3, r7
 800f5b6:	4632      	mov	r2, r6
 800f5b8:	f7f0 fe42 	bl	8000240 <__aeabi_dsub>
 800f5bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f5c0:	9f03      	ldr	r7, [sp, #12]
 800f5c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5c6:	f7f1 faa3 	bl	8000b10 <__aeabi_d2iz>
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f7f0 ff86 	bl	80004dc <__aeabi_i2d>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5d8:	f7f0 fe32 	bl	8000240 <__aeabi_dsub>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	460b      	mov	r3, r1
 800f5e0:	3430      	adds	r4, #48	; 0x30
 800f5e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f5ea:	f807 4b01 	strb.w	r4, [r7], #1
 800f5ee:	f7f1 fa51 	bl	8000a94 <__aeabi_dcmplt>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d174      	bne.n	800f6e0 <_dtoa_r+0x648>
 800f5f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	4911      	ldr	r1, [pc, #68]	; (800f644 <_dtoa_r+0x5ac>)
 800f5fe:	f7f0 fe1f 	bl	8000240 <__aeabi_dsub>
 800f602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f606:	f7f1 fa45 	bl	8000a94 <__aeabi_dcmplt>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	f040 80b7 	bne.w	800f77e <_dtoa_r+0x6e6>
 800f610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f612:	429f      	cmp	r7, r3
 800f614:	f43f af7a 	beq.w	800f50c <_dtoa_r+0x474>
 800f618:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f61c:	2200      	movs	r2, #0
 800f61e:	4b0a      	ldr	r3, [pc, #40]	; (800f648 <_dtoa_r+0x5b0>)
 800f620:	f7f0 ffc6 	bl	80005b0 <__aeabi_dmul>
 800f624:	2200      	movs	r2, #0
 800f626:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f62a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f62e:	4b06      	ldr	r3, [pc, #24]	; (800f648 <_dtoa_r+0x5b0>)
 800f630:	f7f0 ffbe 	bl	80005b0 <__aeabi_dmul>
 800f634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f638:	e7c3      	b.n	800f5c2 <_dtoa_r+0x52a>
 800f63a:	bf00      	nop
 800f63c:	080344c0 	.word	0x080344c0
 800f640:	08034498 	.word	0x08034498
 800f644:	3ff00000 	.word	0x3ff00000
 800f648:	40240000 	.word	0x40240000
 800f64c:	401c0000 	.word	0x401c0000
 800f650:	40140000 	.word	0x40140000
 800f654:	3fe00000 	.word	0x3fe00000
 800f658:	4630      	mov	r0, r6
 800f65a:	4639      	mov	r1, r7
 800f65c:	f7f0 ffa8 	bl	80005b0 <__aeabi_dmul>
 800f660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f662:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f666:	9c03      	ldr	r4, [sp, #12]
 800f668:	9314      	str	r3, [sp, #80]	; 0x50
 800f66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f66e:	f7f1 fa4f 	bl	8000b10 <__aeabi_d2iz>
 800f672:	9015      	str	r0, [sp, #84]	; 0x54
 800f674:	f7f0 ff32 	bl	80004dc <__aeabi_i2d>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f680:	f7f0 fdde 	bl	8000240 <__aeabi_dsub>
 800f684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f686:	4606      	mov	r6, r0
 800f688:	3330      	adds	r3, #48	; 0x30
 800f68a:	f804 3b01 	strb.w	r3, [r4], #1
 800f68e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f690:	460f      	mov	r7, r1
 800f692:	429c      	cmp	r4, r3
 800f694:	f04f 0200 	mov.w	r2, #0
 800f698:	d124      	bne.n	800f6e4 <_dtoa_r+0x64c>
 800f69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f69e:	4bb0      	ldr	r3, [pc, #704]	; (800f960 <_dtoa_r+0x8c8>)
 800f6a0:	f7f0 fdd0 	bl	8000244 <__adddf3>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f1 fa10 	bl	8000ad0 <__aeabi_dcmpgt>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d163      	bne.n	800f77c <_dtoa_r+0x6e4>
 800f6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	49a9      	ldr	r1, [pc, #676]	; (800f960 <_dtoa_r+0x8c8>)
 800f6bc:	f7f0 fdc0 	bl	8000240 <__aeabi_dsub>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f1 f9e4 	bl	8000a94 <__aeabi_dcmplt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	f43f af1d 	beq.w	800f50c <_dtoa_r+0x474>
 800f6d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f6d4:	1e7b      	subs	r3, r7, #1
 800f6d6:	9314      	str	r3, [sp, #80]	; 0x50
 800f6d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f6dc:	2b30      	cmp	r3, #48	; 0x30
 800f6de:	d0f8      	beq.n	800f6d2 <_dtoa_r+0x63a>
 800f6e0:	46c2      	mov	sl, r8
 800f6e2:	e03b      	b.n	800f75c <_dtoa_r+0x6c4>
 800f6e4:	4b9f      	ldr	r3, [pc, #636]	; (800f964 <_dtoa_r+0x8cc>)
 800f6e6:	f7f0 ff63 	bl	80005b0 <__aeabi_dmul>
 800f6ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6ee:	e7bc      	b.n	800f66a <_dtoa_r+0x5d2>
 800f6f0:	9f03      	ldr	r7, [sp, #12]
 800f6f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f6f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	f7f1 f881 	bl	8000804 <__aeabi_ddiv>
 800f702:	f7f1 fa05 	bl	8000b10 <__aeabi_d2iz>
 800f706:	4604      	mov	r4, r0
 800f708:	f7f0 fee8 	bl	80004dc <__aeabi_i2d>
 800f70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f710:	f7f0 ff4e 	bl	80005b0 <__aeabi_dmul>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	4640      	mov	r0, r8
 800f71a:	4649      	mov	r1, r9
 800f71c:	f7f0 fd90 	bl	8000240 <__aeabi_dsub>
 800f720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f724:	f807 6b01 	strb.w	r6, [r7], #1
 800f728:	9e03      	ldr	r6, [sp, #12]
 800f72a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f72e:	1bbe      	subs	r6, r7, r6
 800f730:	45b4      	cmp	ip, r6
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	d136      	bne.n	800f7a6 <_dtoa_r+0x70e>
 800f738:	f7f0 fd84 	bl	8000244 <__adddf3>
 800f73c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f740:	4680      	mov	r8, r0
 800f742:	4689      	mov	r9, r1
 800f744:	f7f1 f9c4 	bl	8000ad0 <__aeabi_dcmpgt>
 800f748:	bb58      	cbnz	r0, 800f7a2 <_dtoa_r+0x70a>
 800f74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f74e:	4640      	mov	r0, r8
 800f750:	4649      	mov	r1, r9
 800f752:	f7f1 f995 	bl	8000a80 <__aeabi_dcmpeq>
 800f756:	b108      	cbz	r0, 800f75c <_dtoa_r+0x6c4>
 800f758:	07e1      	lsls	r1, r4, #31
 800f75a:	d422      	bmi.n	800f7a2 <_dtoa_r+0x70a>
 800f75c:	4628      	mov	r0, r5
 800f75e:	4659      	mov	r1, fp
 800f760:	f001 f888 	bl	8010874 <_Bfree>
 800f764:	2300      	movs	r3, #0
 800f766:	703b      	strb	r3, [r7, #0]
 800f768:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f76a:	f10a 0001 	add.w	r0, sl, #1
 800f76e:	6018      	str	r0, [r3, #0]
 800f770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f772:	2b00      	cmp	r3, #0
 800f774:	f43f acde 	beq.w	800f134 <_dtoa_r+0x9c>
 800f778:	601f      	str	r7, [r3, #0]
 800f77a:	e4db      	b.n	800f134 <_dtoa_r+0x9c>
 800f77c:	4627      	mov	r7, r4
 800f77e:	463b      	mov	r3, r7
 800f780:	461f      	mov	r7, r3
 800f782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f786:	2a39      	cmp	r2, #57	; 0x39
 800f788:	d107      	bne.n	800f79a <_dtoa_r+0x702>
 800f78a:	9a03      	ldr	r2, [sp, #12]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d1f7      	bne.n	800f780 <_dtoa_r+0x6e8>
 800f790:	2230      	movs	r2, #48	; 0x30
 800f792:	9903      	ldr	r1, [sp, #12]
 800f794:	f108 0801 	add.w	r8, r8, #1
 800f798:	700a      	strb	r2, [r1, #0]
 800f79a:	781a      	ldrb	r2, [r3, #0]
 800f79c:	3201      	adds	r2, #1
 800f79e:	701a      	strb	r2, [r3, #0]
 800f7a0:	e79e      	b.n	800f6e0 <_dtoa_r+0x648>
 800f7a2:	46d0      	mov	r8, sl
 800f7a4:	e7eb      	b.n	800f77e <_dtoa_r+0x6e6>
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	4b6e      	ldr	r3, [pc, #440]	; (800f964 <_dtoa_r+0x8cc>)
 800f7aa:	f7f0 ff01 	bl	80005b0 <__aeabi_dmul>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4680      	mov	r8, r0
 800f7b4:	4689      	mov	r9, r1
 800f7b6:	f7f1 f963 	bl	8000a80 <__aeabi_dcmpeq>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d09b      	beq.n	800f6f6 <_dtoa_r+0x65e>
 800f7be:	e7cd      	b.n	800f75c <_dtoa_r+0x6c4>
 800f7c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	f000 80d0 	beq.w	800f968 <_dtoa_r+0x8d0>
 800f7c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f7ca:	2a01      	cmp	r2, #1
 800f7cc:	f300 80ae 	bgt.w	800f92c <_dtoa_r+0x894>
 800f7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7d2:	2a00      	cmp	r2, #0
 800f7d4:	f000 80a6 	beq.w	800f924 <_dtoa_r+0x88c>
 800f7d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f7de:	9f06      	ldr	r7, [sp, #24]
 800f7e0:	9a06      	ldr	r2, [sp, #24]
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	441a      	add	r2, r3
 800f7e6:	9206      	str	r2, [sp, #24]
 800f7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	441a      	add	r2, r3
 800f7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f0:	f001 f940 	bl	8010a74 <__i2b>
 800f7f4:	4606      	mov	r6, r0
 800f7f6:	2f00      	cmp	r7, #0
 800f7f8:	dd0c      	ble.n	800f814 <_dtoa_r+0x77c>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dd09      	ble.n	800f814 <_dtoa_r+0x77c>
 800f800:	42bb      	cmp	r3, r7
 800f802:	bfa8      	it	ge
 800f804:	463b      	movge	r3, r7
 800f806:	9a06      	ldr	r2, [sp, #24]
 800f808:	1aff      	subs	r7, r7, r3
 800f80a:	1ad2      	subs	r2, r2, r3
 800f80c:	9206      	str	r2, [sp, #24]
 800f80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	9309      	str	r3, [sp, #36]	; 0x24
 800f814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f816:	b1f3      	cbz	r3, 800f856 <_dtoa_r+0x7be>
 800f818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 80a8 	beq.w	800f970 <_dtoa_r+0x8d8>
 800f820:	2c00      	cmp	r4, #0
 800f822:	dd10      	ble.n	800f846 <_dtoa_r+0x7ae>
 800f824:	4631      	mov	r1, r6
 800f826:	4622      	mov	r2, r4
 800f828:	4628      	mov	r0, r5
 800f82a:	f001 f9e1 	bl	8010bf0 <__pow5mult>
 800f82e:	465a      	mov	r2, fp
 800f830:	4601      	mov	r1, r0
 800f832:	4606      	mov	r6, r0
 800f834:	4628      	mov	r0, r5
 800f836:	f001 f933 	bl	8010aa0 <__multiply>
 800f83a:	4680      	mov	r8, r0
 800f83c:	4659      	mov	r1, fp
 800f83e:	4628      	mov	r0, r5
 800f840:	f001 f818 	bl	8010874 <_Bfree>
 800f844:	46c3      	mov	fp, r8
 800f846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f848:	1b1a      	subs	r2, r3, r4
 800f84a:	d004      	beq.n	800f856 <_dtoa_r+0x7be>
 800f84c:	4659      	mov	r1, fp
 800f84e:	4628      	mov	r0, r5
 800f850:	f001 f9ce 	bl	8010bf0 <__pow5mult>
 800f854:	4683      	mov	fp, r0
 800f856:	2101      	movs	r1, #1
 800f858:	4628      	mov	r0, r5
 800f85a:	f001 f90b 	bl	8010a74 <__i2b>
 800f85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f860:	4604      	mov	r4, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	f340 8086 	ble.w	800f974 <_dtoa_r+0x8dc>
 800f868:	461a      	mov	r2, r3
 800f86a:	4601      	mov	r1, r0
 800f86c:	4628      	mov	r0, r5
 800f86e:	f001 f9bf 	bl	8010bf0 <__pow5mult>
 800f872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f874:	4604      	mov	r4, r0
 800f876:	2b01      	cmp	r3, #1
 800f878:	dd7f      	ble.n	800f97a <_dtoa_r+0x8e2>
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	6923      	ldr	r3, [r4, #16]
 800f880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f884:	6918      	ldr	r0, [r3, #16]
 800f886:	f001 f8a7 	bl	80109d8 <__hi0bits>
 800f88a:	f1c0 0020 	rsb	r0, r0, #32
 800f88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f890:	4418      	add	r0, r3
 800f892:	f010 001f 	ands.w	r0, r0, #31
 800f896:	f000 8092 	beq.w	800f9be <_dtoa_r+0x926>
 800f89a:	f1c0 0320 	rsb	r3, r0, #32
 800f89e:	2b04      	cmp	r3, #4
 800f8a0:	f340 808a 	ble.w	800f9b8 <_dtoa_r+0x920>
 800f8a4:	f1c0 001c 	rsb	r0, r0, #28
 800f8a8:	9b06      	ldr	r3, [sp, #24]
 800f8aa:	4407      	add	r7, r0
 800f8ac:	4403      	add	r3, r0
 800f8ae:	9306      	str	r3, [sp, #24]
 800f8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b2:	4403      	add	r3, r0
 800f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b6:	9b06      	ldr	r3, [sp, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dd05      	ble.n	800f8c8 <_dtoa_r+0x830>
 800f8bc:	4659      	mov	r1, fp
 800f8be:	461a      	mov	r2, r3
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	f001 f9ef 	bl	8010ca4 <__lshift>
 800f8c6:	4683      	mov	fp, r0
 800f8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dd05      	ble.n	800f8da <_dtoa_r+0x842>
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f001 f9e6 	bl	8010ca4 <__lshift>
 800f8d8:	4604      	mov	r4, r0
 800f8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d070      	beq.n	800f9c2 <_dtoa_r+0x92a>
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	4658      	mov	r0, fp
 800f8e4:	f001 fa4e 	bl	8010d84 <__mcmp>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	da6a      	bge.n	800f9c2 <_dtoa_r+0x92a>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4659      	mov	r1, fp
 800f8f0:	220a      	movs	r2, #10
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f000 ffe0 	bl	80108b8 <__multadd>
 800f8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8fa:	4683      	mov	fp, r0
 800f8fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8194 	beq.w	800fc2e <_dtoa_r+0xb96>
 800f906:	4631      	mov	r1, r6
 800f908:	2300      	movs	r3, #0
 800f90a:	220a      	movs	r2, #10
 800f90c:	4628      	mov	r0, r5
 800f90e:	f000 ffd3 	bl	80108b8 <__multadd>
 800f912:	f1b9 0f00 	cmp.w	r9, #0
 800f916:	4606      	mov	r6, r0
 800f918:	f300 8093 	bgt.w	800fa42 <_dtoa_r+0x9aa>
 800f91c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f91e:	2b02      	cmp	r3, #2
 800f920:	dc57      	bgt.n	800f9d2 <_dtoa_r+0x93a>
 800f922:	e08e      	b.n	800fa42 <_dtoa_r+0x9aa>
 800f924:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f92a:	e757      	b.n	800f7dc <_dtoa_r+0x744>
 800f92c:	9b08      	ldr	r3, [sp, #32]
 800f92e:	1e5c      	subs	r4, r3, #1
 800f930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f932:	42a3      	cmp	r3, r4
 800f934:	bfb7      	itett	lt
 800f936:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f938:	1b1c      	subge	r4, r3, r4
 800f93a:	1ae2      	sublt	r2, r4, r3
 800f93c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f93e:	bfbe      	ittt	lt
 800f940:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f942:	189b      	addlt	r3, r3, r2
 800f944:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f946:	9b08      	ldr	r3, [sp, #32]
 800f948:	bfb8      	it	lt
 800f94a:	2400      	movlt	r4, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bfbb      	ittet	lt
 800f950:	9b06      	ldrlt	r3, [sp, #24]
 800f952:	9a08      	ldrlt	r2, [sp, #32]
 800f954:	9f06      	ldrge	r7, [sp, #24]
 800f956:	1a9f      	sublt	r7, r3, r2
 800f958:	bfac      	ite	ge
 800f95a:	9b08      	ldrge	r3, [sp, #32]
 800f95c:	2300      	movlt	r3, #0
 800f95e:	e73f      	b.n	800f7e0 <_dtoa_r+0x748>
 800f960:	3fe00000 	.word	0x3fe00000
 800f964:	40240000 	.word	0x40240000
 800f968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f96a:	9f06      	ldr	r7, [sp, #24]
 800f96c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f96e:	e742      	b.n	800f7f6 <_dtoa_r+0x75e>
 800f970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f972:	e76b      	b.n	800f84c <_dtoa_r+0x7b4>
 800f974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f976:	2b01      	cmp	r3, #1
 800f978:	dc19      	bgt.n	800f9ae <_dtoa_r+0x916>
 800f97a:	9b04      	ldr	r3, [sp, #16]
 800f97c:	b9bb      	cbnz	r3, 800f9ae <_dtoa_r+0x916>
 800f97e:	9b05      	ldr	r3, [sp, #20]
 800f980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f984:	b99b      	cbnz	r3, 800f9ae <_dtoa_r+0x916>
 800f986:	9b05      	ldr	r3, [sp, #20]
 800f988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f98c:	0d1b      	lsrs	r3, r3, #20
 800f98e:	051b      	lsls	r3, r3, #20
 800f990:	b183      	cbz	r3, 800f9b4 <_dtoa_r+0x91c>
 800f992:	f04f 0801 	mov.w	r8, #1
 800f996:	9b06      	ldr	r3, [sp, #24]
 800f998:	3301      	adds	r3, #1
 800f99a:	9306      	str	r3, [sp, #24]
 800f99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99e:	3301      	adds	r3, #1
 800f9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f47f af6a 	bne.w	800f87e <_dtoa_r+0x7e6>
 800f9aa:	2001      	movs	r0, #1
 800f9ac:	e76f      	b.n	800f88e <_dtoa_r+0x7f6>
 800f9ae:	f04f 0800 	mov.w	r8, #0
 800f9b2:	e7f6      	b.n	800f9a2 <_dtoa_r+0x90a>
 800f9b4:	4698      	mov	r8, r3
 800f9b6:	e7f4      	b.n	800f9a2 <_dtoa_r+0x90a>
 800f9b8:	f43f af7d 	beq.w	800f8b6 <_dtoa_r+0x81e>
 800f9bc:	4618      	mov	r0, r3
 800f9be:	301c      	adds	r0, #28
 800f9c0:	e772      	b.n	800f8a8 <_dtoa_r+0x810>
 800f9c2:	9b08      	ldr	r3, [sp, #32]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dc36      	bgt.n	800fa36 <_dtoa_r+0x99e>
 800f9c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	dd33      	ble.n	800fa36 <_dtoa_r+0x99e>
 800f9ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9d2:	f1b9 0f00 	cmp.w	r9, #0
 800f9d6:	d10d      	bne.n	800f9f4 <_dtoa_r+0x95c>
 800f9d8:	4621      	mov	r1, r4
 800f9da:	464b      	mov	r3, r9
 800f9dc:	2205      	movs	r2, #5
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 ff6a 	bl	80108b8 <__multadd>
 800f9e4:	4601      	mov	r1, r0
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	4658      	mov	r0, fp
 800f9ea:	f001 f9cb 	bl	8010d84 <__mcmp>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	f73f adb8 	bgt.w	800f564 <_dtoa_r+0x4cc>
 800f9f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f9f6:	9f03      	ldr	r7, [sp, #12]
 800f9f8:	ea6f 0a03 	mvn.w	sl, r3
 800f9fc:	f04f 0800 	mov.w	r8, #0
 800fa00:	4621      	mov	r1, r4
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 ff36 	bl	8010874 <_Bfree>
 800fa08:	2e00      	cmp	r6, #0
 800fa0a:	f43f aea7 	beq.w	800f75c <_dtoa_r+0x6c4>
 800fa0e:	f1b8 0f00 	cmp.w	r8, #0
 800fa12:	d005      	beq.n	800fa20 <_dtoa_r+0x988>
 800fa14:	45b0      	cmp	r8, r6
 800fa16:	d003      	beq.n	800fa20 <_dtoa_r+0x988>
 800fa18:	4641      	mov	r1, r8
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	f000 ff2a 	bl	8010874 <_Bfree>
 800fa20:	4631      	mov	r1, r6
 800fa22:	4628      	mov	r0, r5
 800fa24:	f000 ff26 	bl	8010874 <_Bfree>
 800fa28:	e698      	b.n	800f75c <_dtoa_r+0x6c4>
 800fa2a:	2400      	movs	r4, #0
 800fa2c:	4626      	mov	r6, r4
 800fa2e:	e7e1      	b.n	800f9f4 <_dtoa_r+0x95c>
 800fa30:	46c2      	mov	sl, r8
 800fa32:	4626      	mov	r6, r4
 800fa34:	e596      	b.n	800f564 <_dtoa_r+0x4cc>
 800fa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f000 80fd 	beq.w	800fc3c <_dtoa_r+0xba4>
 800fa42:	2f00      	cmp	r7, #0
 800fa44:	dd05      	ble.n	800fa52 <_dtoa_r+0x9ba>
 800fa46:	4631      	mov	r1, r6
 800fa48:	463a      	mov	r2, r7
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f001 f92a 	bl	8010ca4 <__lshift>
 800fa50:	4606      	mov	r6, r0
 800fa52:	f1b8 0f00 	cmp.w	r8, #0
 800fa56:	d05c      	beq.n	800fb12 <_dtoa_r+0xa7a>
 800fa58:	4628      	mov	r0, r5
 800fa5a:	6871      	ldr	r1, [r6, #4]
 800fa5c:	f000 feca 	bl	80107f4 <_Balloc>
 800fa60:	4607      	mov	r7, r0
 800fa62:	b928      	cbnz	r0, 800fa70 <_dtoa_r+0x9d8>
 800fa64:	4602      	mov	r2, r0
 800fa66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fa6a:	4b7f      	ldr	r3, [pc, #508]	; (800fc68 <_dtoa_r+0xbd0>)
 800fa6c:	f7ff bb28 	b.w	800f0c0 <_dtoa_r+0x28>
 800fa70:	6932      	ldr	r2, [r6, #16]
 800fa72:	f106 010c 	add.w	r1, r6, #12
 800fa76:	3202      	adds	r2, #2
 800fa78:	0092      	lsls	r2, r2, #2
 800fa7a:	300c      	adds	r0, #12
 800fa7c:	f7fd fb46 	bl	800d10c <memcpy>
 800fa80:	2201      	movs	r2, #1
 800fa82:	4639      	mov	r1, r7
 800fa84:	4628      	mov	r0, r5
 800fa86:	f001 f90d 	bl	8010ca4 <__lshift>
 800fa8a:	46b0      	mov	r8, r6
 800fa8c:	4606      	mov	r6, r0
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	3301      	adds	r3, #1
 800fa92:	9308      	str	r3, [sp, #32]
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	444b      	add	r3, r9
 800fa98:	930a      	str	r3, [sp, #40]	; 0x28
 800fa9a:	9b04      	ldr	r3, [sp, #16]
 800fa9c:	f003 0301 	and.w	r3, r3, #1
 800faa0:	9309      	str	r3, [sp, #36]	; 0x24
 800faa2:	9b08      	ldr	r3, [sp, #32]
 800faa4:	4621      	mov	r1, r4
 800faa6:	3b01      	subs	r3, #1
 800faa8:	4658      	mov	r0, fp
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	f7ff fa68 	bl	800ef80 <quorem>
 800fab0:	4603      	mov	r3, r0
 800fab2:	4641      	mov	r1, r8
 800fab4:	3330      	adds	r3, #48	; 0x30
 800fab6:	9006      	str	r0, [sp, #24]
 800fab8:	4658      	mov	r0, fp
 800faba:	930b      	str	r3, [sp, #44]	; 0x2c
 800fabc:	f001 f962 	bl	8010d84 <__mcmp>
 800fac0:	4632      	mov	r2, r6
 800fac2:	4681      	mov	r9, r0
 800fac4:	4621      	mov	r1, r4
 800fac6:	4628      	mov	r0, r5
 800fac8:	f001 f978 	bl	8010dbc <__mdiff>
 800facc:	68c2      	ldr	r2, [r0, #12]
 800face:	4607      	mov	r7, r0
 800fad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fad2:	bb02      	cbnz	r2, 800fb16 <_dtoa_r+0xa7e>
 800fad4:	4601      	mov	r1, r0
 800fad6:	4658      	mov	r0, fp
 800fad8:	f001 f954 	bl	8010d84 <__mcmp>
 800fadc:	4602      	mov	r2, r0
 800fade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae0:	4639      	mov	r1, r7
 800fae2:	4628      	mov	r0, r5
 800fae4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fae8:	f000 fec4 	bl	8010874 <_Bfree>
 800faec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800faee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800faf0:	9f08      	ldr	r7, [sp, #32]
 800faf2:	ea43 0102 	orr.w	r1, r3, r2
 800faf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf8:	430b      	orrs	r3, r1
 800fafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fafc:	d10d      	bne.n	800fb1a <_dtoa_r+0xa82>
 800fafe:	2b39      	cmp	r3, #57	; 0x39
 800fb00:	d029      	beq.n	800fb56 <_dtoa_r+0xabe>
 800fb02:	f1b9 0f00 	cmp.w	r9, #0
 800fb06:	dd01      	ble.n	800fb0c <_dtoa_r+0xa74>
 800fb08:	9b06      	ldr	r3, [sp, #24]
 800fb0a:	3331      	adds	r3, #49	; 0x31
 800fb0c:	9a04      	ldr	r2, [sp, #16]
 800fb0e:	7013      	strb	r3, [r2, #0]
 800fb10:	e776      	b.n	800fa00 <_dtoa_r+0x968>
 800fb12:	4630      	mov	r0, r6
 800fb14:	e7b9      	b.n	800fa8a <_dtoa_r+0x9f2>
 800fb16:	2201      	movs	r2, #1
 800fb18:	e7e2      	b.n	800fae0 <_dtoa_r+0xa48>
 800fb1a:	f1b9 0f00 	cmp.w	r9, #0
 800fb1e:	db06      	blt.n	800fb2e <_dtoa_r+0xa96>
 800fb20:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fb22:	ea41 0909 	orr.w	r9, r1, r9
 800fb26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb28:	ea59 0101 	orrs.w	r1, r9, r1
 800fb2c:	d120      	bne.n	800fb70 <_dtoa_r+0xad8>
 800fb2e:	2a00      	cmp	r2, #0
 800fb30:	ddec      	ble.n	800fb0c <_dtoa_r+0xa74>
 800fb32:	4659      	mov	r1, fp
 800fb34:	2201      	movs	r2, #1
 800fb36:	4628      	mov	r0, r5
 800fb38:	9308      	str	r3, [sp, #32]
 800fb3a:	f001 f8b3 	bl	8010ca4 <__lshift>
 800fb3e:	4621      	mov	r1, r4
 800fb40:	4683      	mov	fp, r0
 800fb42:	f001 f91f 	bl	8010d84 <__mcmp>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	9b08      	ldr	r3, [sp, #32]
 800fb4a:	dc02      	bgt.n	800fb52 <_dtoa_r+0xaba>
 800fb4c:	d1de      	bne.n	800fb0c <_dtoa_r+0xa74>
 800fb4e:	07da      	lsls	r2, r3, #31
 800fb50:	d5dc      	bpl.n	800fb0c <_dtoa_r+0xa74>
 800fb52:	2b39      	cmp	r3, #57	; 0x39
 800fb54:	d1d8      	bne.n	800fb08 <_dtoa_r+0xa70>
 800fb56:	2339      	movs	r3, #57	; 0x39
 800fb58:	9a04      	ldr	r2, [sp, #16]
 800fb5a:	7013      	strb	r3, [r2, #0]
 800fb5c:	463b      	mov	r3, r7
 800fb5e:	461f      	mov	r7, r3
 800fb60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	2a39      	cmp	r2, #57	; 0x39
 800fb68:	d050      	beq.n	800fc0c <_dtoa_r+0xb74>
 800fb6a:	3201      	adds	r2, #1
 800fb6c:	701a      	strb	r2, [r3, #0]
 800fb6e:	e747      	b.n	800fa00 <_dtoa_r+0x968>
 800fb70:	2a00      	cmp	r2, #0
 800fb72:	dd03      	ble.n	800fb7c <_dtoa_r+0xae4>
 800fb74:	2b39      	cmp	r3, #57	; 0x39
 800fb76:	d0ee      	beq.n	800fb56 <_dtoa_r+0xabe>
 800fb78:	3301      	adds	r3, #1
 800fb7a:	e7c7      	b.n	800fb0c <_dtoa_r+0xa74>
 800fb7c:	9a08      	ldr	r2, [sp, #32]
 800fb7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb80:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb84:	428a      	cmp	r2, r1
 800fb86:	d02a      	beq.n	800fbde <_dtoa_r+0xb46>
 800fb88:	4659      	mov	r1, fp
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	220a      	movs	r2, #10
 800fb8e:	4628      	mov	r0, r5
 800fb90:	f000 fe92 	bl	80108b8 <__multadd>
 800fb94:	45b0      	cmp	r8, r6
 800fb96:	4683      	mov	fp, r0
 800fb98:	f04f 0300 	mov.w	r3, #0
 800fb9c:	f04f 020a 	mov.w	r2, #10
 800fba0:	4641      	mov	r1, r8
 800fba2:	4628      	mov	r0, r5
 800fba4:	d107      	bne.n	800fbb6 <_dtoa_r+0xb1e>
 800fba6:	f000 fe87 	bl	80108b8 <__multadd>
 800fbaa:	4680      	mov	r8, r0
 800fbac:	4606      	mov	r6, r0
 800fbae:	9b08      	ldr	r3, [sp, #32]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	9308      	str	r3, [sp, #32]
 800fbb4:	e775      	b.n	800faa2 <_dtoa_r+0xa0a>
 800fbb6:	f000 fe7f 	bl	80108b8 <__multadd>
 800fbba:	4631      	mov	r1, r6
 800fbbc:	4680      	mov	r8, r0
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	220a      	movs	r2, #10
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f000 fe78 	bl	80108b8 <__multadd>
 800fbc8:	4606      	mov	r6, r0
 800fbca:	e7f0      	b.n	800fbae <_dtoa_r+0xb16>
 800fbcc:	f1b9 0f00 	cmp.w	r9, #0
 800fbd0:	bfcc      	ite	gt
 800fbd2:	464f      	movgt	r7, r9
 800fbd4:	2701      	movle	r7, #1
 800fbd6:	f04f 0800 	mov.w	r8, #0
 800fbda:	9a03      	ldr	r2, [sp, #12]
 800fbdc:	4417      	add	r7, r2
 800fbde:	4659      	mov	r1, fp
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	9308      	str	r3, [sp, #32]
 800fbe6:	f001 f85d 	bl	8010ca4 <__lshift>
 800fbea:	4621      	mov	r1, r4
 800fbec:	4683      	mov	fp, r0
 800fbee:	f001 f8c9 	bl	8010d84 <__mcmp>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	dcb2      	bgt.n	800fb5c <_dtoa_r+0xac4>
 800fbf6:	d102      	bne.n	800fbfe <_dtoa_r+0xb66>
 800fbf8:	9b08      	ldr	r3, [sp, #32]
 800fbfa:	07db      	lsls	r3, r3, #31
 800fbfc:	d4ae      	bmi.n	800fb5c <_dtoa_r+0xac4>
 800fbfe:	463b      	mov	r3, r7
 800fc00:	461f      	mov	r7, r3
 800fc02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc06:	2a30      	cmp	r2, #48	; 0x30
 800fc08:	d0fa      	beq.n	800fc00 <_dtoa_r+0xb68>
 800fc0a:	e6f9      	b.n	800fa00 <_dtoa_r+0x968>
 800fc0c:	9a03      	ldr	r2, [sp, #12]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d1a5      	bne.n	800fb5e <_dtoa_r+0xac6>
 800fc12:	2331      	movs	r3, #49	; 0x31
 800fc14:	f10a 0a01 	add.w	sl, sl, #1
 800fc18:	e779      	b.n	800fb0e <_dtoa_r+0xa76>
 800fc1a:	4b14      	ldr	r3, [pc, #80]	; (800fc6c <_dtoa_r+0xbd4>)
 800fc1c:	f7ff baa8 	b.w	800f170 <_dtoa_r+0xd8>
 800fc20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f47f aa81 	bne.w	800f12a <_dtoa_r+0x92>
 800fc28:	4b11      	ldr	r3, [pc, #68]	; (800fc70 <_dtoa_r+0xbd8>)
 800fc2a:	f7ff baa1 	b.w	800f170 <_dtoa_r+0xd8>
 800fc2e:	f1b9 0f00 	cmp.w	r9, #0
 800fc32:	dc03      	bgt.n	800fc3c <_dtoa_r+0xba4>
 800fc34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	f73f aecb 	bgt.w	800f9d2 <_dtoa_r+0x93a>
 800fc3c:	9f03      	ldr	r7, [sp, #12]
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4658      	mov	r0, fp
 800fc42:	f7ff f99d 	bl	800ef80 <quorem>
 800fc46:	9a03      	ldr	r2, [sp, #12]
 800fc48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fc4c:	f807 3b01 	strb.w	r3, [r7], #1
 800fc50:	1aba      	subs	r2, r7, r2
 800fc52:	4591      	cmp	r9, r2
 800fc54:	ddba      	ble.n	800fbcc <_dtoa_r+0xb34>
 800fc56:	4659      	mov	r1, fp
 800fc58:	2300      	movs	r3, #0
 800fc5a:	220a      	movs	r2, #10
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	f000 fe2b 	bl	80108b8 <__multadd>
 800fc62:	4683      	mov	fp, r0
 800fc64:	e7eb      	b.n	800fc3e <_dtoa_r+0xba6>
 800fc66:	bf00      	nop
 800fc68:	08034348 	.word	0x08034348
 800fc6c:	080341b0 	.word	0x080341b0
 800fc70:	080342e0 	.word	0x080342e0

0800fc74 <__sflush_r>:
 800fc74:	898a      	ldrh	r2, [r1, #12]
 800fc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc78:	4605      	mov	r5, r0
 800fc7a:	0710      	lsls	r0, r2, #28
 800fc7c:	460c      	mov	r4, r1
 800fc7e:	d457      	bmi.n	800fd30 <__sflush_r+0xbc>
 800fc80:	684b      	ldr	r3, [r1, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	dc04      	bgt.n	800fc90 <__sflush_r+0x1c>
 800fc86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dc01      	bgt.n	800fc90 <__sflush_r+0x1c>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc92:	2e00      	cmp	r6, #0
 800fc94:	d0fa      	beq.n	800fc8c <__sflush_r+0x18>
 800fc96:	2300      	movs	r3, #0
 800fc98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc9c:	682f      	ldr	r7, [r5, #0]
 800fc9e:	602b      	str	r3, [r5, #0]
 800fca0:	d032      	beq.n	800fd08 <__sflush_r+0x94>
 800fca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	075a      	lsls	r2, r3, #29
 800fca8:	d505      	bpl.n	800fcb6 <__sflush_r+0x42>
 800fcaa:	6863      	ldr	r3, [r4, #4]
 800fcac:	1ac0      	subs	r0, r0, r3
 800fcae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcb0:	b10b      	cbz	r3, 800fcb6 <__sflush_r+0x42>
 800fcb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcb4:	1ac0      	subs	r0, r0, r3
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	4602      	mov	r2, r0
 800fcba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	6a21      	ldr	r1, [r4, #32]
 800fcc0:	47b0      	blx	r6
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	d106      	bne.n	800fcd6 <__sflush_r+0x62>
 800fcc8:	6829      	ldr	r1, [r5, #0]
 800fcca:	291d      	cmp	r1, #29
 800fccc:	d82c      	bhi.n	800fd28 <__sflush_r+0xb4>
 800fcce:	4a29      	ldr	r2, [pc, #164]	; (800fd74 <__sflush_r+0x100>)
 800fcd0:	40ca      	lsrs	r2, r1
 800fcd2:	07d6      	lsls	r6, r2, #31
 800fcd4:	d528      	bpl.n	800fd28 <__sflush_r+0xb4>
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	6062      	str	r2, [r4, #4]
 800fcda:	6922      	ldr	r2, [r4, #16]
 800fcdc:	04d9      	lsls	r1, r3, #19
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	d504      	bpl.n	800fcec <__sflush_r+0x78>
 800fce2:	1c42      	adds	r2, r0, #1
 800fce4:	d101      	bne.n	800fcea <__sflush_r+0x76>
 800fce6:	682b      	ldr	r3, [r5, #0]
 800fce8:	b903      	cbnz	r3, 800fcec <__sflush_r+0x78>
 800fcea:	6560      	str	r0, [r4, #84]	; 0x54
 800fcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcee:	602f      	str	r7, [r5, #0]
 800fcf0:	2900      	cmp	r1, #0
 800fcf2:	d0cb      	beq.n	800fc8c <__sflush_r+0x18>
 800fcf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcf8:	4299      	cmp	r1, r3
 800fcfa:	d002      	beq.n	800fd02 <__sflush_r+0x8e>
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	f001 fa45 	bl	801118c <_free_r>
 800fd02:	2000      	movs	r0, #0
 800fd04:	6360      	str	r0, [r4, #52]	; 0x34
 800fd06:	e7c2      	b.n	800fc8e <__sflush_r+0x1a>
 800fd08:	6a21      	ldr	r1, [r4, #32]
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	47b0      	blx	r6
 800fd10:	1c41      	adds	r1, r0, #1
 800fd12:	d1c7      	bne.n	800fca4 <__sflush_r+0x30>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0c4      	beq.n	800fca4 <__sflush_r+0x30>
 800fd1a:	2b1d      	cmp	r3, #29
 800fd1c:	d001      	beq.n	800fd22 <__sflush_r+0xae>
 800fd1e:	2b16      	cmp	r3, #22
 800fd20:	d101      	bne.n	800fd26 <__sflush_r+0xb2>
 800fd22:	602f      	str	r7, [r5, #0]
 800fd24:	e7b2      	b.n	800fc8c <__sflush_r+0x18>
 800fd26:	89a3      	ldrh	r3, [r4, #12]
 800fd28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd2c:	81a3      	strh	r3, [r4, #12]
 800fd2e:	e7ae      	b.n	800fc8e <__sflush_r+0x1a>
 800fd30:	690f      	ldr	r7, [r1, #16]
 800fd32:	2f00      	cmp	r7, #0
 800fd34:	d0aa      	beq.n	800fc8c <__sflush_r+0x18>
 800fd36:	0793      	lsls	r3, r2, #30
 800fd38:	bf18      	it	ne
 800fd3a:	2300      	movne	r3, #0
 800fd3c:	680e      	ldr	r6, [r1, #0]
 800fd3e:	bf08      	it	eq
 800fd40:	694b      	ldreq	r3, [r1, #20]
 800fd42:	1bf6      	subs	r6, r6, r7
 800fd44:	600f      	str	r7, [r1, #0]
 800fd46:	608b      	str	r3, [r1, #8]
 800fd48:	2e00      	cmp	r6, #0
 800fd4a:	dd9f      	ble.n	800fc8c <__sflush_r+0x18>
 800fd4c:	4633      	mov	r3, r6
 800fd4e:	463a      	mov	r2, r7
 800fd50:	4628      	mov	r0, r5
 800fd52:	6a21      	ldr	r1, [r4, #32]
 800fd54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800fd58:	47e0      	blx	ip
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	dc06      	bgt.n	800fd6c <__sflush_r+0xf8>
 800fd5e:	89a3      	ldrh	r3, [r4, #12]
 800fd60:	f04f 30ff 	mov.w	r0, #4294967295
 800fd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd68:	81a3      	strh	r3, [r4, #12]
 800fd6a:	e790      	b.n	800fc8e <__sflush_r+0x1a>
 800fd6c:	4407      	add	r7, r0
 800fd6e:	1a36      	subs	r6, r6, r0
 800fd70:	e7ea      	b.n	800fd48 <__sflush_r+0xd4>
 800fd72:	bf00      	nop
 800fd74:	20400001 	.word	0x20400001

0800fd78 <_fflush_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	690b      	ldr	r3, [r1, #16]
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	460c      	mov	r4, r1
 800fd80:	b913      	cbnz	r3, 800fd88 <_fflush_r+0x10>
 800fd82:	2500      	movs	r5, #0
 800fd84:	4628      	mov	r0, r5
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	b118      	cbz	r0, 800fd92 <_fflush_r+0x1a>
 800fd8a:	6983      	ldr	r3, [r0, #24]
 800fd8c:	b90b      	cbnz	r3, 800fd92 <_fflush_r+0x1a>
 800fd8e:	f000 f887 	bl	800fea0 <__sinit>
 800fd92:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <_fflush_r+0x6c>)
 800fd94:	429c      	cmp	r4, r3
 800fd96:	d11b      	bne.n	800fdd0 <_fflush_r+0x58>
 800fd98:	686c      	ldr	r4, [r5, #4]
 800fd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d0ef      	beq.n	800fd82 <_fflush_r+0xa>
 800fda2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fda4:	07d0      	lsls	r0, r2, #31
 800fda6:	d404      	bmi.n	800fdb2 <_fflush_r+0x3a>
 800fda8:	0599      	lsls	r1, r3, #22
 800fdaa:	d402      	bmi.n	800fdb2 <_fflush_r+0x3a>
 800fdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdae:	f000 fc92 	bl	80106d6 <__retarget_lock_acquire_recursive>
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	f7ff ff5d 	bl	800fc74 <__sflush_r>
 800fdba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	07da      	lsls	r2, r3, #31
 800fdc0:	d4e0      	bmi.n	800fd84 <_fflush_r+0xc>
 800fdc2:	89a3      	ldrh	r3, [r4, #12]
 800fdc4:	059b      	lsls	r3, r3, #22
 800fdc6:	d4dd      	bmi.n	800fd84 <_fflush_r+0xc>
 800fdc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdca:	f000 fc85 	bl	80106d8 <__retarget_lock_release_recursive>
 800fdce:	e7d9      	b.n	800fd84 <_fflush_r+0xc>
 800fdd0:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <_fflush_r+0x70>)
 800fdd2:	429c      	cmp	r4, r3
 800fdd4:	d101      	bne.n	800fdda <_fflush_r+0x62>
 800fdd6:	68ac      	ldr	r4, [r5, #8]
 800fdd8:	e7df      	b.n	800fd9a <_fflush_r+0x22>
 800fdda:	4b04      	ldr	r3, [pc, #16]	; (800fdec <_fflush_r+0x74>)
 800fddc:	429c      	cmp	r4, r3
 800fdde:	bf08      	it	eq
 800fde0:	68ec      	ldreq	r4, [r5, #12]
 800fde2:	e7da      	b.n	800fd9a <_fflush_r+0x22>
 800fde4:	0803437c 	.word	0x0803437c
 800fde8:	0803439c 	.word	0x0803439c
 800fdec:	0803435c 	.word	0x0803435c

0800fdf0 <std>:
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdfe:	6083      	str	r3, [r0, #8]
 800fe00:	8181      	strh	r1, [r0, #12]
 800fe02:	6643      	str	r3, [r0, #100]	; 0x64
 800fe04:	81c2      	strh	r2, [r0, #14]
 800fe06:	6183      	str	r3, [r0, #24]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	2208      	movs	r2, #8
 800fe0c:	305c      	adds	r0, #92	; 0x5c
 800fe0e:	f7fd f98b 	bl	800d128 <memset>
 800fe12:	4b05      	ldr	r3, [pc, #20]	; (800fe28 <std+0x38>)
 800fe14:	6224      	str	r4, [r4, #32]
 800fe16:	6263      	str	r3, [r4, #36]	; 0x24
 800fe18:	4b04      	ldr	r3, [pc, #16]	; (800fe2c <std+0x3c>)
 800fe1a:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe1c:	4b04      	ldr	r3, [pc, #16]	; (800fe30 <std+0x40>)
 800fe1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe20:	4b04      	ldr	r3, [pc, #16]	; (800fe34 <std+0x44>)
 800fe22:	6323      	str	r3, [r4, #48]	; 0x30
 800fe24:	bd10      	pop	{r4, pc}
 800fe26:	bf00      	nop
 800fe28:	08011969 	.word	0x08011969
 800fe2c:	0801198b 	.word	0x0801198b
 800fe30:	080119c3 	.word	0x080119c3
 800fe34:	080119e7 	.word	0x080119e7

0800fe38 <_cleanup_r>:
 800fe38:	4901      	ldr	r1, [pc, #4]	; (800fe40 <_cleanup_r+0x8>)
 800fe3a:	f000 b8c1 	b.w	800ffc0 <_fwalk_reent>
 800fe3e:	bf00      	nop
 800fe40:	0800fd79 	.word	0x0800fd79

0800fe44 <__sfmoreglue>:
 800fe44:	2268      	movs	r2, #104	; 0x68
 800fe46:	b570      	push	{r4, r5, r6, lr}
 800fe48:	1e4d      	subs	r5, r1, #1
 800fe4a:	4355      	muls	r5, r2
 800fe4c:	460e      	mov	r6, r1
 800fe4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe52:	f001 fa03 	bl	801125c <_malloc_r>
 800fe56:	4604      	mov	r4, r0
 800fe58:	b140      	cbz	r0, 800fe6c <__sfmoreglue+0x28>
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	e9c0 1600 	strd	r1, r6, [r0]
 800fe60:	300c      	adds	r0, #12
 800fe62:	60a0      	str	r0, [r4, #8]
 800fe64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe68:	f7fd f95e 	bl	800d128 <memset>
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}

0800fe70 <__sfp_lock_acquire>:
 800fe70:	4801      	ldr	r0, [pc, #4]	; (800fe78 <__sfp_lock_acquire+0x8>)
 800fe72:	f000 bc30 	b.w	80106d6 <__retarget_lock_acquire_recursive>
 800fe76:	bf00      	nop
 800fe78:	200045cd 	.word	0x200045cd

0800fe7c <__sfp_lock_release>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	; (800fe84 <__sfp_lock_release+0x8>)
 800fe7e:	f000 bc2b 	b.w	80106d8 <__retarget_lock_release_recursive>
 800fe82:	bf00      	nop
 800fe84:	200045cd 	.word	0x200045cd

0800fe88 <__sinit_lock_acquire>:
 800fe88:	4801      	ldr	r0, [pc, #4]	; (800fe90 <__sinit_lock_acquire+0x8>)
 800fe8a:	f000 bc24 	b.w	80106d6 <__retarget_lock_acquire_recursive>
 800fe8e:	bf00      	nop
 800fe90:	200045ce 	.word	0x200045ce

0800fe94 <__sinit_lock_release>:
 800fe94:	4801      	ldr	r0, [pc, #4]	; (800fe9c <__sinit_lock_release+0x8>)
 800fe96:	f000 bc1f 	b.w	80106d8 <__retarget_lock_release_recursive>
 800fe9a:	bf00      	nop
 800fe9c:	200045ce 	.word	0x200045ce

0800fea0 <__sinit>:
 800fea0:	b510      	push	{r4, lr}
 800fea2:	4604      	mov	r4, r0
 800fea4:	f7ff fff0 	bl	800fe88 <__sinit_lock_acquire>
 800fea8:	69a3      	ldr	r3, [r4, #24]
 800feaa:	b11b      	cbz	r3, 800feb4 <__sinit+0x14>
 800feac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb0:	f7ff bff0 	b.w	800fe94 <__sinit_lock_release>
 800feb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800feb8:	6523      	str	r3, [r4, #80]	; 0x50
 800feba:	4b13      	ldr	r3, [pc, #76]	; (800ff08 <__sinit+0x68>)
 800febc:	4a13      	ldr	r2, [pc, #76]	; (800ff0c <__sinit+0x6c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fec2:	42a3      	cmp	r3, r4
 800fec4:	bf08      	it	eq
 800fec6:	2301      	moveq	r3, #1
 800fec8:	4620      	mov	r0, r4
 800feca:	bf08      	it	eq
 800fecc:	61a3      	streq	r3, [r4, #24]
 800fece:	f000 f81f 	bl	800ff10 <__sfp>
 800fed2:	6060      	str	r0, [r4, #4]
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 f81b 	bl	800ff10 <__sfp>
 800feda:	60a0      	str	r0, [r4, #8]
 800fedc:	4620      	mov	r0, r4
 800fede:	f000 f817 	bl	800ff10 <__sfp>
 800fee2:	2200      	movs	r2, #0
 800fee4:	2104      	movs	r1, #4
 800fee6:	60e0      	str	r0, [r4, #12]
 800fee8:	6860      	ldr	r0, [r4, #4]
 800feea:	f7ff ff81 	bl	800fdf0 <std>
 800feee:	2201      	movs	r2, #1
 800fef0:	2109      	movs	r1, #9
 800fef2:	68a0      	ldr	r0, [r4, #8]
 800fef4:	f7ff ff7c 	bl	800fdf0 <std>
 800fef8:	2202      	movs	r2, #2
 800fefa:	2112      	movs	r1, #18
 800fefc:	68e0      	ldr	r0, [r4, #12]
 800fefe:	f7ff ff77 	bl	800fdf0 <std>
 800ff02:	2301      	movs	r3, #1
 800ff04:	61a3      	str	r3, [r4, #24]
 800ff06:	e7d1      	b.n	800feac <__sinit+0xc>
 800ff08:	0803419c 	.word	0x0803419c
 800ff0c:	0800fe39 	.word	0x0800fe39

0800ff10 <__sfp>:
 800ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff12:	4607      	mov	r7, r0
 800ff14:	f7ff ffac 	bl	800fe70 <__sfp_lock_acquire>
 800ff18:	4b1e      	ldr	r3, [pc, #120]	; (800ff94 <__sfp+0x84>)
 800ff1a:	681e      	ldr	r6, [r3, #0]
 800ff1c:	69b3      	ldr	r3, [r6, #24]
 800ff1e:	b913      	cbnz	r3, 800ff26 <__sfp+0x16>
 800ff20:	4630      	mov	r0, r6
 800ff22:	f7ff ffbd 	bl	800fea0 <__sinit>
 800ff26:	3648      	adds	r6, #72	; 0x48
 800ff28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	d503      	bpl.n	800ff38 <__sfp+0x28>
 800ff30:	6833      	ldr	r3, [r6, #0]
 800ff32:	b30b      	cbz	r3, 800ff78 <__sfp+0x68>
 800ff34:	6836      	ldr	r6, [r6, #0]
 800ff36:	e7f7      	b.n	800ff28 <__sfp+0x18>
 800ff38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff3c:	b9d5      	cbnz	r5, 800ff74 <__sfp+0x64>
 800ff3e:	4b16      	ldr	r3, [pc, #88]	; (800ff98 <__sfp+0x88>)
 800ff40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff44:	60e3      	str	r3, [r4, #12]
 800ff46:	6665      	str	r5, [r4, #100]	; 0x64
 800ff48:	f000 fbc4 	bl	80106d4 <__retarget_lock_init_recursive>
 800ff4c:	f7ff ff96 	bl	800fe7c <__sfp_lock_release>
 800ff50:	2208      	movs	r2, #8
 800ff52:	4629      	mov	r1, r5
 800ff54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff5c:	6025      	str	r5, [r4, #0]
 800ff5e:	61a5      	str	r5, [r4, #24]
 800ff60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff64:	f7fd f8e0 	bl	800d128 <memset>
 800ff68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff70:	4620      	mov	r0, r4
 800ff72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff74:	3468      	adds	r4, #104	; 0x68
 800ff76:	e7d9      	b.n	800ff2c <__sfp+0x1c>
 800ff78:	2104      	movs	r1, #4
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f7ff ff62 	bl	800fe44 <__sfmoreglue>
 800ff80:	4604      	mov	r4, r0
 800ff82:	6030      	str	r0, [r6, #0]
 800ff84:	2800      	cmp	r0, #0
 800ff86:	d1d5      	bne.n	800ff34 <__sfp+0x24>
 800ff88:	f7ff ff78 	bl	800fe7c <__sfp_lock_release>
 800ff8c:	230c      	movs	r3, #12
 800ff8e:	603b      	str	r3, [r7, #0]
 800ff90:	e7ee      	b.n	800ff70 <__sfp+0x60>
 800ff92:	bf00      	nop
 800ff94:	0803419c 	.word	0x0803419c
 800ff98:	ffff0001 	.word	0xffff0001

0800ff9c <fiprintf>:
 800ff9c:	b40e      	push	{r1, r2, r3}
 800ff9e:	b503      	push	{r0, r1, lr}
 800ffa0:	4601      	mov	r1, r0
 800ffa2:	ab03      	add	r3, sp, #12
 800ffa4:	4805      	ldr	r0, [pc, #20]	; (800ffbc <fiprintf+0x20>)
 800ffa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffaa:	6800      	ldr	r0, [r0, #0]
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	f001 fb4d 	bl	801164c <_vfiprintf_r>
 800ffb2:	b002      	add	sp, #8
 800ffb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffb8:	b003      	add	sp, #12
 800ffba:	4770      	bx	lr
 800ffbc:	20000054 	.word	0x20000054

0800ffc0 <_fwalk_reent>:
 800ffc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffc4:	4606      	mov	r6, r0
 800ffc6:	4688      	mov	r8, r1
 800ffc8:	2700      	movs	r7, #0
 800ffca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffd2:	f1b9 0901 	subs.w	r9, r9, #1
 800ffd6:	d505      	bpl.n	800ffe4 <_fwalk_reent+0x24>
 800ffd8:	6824      	ldr	r4, [r4, #0]
 800ffda:	2c00      	cmp	r4, #0
 800ffdc:	d1f7      	bne.n	800ffce <_fwalk_reent+0xe>
 800ffde:	4638      	mov	r0, r7
 800ffe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffe4:	89ab      	ldrh	r3, [r5, #12]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d907      	bls.n	800fffa <_fwalk_reent+0x3a>
 800ffea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffee:	3301      	adds	r3, #1
 800fff0:	d003      	beq.n	800fffa <_fwalk_reent+0x3a>
 800fff2:	4629      	mov	r1, r5
 800fff4:	4630      	mov	r0, r6
 800fff6:	47c0      	blx	r8
 800fff8:	4307      	orrs	r7, r0
 800fffa:	3568      	adds	r5, #104	; 0x68
 800fffc:	e7e9      	b.n	800ffd2 <_fwalk_reent+0x12>

0800fffe <rshift>:
 800fffe:	6903      	ldr	r3, [r0, #16]
 8010000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010004:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010008:	f100 0414 	add.w	r4, r0, #20
 801000c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010010:	dd46      	ble.n	80100a0 <rshift+0xa2>
 8010012:	f011 011f 	ands.w	r1, r1, #31
 8010016:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801001a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801001e:	d10c      	bne.n	801003a <rshift+0x3c>
 8010020:	4629      	mov	r1, r5
 8010022:	f100 0710 	add.w	r7, r0, #16
 8010026:	42b1      	cmp	r1, r6
 8010028:	d335      	bcc.n	8010096 <rshift+0x98>
 801002a:	1a9b      	subs	r3, r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	1eea      	subs	r2, r5, #3
 8010030:	4296      	cmp	r6, r2
 8010032:	bf38      	it	cc
 8010034:	2300      	movcc	r3, #0
 8010036:	4423      	add	r3, r4
 8010038:	e015      	b.n	8010066 <rshift+0x68>
 801003a:	46a1      	mov	r9, r4
 801003c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010040:	f1c1 0820 	rsb	r8, r1, #32
 8010044:	40cf      	lsrs	r7, r1
 8010046:	f105 0e04 	add.w	lr, r5, #4
 801004a:	4576      	cmp	r6, lr
 801004c:	46f4      	mov	ip, lr
 801004e:	d816      	bhi.n	801007e <rshift+0x80>
 8010050:	1a9a      	subs	r2, r3, r2
 8010052:	0092      	lsls	r2, r2, #2
 8010054:	3a04      	subs	r2, #4
 8010056:	3501      	adds	r5, #1
 8010058:	42ae      	cmp	r6, r5
 801005a:	bf38      	it	cc
 801005c:	2200      	movcc	r2, #0
 801005e:	18a3      	adds	r3, r4, r2
 8010060:	50a7      	str	r7, [r4, r2]
 8010062:	b107      	cbz	r7, 8010066 <rshift+0x68>
 8010064:	3304      	adds	r3, #4
 8010066:	42a3      	cmp	r3, r4
 8010068:	eba3 0204 	sub.w	r2, r3, r4
 801006c:	bf08      	it	eq
 801006e:	2300      	moveq	r3, #0
 8010070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010074:	6102      	str	r2, [r0, #16]
 8010076:	bf08      	it	eq
 8010078:	6143      	streq	r3, [r0, #20]
 801007a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801007e:	f8dc c000 	ldr.w	ip, [ip]
 8010082:	fa0c fc08 	lsl.w	ip, ip, r8
 8010086:	ea4c 0707 	orr.w	r7, ip, r7
 801008a:	f849 7b04 	str.w	r7, [r9], #4
 801008e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010092:	40cf      	lsrs	r7, r1
 8010094:	e7d9      	b.n	801004a <rshift+0x4c>
 8010096:	f851 cb04 	ldr.w	ip, [r1], #4
 801009a:	f847 cf04 	str.w	ip, [r7, #4]!
 801009e:	e7c2      	b.n	8010026 <rshift+0x28>
 80100a0:	4623      	mov	r3, r4
 80100a2:	e7e0      	b.n	8010066 <rshift+0x68>

080100a4 <__hexdig_fun>:
 80100a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80100a8:	2b09      	cmp	r3, #9
 80100aa:	d802      	bhi.n	80100b2 <__hexdig_fun+0xe>
 80100ac:	3820      	subs	r0, #32
 80100ae:	b2c0      	uxtb	r0, r0
 80100b0:	4770      	bx	lr
 80100b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80100b6:	2b05      	cmp	r3, #5
 80100b8:	d801      	bhi.n	80100be <__hexdig_fun+0x1a>
 80100ba:	3847      	subs	r0, #71	; 0x47
 80100bc:	e7f7      	b.n	80100ae <__hexdig_fun+0xa>
 80100be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80100c2:	2b05      	cmp	r3, #5
 80100c4:	d801      	bhi.n	80100ca <__hexdig_fun+0x26>
 80100c6:	3827      	subs	r0, #39	; 0x27
 80100c8:	e7f1      	b.n	80100ae <__hexdig_fun+0xa>
 80100ca:	2000      	movs	r0, #0
 80100cc:	4770      	bx	lr
	...

080100d0 <__gethex>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	b08b      	sub	sp, #44	; 0x2c
 80100d6:	9305      	str	r3, [sp, #20]
 80100d8:	4bb2      	ldr	r3, [pc, #712]	; (80103a4 <__gethex+0x2d4>)
 80100da:	9002      	str	r0, [sp, #8]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	468b      	mov	fp, r1
 80100e0:	4618      	mov	r0, r3
 80100e2:	4690      	mov	r8, r2
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	f7f0 f89f 	bl	8000228 <strlen>
 80100ea:	4682      	mov	sl, r0
 80100ec:	9b03      	ldr	r3, [sp, #12]
 80100ee:	f8db 2000 	ldr.w	r2, [fp]
 80100f2:	4403      	add	r3, r0
 80100f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80100f8:	9306      	str	r3, [sp, #24]
 80100fa:	1c93      	adds	r3, r2, #2
 80100fc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010100:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010104:	32fe      	adds	r2, #254	; 0xfe
 8010106:	18d1      	adds	r1, r2, r3
 8010108:	461f      	mov	r7, r3
 801010a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801010e:	9101      	str	r1, [sp, #4]
 8010110:	2830      	cmp	r0, #48	; 0x30
 8010112:	d0f8      	beq.n	8010106 <__gethex+0x36>
 8010114:	f7ff ffc6 	bl	80100a4 <__hexdig_fun>
 8010118:	4604      	mov	r4, r0
 801011a:	2800      	cmp	r0, #0
 801011c:	d13a      	bne.n	8010194 <__gethex+0xc4>
 801011e:	4652      	mov	r2, sl
 8010120:	4638      	mov	r0, r7
 8010122:	9903      	ldr	r1, [sp, #12]
 8010124:	f7fd ff44 	bl	800dfb0 <strncmp>
 8010128:	4605      	mov	r5, r0
 801012a:	2800      	cmp	r0, #0
 801012c:	d166      	bne.n	80101fc <__gethex+0x12c>
 801012e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010132:	eb07 060a 	add.w	r6, r7, sl
 8010136:	f7ff ffb5 	bl	80100a4 <__hexdig_fun>
 801013a:	2800      	cmp	r0, #0
 801013c:	d060      	beq.n	8010200 <__gethex+0x130>
 801013e:	4633      	mov	r3, r6
 8010140:	7818      	ldrb	r0, [r3, #0]
 8010142:	461f      	mov	r7, r3
 8010144:	2830      	cmp	r0, #48	; 0x30
 8010146:	f103 0301 	add.w	r3, r3, #1
 801014a:	d0f9      	beq.n	8010140 <__gethex+0x70>
 801014c:	f7ff ffaa 	bl	80100a4 <__hexdig_fun>
 8010150:	2301      	movs	r3, #1
 8010152:	fab0 f480 	clz	r4, r0
 8010156:	4635      	mov	r5, r6
 8010158:	0964      	lsrs	r4, r4, #5
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	463a      	mov	r2, r7
 801015e:	4616      	mov	r6, r2
 8010160:	7830      	ldrb	r0, [r6, #0]
 8010162:	3201      	adds	r2, #1
 8010164:	f7ff ff9e 	bl	80100a4 <__hexdig_fun>
 8010168:	2800      	cmp	r0, #0
 801016a:	d1f8      	bne.n	801015e <__gethex+0x8e>
 801016c:	4652      	mov	r2, sl
 801016e:	4630      	mov	r0, r6
 8010170:	9903      	ldr	r1, [sp, #12]
 8010172:	f7fd ff1d 	bl	800dfb0 <strncmp>
 8010176:	b980      	cbnz	r0, 801019a <__gethex+0xca>
 8010178:	b94d      	cbnz	r5, 801018e <__gethex+0xbe>
 801017a:	eb06 050a 	add.w	r5, r6, sl
 801017e:	462a      	mov	r2, r5
 8010180:	4616      	mov	r6, r2
 8010182:	7830      	ldrb	r0, [r6, #0]
 8010184:	3201      	adds	r2, #1
 8010186:	f7ff ff8d 	bl	80100a4 <__hexdig_fun>
 801018a:	2800      	cmp	r0, #0
 801018c:	d1f8      	bne.n	8010180 <__gethex+0xb0>
 801018e:	1bad      	subs	r5, r5, r6
 8010190:	00ad      	lsls	r5, r5, #2
 8010192:	e004      	b.n	801019e <__gethex+0xce>
 8010194:	2400      	movs	r4, #0
 8010196:	4625      	mov	r5, r4
 8010198:	e7e0      	b.n	801015c <__gethex+0x8c>
 801019a:	2d00      	cmp	r5, #0
 801019c:	d1f7      	bne.n	801018e <__gethex+0xbe>
 801019e:	7833      	ldrb	r3, [r6, #0]
 80101a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80101a4:	2b50      	cmp	r3, #80	; 0x50
 80101a6:	d139      	bne.n	801021c <__gethex+0x14c>
 80101a8:	7873      	ldrb	r3, [r6, #1]
 80101aa:	2b2b      	cmp	r3, #43	; 0x2b
 80101ac:	d02a      	beq.n	8010204 <__gethex+0x134>
 80101ae:	2b2d      	cmp	r3, #45	; 0x2d
 80101b0:	d02c      	beq.n	801020c <__gethex+0x13c>
 80101b2:	f04f 0900 	mov.w	r9, #0
 80101b6:	1c71      	adds	r1, r6, #1
 80101b8:	7808      	ldrb	r0, [r1, #0]
 80101ba:	f7ff ff73 	bl	80100a4 <__hexdig_fun>
 80101be:	1e43      	subs	r3, r0, #1
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b18      	cmp	r3, #24
 80101c4:	d82a      	bhi.n	801021c <__gethex+0x14c>
 80101c6:	f1a0 0210 	sub.w	r2, r0, #16
 80101ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80101ce:	f7ff ff69 	bl	80100a4 <__hexdig_fun>
 80101d2:	1e43      	subs	r3, r0, #1
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	2b18      	cmp	r3, #24
 80101d8:	d91b      	bls.n	8010212 <__gethex+0x142>
 80101da:	f1b9 0f00 	cmp.w	r9, #0
 80101de:	d000      	beq.n	80101e2 <__gethex+0x112>
 80101e0:	4252      	negs	r2, r2
 80101e2:	4415      	add	r5, r2
 80101e4:	f8cb 1000 	str.w	r1, [fp]
 80101e8:	b1d4      	cbz	r4, 8010220 <__gethex+0x150>
 80101ea:	9b01      	ldr	r3, [sp, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	bf14      	ite	ne
 80101f0:	2700      	movne	r7, #0
 80101f2:	2706      	moveq	r7, #6
 80101f4:	4638      	mov	r0, r7
 80101f6:	b00b      	add	sp, #44	; 0x2c
 80101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101fc:	463e      	mov	r6, r7
 80101fe:	4625      	mov	r5, r4
 8010200:	2401      	movs	r4, #1
 8010202:	e7cc      	b.n	801019e <__gethex+0xce>
 8010204:	f04f 0900 	mov.w	r9, #0
 8010208:	1cb1      	adds	r1, r6, #2
 801020a:	e7d5      	b.n	80101b8 <__gethex+0xe8>
 801020c:	f04f 0901 	mov.w	r9, #1
 8010210:	e7fa      	b.n	8010208 <__gethex+0x138>
 8010212:	230a      	movs	r3, #10
 8010214:	fb03 0202 	mla	r2, r3, r2, r0
 8010218:	3a10      	subs	r2, #16
 801021a:	e7d6      	b.n	80101ca <__gethex+0xfa>
 801021c:	4631      	mov	r1, r6
 801021e:	e7e1      	b.n	80101e4 <__gethex+0x114>
 8010220:	4621      	mov	r1, r4
 8010222:	1bf3      	subs	r3, r6, r7
 8010224:	3b01      	subs	r3, #1
 8010226:	2b07      	cmp	r3, #7
 8010228:	dc0a      	bgt.n	8010240 <__gethex+0x170>
 801022a:	9802      	ldr	r0, [sp, #8]
 801022c:	f000 fae2 	bl	80107f4 <_Balloc>
 8010230:	4604      	mov	r4, r0
 8010232:	b940      	cbnz	r0, 8010246 <__gethex+0x176>
 8010234:	4602      	mov	r2, r0
 8010236:	21de      	movs	r1, #222	; 0xde
 8010238:	4b5b      	ldr	r3, [pc, #364]	; (80103a8 <__gethex+0x2d8>)
 801023a:	485c      	ldr	r0, [pc, #368]	; (80103ac <__gethex+0x2dc>)
 801023c:	f7fe fe82 	bl	800ef44 <__assert_func>
 8010240:	3101      	adds	r1, #1
 8010242:	105b      	asrs	r3, r3, #1
 8010244:	e7ef      	b.n	8010226 <__gethex+0x156>
 8010246:	f04f 0b00 	mov.w	fp, #0
 801024a:	f100 0914 	add.w	r9, r0, #20
 801024e:	f1ca 0301 	rsb	r3, sl, #1
 8010252:	f8cd 9010 	str.w	r9, [sp, #16]
 8010256:	f8cd b004 	str.w	fp, [sp, #4]
 801025a:	9308      	str	r3, [sp, #32]
 801025c:	42b7      	cmp	r7, r6
 801025e:	d33f      	bcc.n	80102e0 <__gethex+0x210>
 8010260:	9f04      	ldr	r7, [sp, #16]
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	f847 3b04 	str.w	r3, [r7], #4
 8010268:	eba7 0709 	sub.w	r7, r7, r9
 801026c:	10bf      	asrs	r7, r7, #2
 801026e:	6127      	str	r7, [r4, #16]
 8010270:	4618      	mov	r0, r3
 8010272:	f000 fbb1 	bl	80109d8 <__hi0bits>
 8010276:	017f      	lsls	r7, r7, #5
 8010278:	f8d8 6000 	ldr.w	r6, [r8]
 801027c:	1a3f      	subs	r7, r7, r0
 801027e:	42b7      	cmp	r7, r6
 8010280:	dd62      	ble.n	8010348 <__gethex+0x278>
 8010282:	1bbf      	subs	r7, r7, r6
 8010284:	4639      	mov	r1, r7
 8010286:	4620      	mov	r0, r4
 8010288:	f000 ff4b 	bl	8011122 <__any_on>
 801028c:	4682      	mov	sl, r0
 801028e:	b1a8      	cbz	r0, 80102bc <__gethex+0x1ec>
 8010290:	f04f 0a01 	mov.w	sl, #1
 8010294:	1e7b      	subs	r3, r7, #1
 8010296:	1159      	asrs	r1, r3, #5
 8010298:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801029c:	f003 021f 	and.w	r2, r3, #31
 80102a0:	fa0a f202 	lsl.w	r2, sl, r2
 80102a4:	420a      	tst	r2, r1
 80102a6:	d009      	beq.n	80102bc <__gethex+0x1ec>
 80102a8:	4553      	cmp	r3, sl
 80102aa:	dd05      	ble.n	80102b8 <__gethex+0x1e8>
 80102ac:	4620      	mov	r0, r4
 80102ae:	1eb9      	subs	r1, r7, #2
 80102b0:	f000 ff37 	bl	8011122 <__any_on>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d144      	bne.n	8010342 <__gethex+0x272>
 80102b8:	f04f 0a02 	mov.w	sl, #2
 80102bc:	4639      	mov	r1, r7
 80102be:	4620      	mov	r0, r4
 80102c0:	f7ff fe9d 	bl	800fffe <rshift>
 80102c4:	443d      	add	r5, r7
 80102c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102ca:	42ab      	cmp	r3, r5
 80102cc:	da4a      	bge.n	8010364 <__gethex+0x294>
 80102ce:	4621      	mov	r1, r4
 80102d0:	9802      	ldr	r0, [sp, #8]
 80102d2:	f000 facf 	bl	8010874 <_Bfree>
 80102d6:	2300      	movs	r3, #0
 80102d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102da:	27a3      	movs	r7, #163	; 0xa3
 80102dc:	6013      	str	r3, [r2, #0]
 80102de:	e789      	b.n	80101f4 <__gethex+0x124>
 80102e0:	1e73      	subs	r3, r6, #1
 80102e2:	9a06      	ldr	r2, [sp, #24]
 80102e4:	9307      	str	r3, [sp, #28]
 80102e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d019      	beq.n	8010322 <__gethex+0x252>
 80102ee:	f1bb 0f20 	cmp.w	fp, #32
 80102f2:	d107      	bne.n	8010304 <__gethex+0x234>
 80102f4:	9b04      	ldr	r3, [sp, #16]
 80102f6:	9a01      	ldr	r2, [sp, #4]
 80102f8:	f843 2b04 	str.w	r2, [r3], #4
 80102fc:	9304      	str	r3, [sp, #16]
 80102fe:	2300      	movs	r3, #0
 8010300:	469b      	mov	fp, r3
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010308:	f7ff fecc 	bl	80100a4 <__hexdig_fun>
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	f000 000f 	and.w	r0, r0, #15
 8010312:	fa00 f00b 	lsl.w	r0, r0, fp
 8010316:	4303      	orrs	r3, r0
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	f10b 0b04 	add.w	fp, fp, #4
 801031e:	9b07      	ldr	r3, [sp, #28]
 8010320:	e00d      	b.n	801033e <__gethex+0x26e>
 8010322:	9a08      	ldr	r2, [sp, #32]
 8010324:	1e73      	subs	r3, r6, #1
 8010326:	4413      	add	r3, r2
 8010328:	42bb      	cmp	r3, r7
 801032a:	d3e0      	bcc.n	80102ee <__gethex+0x21e>
 801032c:	4618      	mov	r0, r3
 801032e:	4652      	mov	r2, sl
 8010330:	9903      	ldr	r1, [sp, #12]
 8010332:	9309      	str	r3, [sp, #36]	; 0x24
 8010334:	f7fd fe3c 	bl	800dfb0 <strncmp>
 8010338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801033a:	2800      	cmp	r0, #0
 801033c:	d1d7      	bne.n	80102ee <__gethex+0x21e>
 801033e:	461e      	mov	r6, r3
 8010340:	e78c      	b.n	801025c <__gethex+0x18c>
 8010342:	f04f 0a03 	mov.w	sl, #3
 8010346:	e7b9      	b.n	80102bc <__gethex+0x1ec>
 8010348:	da09      	bge.n	801035e <__gethex+0x28e>
 801034a:	1bf7      	subs	r7, r6, r7
 801034c:	4621      	mov	r1, r4
 801034e:	463a      	mov	r2, r7
 8010350:	9802      	ldr	r0, [sp, #8]
 8010352:	f000 fca7 	bl	8010ca4 <__lshift>
 8010356:	4604      	mov	r4, r0
 8010358:	1bed      	subs	r5, r5, r7
 801035a:	f100 0914 	add.w	r9, r0, #20
 801035e:	f04f 0a00 	mov.w	sl, #0
 8010362:	e7b0      	b.n	80102c6 <__gethex+0x1f6>
 8010364:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010368:	42a8      	cmp	r0, r5
 801036a:	dd72      	ble.n	8010452 <__gethex+0x382>
 801036c:	1b45      	subs	r5, r0, r5
 801036e:	42ae      	cmp	r6, r5
 8010370:	dc35      	bgt.n	80103de <__gethex+0x30e>
 8010372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010376:	2b02      	cmp	r3, #2
 8010378:	d029      	beq.n	80103ce <__gethex+0x2fe>
 801037a:	2b03      	cmp	r3, #3
 801037c:	d02b      	beq.n	80103d6 <__gethex+0x306>
 801037e:	2b01      	cmp	r3, #1
 8010380:	d11c      	bne.n	80103bc <__gethex+0x2ec>
 8010382:	42ae      	cmp	r6, r5
 8010384:	d11a      	bne.n	80103bc <__gethex+0x2ec>
 8010386:	2e01      	cmp	r6, #1
 8010388:	d112      	bne.n	80103b0 <__gethex+0x2e0>
 801038a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801038e:	9a05      	ldr	r2, [sp, #20]
 8010390:	2762      	movs	r7, #98	; 0x62
 8010392:	6013      	str	r3, [r2, #0]
 8010394:	2301      	movs	r3, #1
 8010396:	6123      	str	r3, [r4, #16]
 8010398:	f8c9 3000 	str.w	r3, [r9]
 801039c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801039e:	601c      	str	r4, [r3, #0]
 80103a0:	e728      	b.n	80101f4 <__gethex+0x124>
 80103a2:	bf00      	nop
 80103a4:	08034424 	.word	0x08034424
 80103a8:	08034348 	.word	0x08034348
 80103ac:	080343bc 	.word	0x080343bc
 80103b0:	4620      	mov	r0, r4
 80103b2:	1e71      	subs	r1, r6, #1
 80103b4:	f000 feb5 	bl	8011122 <__any_on>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d1e6      	bne.n	801038a <__gethex+0x2ba>
 80103bc:	4621      	mov	r1, r4
 80103be:	9802      	ldr	r0, [sp, #8]
 80103c0:	f000 fa58 	bl	8010874 <_Bfree>
 80103c4:	2300      	movs	r3, #0
 80103c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103c8:	2750      	movs	r7, #80	; 0x50
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	e712      	b.n	80101f4 <__gethex+0x124>
 80103ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1f3      	bne.n	80103bc <__gethex+0x2ec>
 80103d4:	e7d9      	b.n	801038a <__gethex+0x2ba>
 80103d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d1d6      	bne.n	801038a <__gethex+0x2ba>
 80103dc:	e7ee      	b.n	80103bc <__gethex+0x2ec>
 80103de:	1e6f      	subs	r7, r5, #1
 80103e0:	f1ba 0f00 	cmp.w	sl, #0
 80103e4:	d132      	bne.n	801044c <__gethex+0x37c>
 80103e6:	b127      	cbz	r7, 80103f2 <__gethex+0x322>
 80103e8:	4639      	mov	r1, r7
 80103ea:	4620      	mov	r0, r4
 80103ec:	f000 fe99 	bl	8011122 <__any_on>
 80103f0:	4682      	mov	sl, r0
 80103f2:	2101      	movs	r1, #1
 80103f4:	117b      	asrs	r3, r7, #5
 80103f6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80103fa:	f007 071f 	and.w	r7, r7, #31
 80103fe:	fa01 f707 	lsl.w	r7, r1, r7
 8010402:	421f      	tst	r7, r3
 8010404:	f04f 0702 	mov.w	r7, #2
 8010408:	4629      	mov	r1, r5
 801040a:	4620      	mov	r0, r4
 801040c:	bf18      	it	ne
 801040e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010412:	1b76      	subs	r6, r6, r5
 8010414:	f7ff fdf3 	bl	800fffe <rshift>
 8010418:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801041c:	f1ba 0f00 	cmp.w	sl, #0
 8010420:	d048      	beq.n	80104b4 <__gethex+0x3e4>
 8010422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010426:	2b02      	cmp	r3, #2
 8010428:	d015      	beq.n	8010456 <__gethex+0x386>
 801042a:	2b03      	cmp	r3, #3
 801042c:	d017      	beq.n	801045e <__gethex+0x38e>
 801042e:	2b01      	cmp	r3, #1
 8010430:	d109      	bne.n	8010446 <__gethex+0x376>
 8010432:	f01a 0f02 	tst.w	sl, #2
 8010436:	d006      	beq.n	8010446 <__gethex+0x376>
 8010438:	f8d9 0000 	ldr.w	r0, [r9]
 801043c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010440:	f01a 0f01 	tst.w	sl, #1
 8010444:	d10e      	bne.n	8010464 <__gethex+0x394>
 8010446:	f047 0710 	orr.w	r7, r7, #16
 801044a:	e033      	b.n	80104b4 <__gethex+0x3e4>
 801044c:	f04f 0a01 	mov.w	sl, #1
 8010450:	e7cf      	b.n	80103f2 <__gethex+0x322>
 8010452:	2701      	movs	r7, #1
 8010454:	e7e2      	b.n	801041c <__gethex+0x34c>
 8010456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010458:	f1c3 0301 	rsb	r3, r3, #1
 801045c:	9315      	str	r3, [sp, #84]	; 0x54
 801045e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010460:	2b00      	cmp	r3, #0
 8010462:	d0f0      	beq.n	8010446 <__gethex+0x376>
 8010464:	f04f 0c00 	mov.w	ip, #0
 8010468:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801046c:	f104 0314 	add.w	r3, r4, #20
 8010470:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010474:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010478:	4618      	mov	r0, r3
 801047a:	f853 2b04 	ldr.w	r2, [r3], #4
 801047e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010482:	d01c      	beq.n	80104be <__gethex+0x3ee>
 8010484:	3201      	adds	r2, #1
 8010486:	6002      	str	r2, [r0, #0]
 8010488:	2f02      	cmp	r7, #2
 801048a:	f104 0314 	add.w	r3, r4, #20
 801048e:	d13d      	bne.n	801050c <__gethex+0x43c>
 8010490:	f8d8 2000 	ldr.w	r2, [r8]
 8010494:	3a01      	subs	r2, #1
 8010496:	42b2      	cmp	r2, r6
 8010498:	d10a      	bne.n	80104b0 <__gethex+0x3e0>
 801049a:	2201      	movs	r2, #1
 801049c:	1171      	asrs	r1, r6, #5
 801049e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80104a2:	f006 061f 	and.w	r6, r6, #31
 80104a6:	fa02 f606 	lsl.w	r6, r2, r6
 80104aa:	421e      	tst	r6, r3
 80104ac:	bf18      	it	ne
 80104ae:	4617      	movne	r7, r2
 80104b0:	f047 0720 	orr.w	r7, r7, #32
 80104b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80104b6:	601c      	str	r4, [r3, #0]
 80104b8:	9b05      	ldr	r3, [sp, #20]
 80104ba:	601d      	str	r5, [r3, #0]
 80104bc:	e69a      	b.n	80101f4 <__gethex+0x124>
 80104be:	4299      	cmp	r1, r3
 80104c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80104c4:	d8d8      	bhi.n	8010478 <__gethex+0x3a8>
 80104c6:	68a3      	ldr	r3, [r4, #8]
 80104c8:	459b      	cmp	fp, r3
 80104ca:	db17      	blt.n	80104fc <__gethex+0x42c>
 80104cc:	6861      	ldr	r1, [r4, #4]
 80104ce:	9802      	ldr	r0, [sp, #8]
 80104d0:	3101      	adds	r1, #1
 80104d2:	f000 f98f 	bl	80107f4 <_Balloc>
 80104d6:	4681      	mov	r9, r0
 80104d8:	b918      	cbnz	r0, 80104e2 <__gethex+0x412>
 80104da:	4602      	mov	r2, r0
 80104dc:	2184      	movs	r1, #132	; 0x84
 80104de:	4b19      	ldr	r3, [pc, #100]	; (8010544 <__gethex+0x474>)
 80104e0:	e6ab      	b.n	801023a <__gethex+0x16a>
 80104e2:	6922      	ldr	r2, [r4, #16]
 80104e4:	f104 010c 	add.w	r1, r4, #12
 80104e8:	3202      	adds	r2, #2
 80104ea:	0092      	lsls	r2, r2, #2
 80104ec:	300c      	adds	r0, #12
 80104ee:	f7fc fe0d 	bl	800d10c <memcpy>
 80104f2:	4621      	mov	r1, r4
 80104f4:	9802      	ldr	r0, [sp, #8]
 80104f6:	f000 f9bd 	bl	8010874 <_Bfree>
 80104fa:	464c      	mov	r4, r9
 80104fc:	6923      	ldr	r3, [r4, #16]
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	6122      	str	r2, [r4, #16]
 8010502:	2201      	movs	r2, #1
 8010504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010508:	615a      	str	r2, [r3, #20]
 801050a:	e7bd      	b.n	8010488 <__gethex+0x3b8>
 801050c:	6922      	ldr	r2, [r4, #16]
 801050e:	455a      	cmp	r2, fp
 8010510:	dd0b      	ble.n	801052a <__gethex+0x45a>
 8010512:	2101      	movs	r1, #1
 8010514:	4620      	mov	r0, r4
 8010516:	f7ff fd72 	bl	800fffe <rshift>
 801051a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801051e:	3501      	adds	r5, #1
 8010520:	42ab      	cmp	r3, r5
 8010522:	f6ff aed4 	blt.w	80102ce <__gethex+0x1fe>
 8010526:	2701      	movs	r7, #1
 8010528:	e7c2      	b.n	80104b0 <__gethex+0x3e0>
 801052a:	f016 061f 	ands.w	r6, r6, #31
 801052e:	d0fa      	beq.n	8010526 <__gethex+0x456>
 8010530:	4453      	add	r3, sl
 8010532:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010536:	f000 fa4f 	bl	80109d8 <__hi0bits>
 801053a:	f1c6 0620 	rsb	r6, r6, #32
 801053e:	42b0      	cmp	r0, r6
 8010540:	dbe7      	blt.n	8010512 <__gethex+0x442>
 8010542:	e7f0      	b.n	8010526 <__gethex+0x456>
 8010544:	08034348 	.word	0x08034348

08010548 <L_shift>:
 8010548:	f1c2 0208 	rsb	r2, r2, #8
 801054c:	0092      	lsls	r2, r2, #2
 801054e:	b570      	push	{r4, r5, r6, lr}
 8010550:	f1c2 0620 	rsb	r6, r2, #32
 8010554:	6843      	ldr	r3, [r0, #4]
 8010556:	6804      	ldr	r4, [r0, #0]
 8010558:	fa03 f506 	lsl.w	r5, r3, r6
 801055c:	432c      	orrs	r4, r5
 801055e:	40d3      	lsrs	r3, r2
 8010560:	6004      	str	r4, [r0, #0]
 8010562:	f840 3f04 	str.w	r3, [r0, #4]!
 8010566:	4288      	cmp	r0, r1
 8010568:	d3f4      	bcc.n	8010554 <L_shift+0xc>
 801056a:	bd70      	pop	{r4, r5, r6, pc}

0801056c <__match>:
 801056c:	b530      	push	{r4, r5, lr}
 801056e:	6803      	ldr	r3, [r0, #0]
 8010570:	3301      	adds	r3, #1
 8010572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010576:	b914      	cbnz	r4, 801057e <__match+0x12>
 8010578:	6003      	str	r3, [r0, #0]
 801057a:	2001      	movs	r0, #1
 801057c:	bd30      	pop	{r4, r5, pc}
 801057e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010582:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010586:	2d19      	cmp	r5, #25
 8010588:	bf98      	it	ls
 801058a:	3220      	addls	r2, #32
 801058c:	42a2      	cmp	r2, r4
 801058e:	d0f0      	beq.n	8010572 <__match+0x6>
 8010590:	2000      	movs	r0, #0
 8010592:	e7f3      	b.n	801057c <__match+0x10>

08010594 <__hexnan>:
 8010594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010598:	2500      	movs	r5, #0
 801059a:	680b      	ldr	r3, [r1, #0]
 801059c:	4682      	mov	sl, r0
 801059e:	115e      	asrs	r6, r3, #5
 80105a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80105a4:	f013 031f 	ands.w	r3, r3, #31
 80105a8:	bf18      	it	ne
 80105aa:	3604      	addne	r6, #4
 80105ac:	1f37      	subs	r7, r6, #4
 80105ae:	46b9      	mov	r9, r7
 80105b0:	463c      	mov	r4, r7
 80105b2:	46ab      	mov	fp, r5
 80105b4:	b087      	sub	sp, #28
 80105b6:	4690      	mov	r8, r2
 80105b8:	6802      	ldr	r2, [r0, #0]
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	f846 5c04 	str.w	r5, [r6, #-4]
 80105c0:	9502      	str	r5, [sp, #8]
 80105c2:	7851      	ldrb	r1, [r2, #1]
 80105c4:	1c53      	adds	r3, r2, #1
 80105c6:	9303      	str	r3, [sp, #12]
 80105c8:	b341      	cbz	r1, 801061c <__hexnan+0x88>
 80105ca:	4608      	mov	r0, r1
 80105cc:	9205      	str	r2, [sp, #20]
 80105ce:	9104      	str	r1, [sp, #16]
 80105d0:	f7ff fd68 	bl	80100a4 <__hexdig_fun>
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d14f      	bne.n	8010678 <__hexnan+0xe4>
 80105d8:	9904      	ldr	r1, [sp, #16]
 80105da:	9a05      	ldr	r2, [sp, #20]
 80105dc:	2920      	cmp	r1, #32
 80105de:	d818      	bhi.n	8010612 <__hexnan+0x7e>
 80105e0:	9b02      	ldr	r3, [sp, #8]
 80105e2:	459b      	cmp	fp, r3
 80105e4:	dd13      	ble.n	801060e <__hexnan+0x7a>
 80105e6:	454c      	cmp	r4, r9
 80105e8:	d206      	bcs.n	80105f8 <__hexnan+0x64>
 80105ea:	2d07      	cmp	r5, #7
 80105ec:	dc04      	bgt.n	80105f8 <__hexnan+0x64>
 80105ee:	462a      	mov	r2, r5
 80105f0:	4649      	mov	r1, r9
 80105f2:	4620      	mov	r0, r4
 80105f4:	f7ff ffa8 	bl	8010548 <L_shift>
 80105f8:	4544      	cmp	r4, r8
 80105fa:	d950      	bls.n	801069e <__hexnan+0x10a>
 80105fc:	2300      	movs	r3, #0
 80105fe:	f1a4 0904 	sub.w	r9, r4, #4
 8010602:	f844 3c04 	str.w	r3, [r4, #-4]
 8010606:	461d      	mov	r5, r3
 8010608:	464c      	mov	r4, r9
 801060a:	f8cd b008 	str.w	fp, [sp, #8]
 801060e:	9a03      	ldr	r2, [sp, #12]
 8010610:	e7d7      	b.n	80105c2 <__hexnan+0x2e>
 8010612:	2929      	cmp	r1, #41	; 0x29
 8010614:	d156      	bne.n	80106c4 <__hexnan+0x130>
 8010616:	3202      	adds	r2, #2
 8010618:	f8ca 2000 	str.w	r2, [sl]
 801061c:	f1bb 0f00 	cmp.w	fp, #0
 8010620:	d050      	beq.n	80106c4 <__hexnan+0x130>
 8010622:	454c      	cmp	r4, r9
 8010624:	d206      	bcs.n	8010634 <__hexnan+0xa0>
 8010626:	2d07      	cmp	r5, #7
 8010628:	dc04      	bgt.n	8010634 <__hexnan+0xa0>
 801062a:	462a      	mov	r2, r5
 801062c:	4649      	mov	r1, r9
 801062e:	4620      	mov	r0, r4
 8010630:	f7ff ff8a 	bl	8010548 <L_shift>
 8010634:	4544      	cmp	r4, r8
 8010636:	d934      	bls.n	80106a2 <__hexnan+0x10e>
 8010638:	4623      	mov	r3, r4
 801063a:	f1a8 0204 	sub.w	r2, r8, #4
 801063e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010642:	429f      	cmp	r7, r3
 8010644:	f842 1f04 	str.w	r1, [r2, #4]!
 8010648:	d2f9      	bcs.n	801063e <__hexnan+0xaa>
 801064a:	1b3b      	subs	r3, r7, r4
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	3304      	adds	r3, #4
 8010652:	3401      	adds	r4, #1
 8010654:	3e03      	subs	r6, #3
 8010656:	42b4      	cmp	r4, r6
 8010658:	bf88      	it	hi
 801065a:	2304      	movhi	r3, #4
 801065c:	2200      	movs	r2, #0
 801065e:	4443      	add	r3, r8
 8010660:	f843 2b04 	str.w	r2, [r3], #4
 8010664:	429f      	cmp	r7, r3
 8010666:	d2fb      	bcs.n	8010660 <__hexnan+0xcc>
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	b91b      	cbnz	r3, 8010674 <__hexnan+0xe0>
 801066c:	4547      	cmp	r7, r8
 801066e:	d127      	bne.n	80106c0 <__hexnan+0x12c>
 8010670:	2301      	movs	r3, #1
 8010672:	603b      	str	r3, [r7, #0]
 8010674:	2005      	movs	r0, #5
 8010676:	e026      	b.n	80106c6 <__hexnan+0x132>
 8010678:	3501      	adds	r5, #1
 801067a:	2d08      	cmp	r5, #8
 801067c:	f10b 0b01 	add.w	fp, fp, #1
 8010680:	dd06      	ble.n	8010690 <__hexnan+0xfc>
 8010682:	4544      	cmp	r4, r8
 8010684:	d9c3      	bls.n	801060e <__hexnan+0x7a>
 8010686:	2300      	movs	r3, #0
 8010688:	2501      	movs	r5, #1
 801068a:	f844 3c04 	str.w	r3, [r4, #-4]
 801068e:	3c04      	subs	r4, #4
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	f000 000f 	and.w	r0, r0, #15
 8010696:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801069a:	6022      	str	r2, [r4, #0]
 801069c:	e7b7      	b.n	801060e <__hexnan+0x7a>
 801069e:	2508      	movs	r5, #8
 80106a0:	e7b5      	b.n	801060e <__hexnan+0x7a>
 80106a2:	9b01      	ldr	r3, [sp, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d0df      	beq.n	8010668 <__hexnan+0xd4>
 80106a8:	f04f 32ff 	mov.w	r2, #4294967295
 80106ac:	f1c3 0320 	rsb	r3, r3, #32
 80106b0:	fa22 f303 	lsr.w	r3, r2, r3
 80106b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80106b8:	401a      	ands	r2, r3
 80106ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80106be:	e7d3      	b.n	8010668 <__hexnan+0xd4>
 80106c0:	3f04      	subs	r7, #4
 80106c2:	e7d1      	b.n	8010668 <__hexnan+0xd4>
 80106c4:	2004      	movs	r0, #4
 80106c6:	b007      	add	sp, #28
 80106c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106cc <_localeconv_r>:
 80106cc:	4800      	ldr	r0, [pc, #0]	; (80106d0 <_localeconv_r+0x4>)
 80106ce:	4770      	bx	lr
 80106d0:	200001ac 	.word	0x200001ac

080106d4 <__retarget_lock_init_recursive>:
 80106d4:	4770      	bx	lr

080106d6 <__retarget_lock_acquire_recursive>:
 80106d6:	4770      	bx	lr

080106d8 <__retarget_lock_release_recursive>:
 80106d8:	4770      	bx	lr

080106da <__swhatbuf_r>:
 80106da:	b570      	push	{r4, r5, r6, lr}
 80106dc:	460e      	mov	r6, r1
 80106de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e2:	4614      	mov	r4, r2
 80106e4:	2900      	cmp	r1, #0
 80106e6:	461d      	mov	r5, r3
 80106e8:	b096      	sub	sp, #88	; 0x58
 80106ea:	da08      	bge.n	80106fe <__swhatbuf_r+0x24>
 80106ec:	2200      	movs	r2, #0
 80106ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80106f2:	602a      	str	r2, [r5, #0]
 80106f4:	061a      	lsls	r2, r3, #24
 80106f6:	d410      	bmi.n	801071a <__swhatbuf_r+0x40>
 80106f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106fc:	e00e      	b.n	801071c <__swhatbuf_r+0x42>
 80106fe:	466a      	mov	r2, sp
 8010700:	f001 f9ac 	bl	8011a5c <_fstat_r>
 8010704:	2800      	cmp	r0, #0
 8010706:	dbf1      	blt.n	80106ec <__swhatbuf_r+0x12>
 8010708:	9a01      	ldr	r2, [sp, #4]
 801070a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801070e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010712:	425a      	negs	r2, r3
 8010714:	415a      	adcs	r2, r3
 8010716:	602a      	str	r2, [r5, #0]
 8010718:	e7ee      	b.n	80106f8 <__swhatbuf_r+0x1e>
 801071a:	2340      	movs	r3, #64	; 0x40
 801071c:	2000      	movs	r0, #0
 801071e:	6023      	str	r3, [r4, #0]
 8010720:	b016      	add	sp, #88	; 0x58
 8010722:	bd70      	pop	{r4, r5, r6, pc}

08010724 <__smakebuf_r>:
 8010724:	898b      	ldrh	r3, [r1, #12]
 8010726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010728:	079d      	lsls	r5, r3, #30
 801072a:	4606      	mov	r6, r0
 801072c:	460c      	mov	r4, r1
 801072e:	d507      	bpl.n	8010740 <__smakebuf_r+0x1c>
 8010730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010734:	6023      	str	r3, [r4, #0]
 8010736:	6123      	str	r3, [r4, #16]
 8010738:	2301      	movs	r3, #1
 801073a:	6163      	str	r3, [r4, #20]
 801073c:	b002      	add	sp, #8
 801073e:	bd70      	pop	{r4, r5, r6, pc}
 8010740:	466a      	mov	r2, sp
 8010742:	ab01      	add	r3, sp, #4
 8010744:	f7ff ffc9 	bl	80106da <__swhatbuf_r>
 8010748:	9900      	ldr	r1, [sp, #0]
 801074a:	4605      	mov	r5, r0
 801074c:	4630      	mov	r0, r6
 801074e:	f000 fd85 	bl	801125c <_malloc_r>
 8010752:	b948      	cbnz	r0, 8010768 <__smakebuf_r+0x44>
 8010754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010758:	059a      	lsls	r2, r3, #22
 801075a:	d4ef      	bmi.n	801073c <__smakebuf_r+0x18>
 801075c:	f023 0303 	bic.w	r3, r3, #3
 8010760:	f043 0302 	orr.w	r3, r3, #2
 8010764:	81a3      	strh	r3, [r4, #12]
 8010766:	e7e3      	b.n	8010730 <__smakebuf_r+0xc>
 8010768:	4b0d      	ldr	r3, [pc, #52]	; (80107a0 <__smakebuf_r+0x7c>)
 801076a:	62b3      	str	r3, [r6, #40]	; 0x28
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	6020      	str	r0, [r4, #0]
 8010770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010774:	81a3      	strh	r3, [r4, #12]
 8010776:	9b00      	ldr	r3, [sp, #0]
 8010778:	6120      	str	r0, [r4, #16]
 801077a:	6163      	str	r3, [r4, #20]
 801077c:	9b01      	ldr	r3, [sp, #4]
 801077e:	b15b      	cbz	r3, 8010798 <__smakebuf_r+0x74>
 8010780:	4630      	mov	r0, r6
 8010782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010786:	f001 f97b 	bl	8011a80 <_isatty_r>
 801078a:	b128      	cbz	r0, 8010798 <__smakebuf_r+0x74>
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	f023 0303 	bic.w	r3, r3, #3
 8010792:	f043 0301 	orr.w	r3, r3, #1
 8010796:	81a3      	strh	r3, [r4, #12]
 8010798:	89a0      	ldrh	r0, [r4, #12]
 801079a:	4305      	orrs	r5, r0
 801079c:	81a5      	strh	r5, [r4, #12]
 801079e:	e7cd      	b.n	801073c <__smakebuf_r+0x18>
 80107a0:	0800fe39 	.word	0x0800fe39

080107a4 <malloc>:
 80107a4:	4b02      	ldr	r3, [pc, #8]	; (80107b0 <malloc+0xc>)
 80107a6:	4601      	mov	r1, r0
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f000 bd57 	b.w	801125c <_malloc_r>
 80107ae:	bf00      	nop
 80107b0:	20000054 	.word	0x20000054

080107b4 <__ascii_mbtowc>:
 80107b4:	b082      	sub	sp, #8
 80107b6:	b901      	cbnz	r1, 80107ba <__ascii_mbtowc+0x6>
 80107b8:	a901      	add	r1, sp, #4
 80107ba:	b142      	cbz	r2, 80107ce <__ascii_mbtowc+0x1a>
 80107bc:	b14b      	cbz	r3, 80107d2 <__ascii_mbtowc+0x1e>
 80107be:	7813      	ldrb	r3, [r2, #0]
 80107c0:	600b      	str	r3, [r1, #0]
 80107c2:	7812      	ldrb	r2, [r2, #0]
 80107c4:	1e10      	subs	r0, r2, #0
 80107c6:	bf18      	it	ne
 80107c8:	2001      	movne	r0, #1
 80107ca:	b002      	add	sp, #8
 80107cc:	4770      	bx	lr
 80107ce:	4610      	mov	r0, r2
 80107d0:	e7fb      	b.n	80107ca <__ascii_mbtowc+0x16>
 80107d2:	f06f 0001 	mvn.w	r0, #1
 80107d6:	e7f8      	b.n	80107ca <__ascii_mbtowc+0x16>

080107d8 <memchr>:
 80107d8:	4603      	mov	r3, r0
 80107da:	b510      	push	{r4, lr}
 80107dc:	b2c9      	uxtb	r1, r1
 80107de:	4402      	add	r2, r0
 80107e0:	4293      	cmp	r3, r2
 80107e2:	4618      	mov	r0, r3
 80107e4:	d101      	bne.n	80107ea <memchr+0x12>
 80107e6:	2000      	movs	r0, #0
 80107e8:	e003      	b.n	80107f2 <memchr+0x1a>
 80107ea:	7804      	ldrb	r4, [r0, #0]
 80107ec:	3301      	adds	r3, #1
 80107ee:	428c      	cmp	r4, r1
 80107f0:	d1f6      	bne.n	80107e0 <memchr+0x8>
 80107f2:	bd10      	pop	{r4, pc}

080107f4 <_Balloc>:
 80107f4:	b570      	push	{r4, r5, r6, lr}
 80107f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80107f8:	4604      	mov	r4, r0
 80107fa:	460d      	mov	r5, r1
 80107fc:	b976      	cbnz	r6, 801081c <_Balloc+0x28>
 80107fe:	2010      	movs	r0, #16
 8010800:	f7ff ffd0 	bl	80107a4 <malloc>
 8010804:	4602      	mov	r2, r0
 8010806:	6260      	str	r0, [r4, #36]	; 0x24
 8010808:	b920      	cbnz	r0, 8010814 <_Balloc+0x20>
 801080a:	2166      	movs	r1, #102	; 0x66
 801080c:	4b17      	ldr	r3, [pc, #92]	; (801086c <_Balloc+0x78>)
 801080e:	4818      	ldr	r0, [pc, #96]	; (8010870 <_Balloc+0x7c>)
 8010810:	f7fe fb98 	bl	800ef44 <__assert_func>
 8010814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010818:	6006      	str	r6, [r0, #0]
 801081a:	60c6      	str	r6, [r0, #12]
 801081c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801081e:	68f3      	ldr	r3, [r6, #12]
 8010820:	b183      	cbz	r3, 8010844 <_Balloc+0x50>
 8010822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801082a:	b9b8      	cbnz	r0, 801085c <_Balloc+0x68>
 801082c:	2101      	movs	r1, #1
 801082e:	fa01 f605 	lsl.w	r6, r1, r5
 8010832:	1d72      	adds	r2, r6, #5
 8010834:	4620      	mov	r0, r4
 8010836:	0092      	lsls	r2, r2, #2
 8010838:	f000 fc94 	bl	8011164 <_calloc_r>
 801083c:	b160      	cbz	r0, 8010858 <_Balloc+0x64>
 801083e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010842:	e00e      	b.n	8010862 <_Balloc+0x6e>
 8010844:	2221      	movs	r2, #33	; 0x21
 8010846:	2104      	movs	r1, #4
 8010848:	4620      	mov	r0, r4
 801084a:	f000 fc8b 	bl	8011164 <_calloc_r>
 801084e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010850:	60f0      	str	r0, [r6, #12]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e4      	bne.n	8010822 <_Balloc+0x2e>
 8010858:	2000      	movs	r0, #0
 801085a:	bd70      	pop	{r4, r5, r6, pc}
 801085c:	6802      	ldr	r2, [r0, #0]
 801085e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010862:	2300      	movs	r3, #0
 8010864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010868:	e7f7      	b.n	801085a <_Balloc+0x66>
 801086a:	bf00      	nop
 801086c:	08034230 	.word	0x08034230
 8010870:	08034438 	.word	0x08034438

08010874 <_Bfree>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010878:	4605      	mov	r5, r0
 801087a:	460c      	mov	r4, r1
 801087c:	b976      	cbnz	r6, 801089c <_Bfree+0x28>
 801087e:	2010      	movs	r0, #16
 8010880:	f7ff ff90 	bl	80107a4 <malloc>
 8010884:	4602      	mov	r2, r0
 8010886:	6268      	str	r0, [r5, #36]	; 0x24
 8010888:	b920      	cbnz	r0, 8010894 <_Bfree+0x20>
 801088a:	218a      	movs	r1, #138	; 0x8a
 801088c:	4b08      	ldr	r3, [pc, #32]	; (80108b0 <_Bfree+0x3c>)
 801088e:	4809      	ldr	r0, [pc, #36]	; (80108b4 <_Bfree+0x40>)
 8010890:	f7fe fb58 	bl	800ef44 <__assert_func>
 8010894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010898:	6006      	str	r6, [r0, #0]
 801089a:	60c6      	str	r6, [r0, #12]
 801089c:	b13c      	cbz	r4, 80108ae <_Bfree+0x3a>
 801089e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108a0:	6862      	ldr	r2, [r4, #4]
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108a8:	6021      	str	r1, [r4, #0]
 80108aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108ae:	bd70      	pop	{r4, r5, r6, pc}
 80108b0:	08034230 	.word	0x08034230
 80108b4:	08034438 	.word	0x08034438

080108b8 <__multadd>:
 80108b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108bc:	4607      	mov	r7, r0
 80108be:	460c      	mov	r4, r1
 80108c0:	461e      	mov	r6, r3
 80108c2:	2000      	movs	r0, #0
 80108c4:	690d      	ldr	r5, [r1, #16]
 80108c6:	f101 0c14 	add.w	ip, r1, #20
 80108ca:	f8dc 3000 	ldr.w	r3, [ip]
 80108ce:	3001      	adds	r0, #1
 80108d0:	b299      	uxth	r1, r3
 80108d2:	fb02 6101 	mla	r1, r2, r1, r6
 80108d6:	0c1e      	lsrs	r6, r3, #16
 80108d8:	0c0b      	lsrs	r3, r1, #16
 80108da:	fb02 3306 	mla	r3, r2, r6, r3
 80108de:	b289      	uxth	r1, r1
 80108e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108e4:	4285      	cmp	r5, r0
 80108e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108ea:	f84c 1b04 	str.w	r1, [ip], #4
 80108ee:	dcec      	bgt.n	80108ca <__multadd+0x12>
 80108f0:	b30e      	cbz	r6, 8010936 <__multadd+0x7e>
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	42ab      	cmp	r3, r5
 80108f6:	dc19      	bgt.n	801092c <__multadd+0x74>
 80108f8:	6861      	ldr	r1, [r4, #4]
 80108fa:	4638      	mov	r0, r7
 80108fc:	3101      	adds	r1, #1
 80108fe:	f7ff ff79 	bl	80107f4 <_Balloc>
 8010902:	4680      	mov	r8, r0
 8010904:	b928      	cbnz	r0, 8010912 <__multadd+0x5a>
 8010906:	4602      	mov	r2, r0
 8010908:	21b5      	movs	r1, #181	; 0xb5
 801090a:	4b0c      	ldr	r3, [pc, #48]	; (801093c <__multadd+0x84>)
 801090c:	480c      	ldr	r0, [pc, #48]	; (8010940 <__multadd+0x88>)
 801090e:	f7fe fb19 	bl	800ef44 <__assert_func>
 8010912:	6922      	ldr	r2, [r4, #16]
 8010914:	f104 010c 	add.w	r1, r4, #12
 8010918:	3202      	adds	r2, #2
 801091a:	0092      	lsls	r2, r2, #2
 801091c:	300c      	adds	r0, #12
 801091e:	f7fc fbf5 	bl	800d10c <memcpy>
 8010922:	4621      	mov	r1, r4
 8010924:	4638      	mov	r0, r7
 8010926:	f7ff ffa5 	bl	8010874 <_Bfree>
 801092a:	4644      	mov	r4, r8
 801092c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010930:	3501      	adds	r5, #1
 8010932:	615e      	str	r6, [r3, #20]
 8010934:	6125      	str	r5, [r4, #16]
 8010936:	4620      	mov	r0, r4
 8010938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801093c:	08034348 	.word	0x08034348
 8010940:	08034438 	.word	0x08034438

08010944 <__s2b>:
 8010944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010948:	4615      	mov	r5, r2
 801094a:	2209      	movs	r2, #9
 801094c:	461f      	mov	r7, r3
 801094e:	3308      	adds	r3, #8
 8010950:	460c      	mov	r4, r1
 8010952:	fb93 f3f2 	sdiv	r3, r3, r2
 8010956:	4606      	mov	r6, r0
 8010958:	2201      	movs	r2, #1
 801095a:	2100      	movs	r1, #0
 801095c:	429a      	cmp	r2, r3
 801095e:	db09      	blt.n	8010974 <__s2b+0x30>
 8010960:	4630      	mov	r0, r6
 8010962:	f7ff ff47 	bl	80107f4 <_Balloc>
 8010966:	b940      	cbnz	r0, 801097a <__s2b+0x36>
 8010968:	4602      	mov	r2, r0
 801096a:	21ce      	movs	r1, #206	; 0xce
 801096c:	4b18      	ldr	r3, [pc, #96]	; (80109d0 <__s2b+0x8c>)
 801096e:	4819      	ldr	r0, [pc, #100]	; (80109d4 <__s2b+0x90>)
 8010970:	f7fe fae8 	bl	800ef44 <__assert_func>
 8010974:	0052      	lsls	r2, r2, #1
 8010976:	3101      	adds	r1, #1
 8010978:	e7f0      	b.n	801095c <__s2b+0x18>
 801097a:	9b08      	ldr	r3, [sp, #32]
 801097c:	2d09      	cmp	r5, #9
 801097e:	6143      	str	r3, [r0, #20]
 8010980:	f04f 0301 	mov.w	r3, #1
 8010984:	6103      	str	r3, [r0, #16]
 8010986:	dd16      	ble.n	80109b6 <__s2b+0x72>
 8010988:	f104 0909 	add.w	r9, r4, #9
 801098c:	46c8      	mov	r8, r9
 801098e:	442c      	add	r4, r5
 8010990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010994:	4601      	mov	r1, r0
 8010996:	220a      	movs	r2, #10
 8010998:	4630      	mov	r0, r6
 801099a:	3b30      	subs	r3, #48	; 0x30
 801099c:	f7ff ff8c 	bl	80108b8 <__multadd>
 80109a0:	45a0      	cmp	r8, r4
 80109a2:	d1f5      	bne.n	8010990 <__s2b+0x4c>
 80109a4:	f1a5 0408 	sub.w	r4, r5, #8
 80109a8:	444c      	add	r4, r9
 80109aa:	1b2d      	subs	r5, r5, r4
 80109ac:	1963      	adds	r3, r4, r5
 80109ae:	42bb      	cmp	r3, r7
 80109b0:	db04      	blt.n	80109bc <__s2b+0x78>
 80109b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109b6:	2509      	movs	r5, #9
 80109b8:	340a      	adds	r4, #10
 80109ba:	e7f6      	b.n	80109aa <__s2b+0x66>
 80109bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109c0:	4601      	mov	r1, r0
 80109c2:	220a      	movs	r2, #10
 80109c4:	4630      	mov	r0, r6
 80109c6:	3b30      	subs	r3, #48	; 0x30
 80109c8:	f7ff ff76 	bl	80108b8 <__multadd>
 80109cc:	e7ee      	b.n	80109ac <__s2b+0x68>
 80109ce:	bf00      	nop
 80109d0:	08034348 	.word	0x08034348
 80109d4:	08034438 	.word	0x08034438

080109d8 <__hi0bits>:
 80109d8:	0c02      	lsrs	r2, r0, #16
 80109da:	0412      	lsls	r2, r2, #16
 80109dc:	4603      	mov	r3, r0
 80109de:	b9ca      	cbnz	r2, 8010a14 <__hi0bits+0x3c>
 80109e0:	0403      	lsls	r3, r0, #16
 80109e2:	2010      	movs	r0, #16
 80109e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80109e8:	bf04      	itt	eq
 80109ea:	021b      	lsleq	r3, r3, #8
 80109ec:	3008      	addeq	r0, #8
 80109ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80109f2:	bf04      	itt	eq
 80109f4:	011b      	lsleq	r3, r3, #4
 80109f6:	3004      	addeq	r0, #4
 80109f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80109fc:	bf04      	itt	eq
 80109fe:	009b      	lsleq	r3, r3, #2
 8010a00:	3002      	addeq	r0, #2
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	db05      	blt.n	8010a12 <__hi0bits+0x3a>
 8010a06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010a0a:	f100 0001 	add.w	r0, r0, #1
 8010a0e:	bf08      	it	eq
 8010a10:	2020      	moveq	r0, #32
 8010a12:	4770      	bx	lr
 8010a14:	2000      	movs	r0, #0
 8010a16:	e7e5      	b.n	80109e4 <__hi0bits+0xc>

08010a18 <__lo0bits>:
 8010a18:	6803      	ldr	r3, [r0, #0]
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	f013 0007 	ands.w	r0, r3, #7
 8010a20:	d00b      	beq.n	8010a3a <__lo0bits+0x22>
 8010a22:	07d9      	lsls	r1, r3, #31
 8010a24:	d421      	bmi.n	8010a6a <__lo0bits+0x52>
 8010a26:	0798      	lsls	r0, r3, #30
 8010a28:	bf49      	itett	mi
 8010a2a:	085b      	lsrmi	r3, r3, #1
 8010a2c:	089b      	lsrpl	r3, r3, #2
 8010a2e:	2001      	movmi	r0, #1
 8010a30:	6013      	strmi	r3, [r2, #0]
 8010a32:	bf5c      	itt	pl
 8010a34:	2002      	movpl	r0, #2
 8010a36:	6013      	strpl	r3, [r2, #0]
 8010a38:	4770      	bx	lr
 8010a3a:	b299      	uxth	r1, r3
 8010a3c:	b909      	cbnz	r1, 8010a42 <__lo0bits+0x2a>
 8010a3e:	2010      	movs	r0, #16
 8010a40:	0c1b      	lsrs	r3, r3, #16
 8010a42:	b2d9      	uxtb	r1, r3
 8010a44:	b909      	cbnz	r1, 8010a4a <__lo0bits+0x32>
 8010a46:	3008      	adds	r0, #8
 8010a48:	0a1b      	lsrs	r3, r3, #8
 8010a4a:	0719      	lsls	r1, r3, #28
 8010a4c:	bf04      	itt	eq
 8010a4e:	091b      	lsreq	r3, r3, #4
 8010a50:	3004      	addeq	r0, #4
 8010a52:	0799      	lsls	r1, r3, #30
 8010a54:	bf04      	itt	eq
 8010a56:	089b      	lsreq	r3, r3, #2
 8010a58:	3002      	addeq	r0, #2
 8010a5a:	07d9      	lsls	r1, r3, #31
 8010a5c:	d403      	bmi.n	8010a66 <__lo0bits+0x4e>
 8010a5e:	085b      	lsrs	r3, r3, #1
 8010a60:	f100 0001 	add.w	r0, r0, #1
 8010a64:	d003      	beq.n	8010a6e <__lo0bits+0x56>
 8010a66:	6013      	str	r3, [r2, #0]
 8010a68:	4770      	bx	lr
 8010a6a:	2000      	movs	r0, #0
 8010a6c:	4770      	bx	lr
 8010a6e:	2020      	movs	r0, #32
 8010a70:	4770      	bx	lr
	...

08010a74 <__i2b>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	460c      	mov	r4, r1
 8010a78:	2101      	movs	r1, #1
 8010a7a:	f7ff febb 	bl	80107f4 <_Balloc>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	b928      	cbnz	r0, 8010a8e <__i2b+0x1a>
 8010a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010a86:	4b04      	ldr	r3, [pc, #16]	; (8010a98 <__i2b+0x24>)
 8010a88:	4804      	ldr	r0, [pc, #16]	; (8010a9c <__i2b+0x28>)
 8010a8a:	f7fe fa5b 	bl	800ef44 <__assert_func>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	6144      	str	r4, [r0, #20]
 8010a92:	6103      	str	r3, [r0, #16]
 8010a94:	bd10      	pop	{r4, pc}
 8010a96:	bf00      	nop
 8010a98:	08034348 	.word	0x08034348
 8010a9c:	08034438 	.word	0x08034438

08010aa0 <__multiply>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	4691      	mov	r9, r2
 8010aa6:	690a      	ldr	r2, [r1, #16]
 8010aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aac:	460c      	mov	r4, r1
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	bfbe      	ittt	lt
 8010ab2:	460b      	movlt	r3, r1
 8010ab4:	464c      	movlt	r4, r9
 8010ab6:	4699      	movlt	r9, r3
 8010ab8:	6927      	ldr	r7, [r4, #16]
 8010aba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010abe:	68a3      	ldr	r3, [r4, #8]
 8010ac0:	6861      	ldr	r1, [r4, #4]
 8010ac2:	eb07 060a 	add.w	r6, r7, sl
 8010ac6:	42b3      	cmp	r3, r6
 8010ac8:	b085      	sub	sp, #20
 8010aca:	bfb8      	it	lt
 8010acc:	3101      	addlt	r1, #1
 8010ace:	f7ff fe91 	bl	80107f4 <_Balloc>
 8010ad2:	b930      	cbnz	r0, 8010ae2 <__multiply+0x42>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	f240 115d 	movw	r1, #349	; 0x15d
 8010ada:	4b43      	ldr	r3, [pc, #268]	; (8010be8 <__multiply+0x148>)
 8010adc:	4843      	ldr	r0, [pc, #268]	; (8010bec <__multiply+0x14c>)
 8010ade:	f7fe fa31 	bl	800ef44 <__assert_func>
 8010ae2:	f100 0514 	add.w	r5, r0, #20
 8010ae6:	462b      	mov	r3, r5
 8010ae8:	2200      	movs	r2, #0
 8010aea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010aee:	4543      	cmp	r3, r8
 8010af0:	d321      	bcc.n	8010b36 <__multiply+0x96>
 8010af2:	f104 0314 	add.w	r3, r4, #20
 8010af6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010afa:	f109 0314 	add.w	r3, r9, #20
 8010afe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b02:	9202      	str	r2, [sp, #8]
 8010b04:	1b3a      	subs	r2, r7, r4
 8010b06:	3a15      	subs	r2, #21
 8010b08:	f022 0203 	bic.w	r2, r2, #3
 8010b0c:	3204      	adds	r2, #4
 8010b0e:	f104 0115 	add.w	r1, r4, #21
 8010b12:	428f      	cmp	r7, r1
 8010b14:	bf38      	it	cc
 8010b16:	2204      	movcc	r2, #4
 8010b18:	9201      	str	r2, [sp, #4]
 8010b1a:	9a02      	ldr	r2, [sp, #8]
 8010b1c:	9303      	str	r3, [sp, #12]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d80c      	bhi.n	8010b3c <__multiply+0x9c>
 8010b22:	2e00      	cmp	r6, #0
 8010b24:	dd03      	ble.n	8010b2e <__multiply+0x8e>
 8010b26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d059      	beq.n	8010be2 <__multiply+0x142>
 8010b2e:	6106      	str	r6, [r0, #16]
 8010b30:	b005      	add	sp, #20
 8010b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b36:	f843 2b04 	str.w	r2, [r3], #4
 8010b3a:	e7d8      	b.n	8010aee <__multiply+0x4e>
 8010b3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b40:	f1ba 0f00 	cmp.w	sl, #0
 8010b44:	d023      	beq.n	8010b8e <__multiply+0xee>
 8010b46:	46a9      	mov	r9, r5
 8010b48:	f04f 0c00 	mov.w	ip, #0
 8010b4c:	f104 0e14 	add.w	lr, r4, #20
 8010b50:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b54:	f8d9 1000 	ldr.w	r1, [r9]
 8010b58:	fa1f fb82 	uxth.w	fp, r2
 8010b5c:	b289      	uxth	r1, r1
 8010b5e:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b62:	4461      	add	r1, ip
 8010b64:	f8d9 c000 	ldr.w	ip, [r9]
 8010b68:	0c12      	lsrs	r2, r2, #16
 8010b6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010b6e:	fb0a c202 	mla	r2, sl, r2, ip
 8010b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b76:	b289      	uxth	r1, r1
 8010b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b7c:	4577      	cmp	r7, lr
 8010b7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b82:	f849 1b04 	str.w	r1, [r9], #4
 8010b86:	d8e3      	bhi.n	8010b50 <__multiply+0xb0>
 8010b88:	9a01      	ldr	r2, [sp, #4]
 8010b8a:	f845 c002 	str.w	ip, [r5, r2]
 8010b8e:	9a03      	ldr	r2, [sp, #12]
 8010b90:	3304      	adds	r3, #4
 8010b92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b96:	f1b9 0f00 	cmp.w	r9, #0
 8010b9a:	d020      	beq.n	8010bde <__multiply+0x13e>
 8010b9c:	46ae      	mov	lr, r5
 8010b9e:	f04f 0a00 	mov.w	sl, #0
 8010ba2:	6829      	ldr	r1, [r5, #0]
 8010ba4:	f104 0c14 	add.w	ip, r4, #20
 8010ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8010bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010bb0:	b289      	uxth	r1, r1
 8010bb2:	fb09 220b 	mla	r2, r9, fp, r2
 8010bb6:	4492      	add	sl, r2
 8010bb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8010bc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010bc4:	f8be 1000 	ldrh.w	r1, [lr]
 8010bc8:	0c12      	lsrs	r2, r2, #16
 8010bca:	fb09 1102 	mla	r1, r9, r2, r1
 8010bce:	4567      	cmp	r7, ip
 8010bd0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bd8:	d8e6      	bhi.n	8010ba8 <__multiply+0x108>
 8010bda:	9a01      	ldr	r2, [sp, #4]
 8010bdc:	50a9      	str	r1, [r5, r2]
 8010bde:	3504      	adds	r5, #4
 8010be0:	e79b      	b.n	8010b1a <__multiply+0x7a>
 8010be2:	3e01      	subs	r6, #1
 8010be4:	e79d      	b.n	8010b22 <__multiply+0x82>
 8010be6:	bf00      	nop
 8010be8:	08034348 	.word	0x08034348
 8010bec:	08034438 	.word	0x08034438

08010bf0 <__pow5mult>:
 8010bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf4:	4615      	mov	r5, r2
 8010bf6:	f012 0203 	ands.w	r2, r2, #3
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	d007      	beq.n	8010c10 <__pow5mult+0x20>
 8010c00:	4c25      	ldr	r4, [pc, #148]	; (8010c98 <__pow5mult+0xa8>)
 8010c02:	3a01      	subs	r2, #1
 8010c04:	2300      	movs	r3, #0
 8010c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c0a:	f7ff fe55 	bl	80108b8 <__multadd>
 8010c0e:	4607      	mov	r7, r0
 8010c10:	10ad      	asrs	r5, r5, #2
 8010c12:	d03d      	beq.n	8010c90 <__pow5mult+0xa0>
 8010c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c16:	b97c      	cbnz	r4, 8010c38 <__pow5mult+0x48>
 8010c18:	2010      	movs	r0, #16
 8010c1a:	f7ff fdc3 	bl	80107a4 <malloc>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	6270      	str	r0, [r6, #36]	; 0x24
 8010c22:	b928      	cbnz	r0, 8010c30 <__pow5mult+0x40>
 8010c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010c28:	4b1c      	ldr	r3, [pc, #112]	; (8010c9c <__pow5mult+0xac>)
 8010c2a:	481d      	ldr	r0, [pc, #116]	; (8010ca0 <__pow5mult+0xb0>)
 8010c2c:	f7fe f98a 	bl	800ef44 <__assert_func>
 8010c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c34:	6004      	str	r4, [r0, #0]
 8010c36:	60c4      	str	r4, [r0, #12]
 8010c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c40:	b94c      	cbnz	r4, 8010c56 <__pow5mult+0x66>
 8010c42:	f240 2171 	movw	r1, #625	; 0x271
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7ff ff14 	bl	8010a74 <__i2b>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4604      	mov	r4, r0
 8010c50:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c54:	6003      	str	r3, [r0, #0]
 8010c56:	f04f 0900 	mov.w	r9, #0
 8010c5a:	07eb      	lsls	r3, r5, #31
 8010c5c:	d50a      	bpl.n	8010c74 <__pow5mult+0x84>
 8010c5e:	4639      	mov	r1, r7
 8010c60:	4622      	mov	r2, r4
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7ff ff1c 	bl	8010aa0 <__multiply>
 8010c68:	4680      	mov	r8, r0
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f7ff fe01 	bl	8010874 <_Bfree>
 8010c72:	4647      	mov	r7, r8
 8010c74:	106d      	asrs	r5, r5, #1
 8010c76:	d00b      	beq.n	8010c90 <__pow5mult+0xa0>
 8010c78:	6820      	ldr	r0, [r4, #0]
 8010c7a:	b938      	cbnz	r0, 8010c8c <__pow5mult+0x9c>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff ff0d 	bl	8010aa0 <__multiply>
 8010c86:	6020      	str	r0, [r4, #0]
 8010c88:	f8c0 9000 	str.w	r9, [r0]
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	e7e4      	b.n	8010c5a <__pow5mult+0x6a>
 8010c90:	4638      	mov	r0, r7
 8010c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c96:	bf00      	nop
 8010c98:	08034588 	.word	0x08034588
 8010c9c:	08034230 	.word	0x08034230
 8010ca0:	08034438 	.word	0x08034438

08010ca4 <__lshift>:
 8010ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca8:	460c      	mov	r4, r1
 8010caa:	4607      	mov	r7, r0
 8010cac:	4691      	mov	r9, r2
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	6849      	ldr	r1, [r1, #4]
 8010cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cbc:	f108 0601 	add.w	r6, r8, #1
 8010cc0:	42b3      	cmp	r3, r6
 8010cc2:	db0b      	blt.n	8010cdc <__lshift+0x38>
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	f7ff fd95 	bl	80107f4 <_Balloc>
 8010cca:	4605      	mov	r5, r0
 8010ccc:	b948      	cbnz	r0, 8010ce2 <__lshift+0x3e>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010cd4:	4b29      	ldr	r3, [pc, #164]	; (8010d7c <__lshift+0xd8>)
 8010cd6:	482a      	ldr	r0, [pc, #168]	; (8010d80 <__lshift+0xdc>)
 8010cd8:	f7fe f934 	bl	800ef44 <__assert_func>
 8010cdc:	3101      	adds	r1, #1
 8010cde:	005b      	lsls	r3, r3, #1
 8010ce0:	e7ee      	b.n	8010cc0 <__lshift+0x1c>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f100 0114 	add.w	r1, r0, #20
 8010ce8:	f100 0210 	add.w	r2, r0, #16
 8010cec:	4618      	mov	r0, r3
 8010cee:	4553      	cmp	r3, sl
 8010cf0:	db37      	blt.n	8010d62 <__lshift+0xbe>
 8010cf2:	6920      	ldr	r0, [r4, #16]
 8010cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cf8:	f104 0314 	add.w	r3, r4, #20
 8010cfc:	f019 091f 	ands.w	r9, r9, #31
 8010d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010d08:	d02f      	beq.n	8010d6a <__lshift+0xc6>
 8010d0a:	468a      	mov	sl, r1
 8010d0c:	f04f 0c00 	mov.w	ip, #0
 8010d10:	f1c9 0e20 	rsb	lr, r9, #32
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	fa02 f209 	lsl.w	r2, r2, r9
 8010d1a:	ea42 020c 	orr.w	r2, r2, ip
 8010d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8010d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d26:	4298      	cmp	r0, r3
 8010d28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010d2c:	d8f2      	bhi.n	8010d14 <__lshift+0x70>
 8010d2e:	1b03      	subs	r3, r0, r4
 8010d30:	3b15      	subs	r3, #21
 8010d32:	f023 0303 	bic.w	r3, r3, #3
 8010d36:	3304      	adds	r3, #4
 8010d38:	f104 0215 	add.w	r2, r4, #21
 8010d3c:	4290      	cmp	r0, r2
 8010d3e:	bf38      	it	cc
 8010d40:	2304      	movcc	r3, #4
 8010d42:	f841 c003 	str.w	ip, [r1, r3]
 8010d46:	f1bc 0f00 	cmp.w	ip, #0
 8010d4a:	d001      	beq.n	8010d50 <__lshift+0xac>
 8010d4c:	f108 0602 	add.w	r6, r8, #2
 8010d50:	3e01      	subs	r6, #1
 8010d52:	4638      	mov	r0, r7
 8010d54:	4621      	mov	r1, r4
 8010d56:	612e      	str	r6, [r5, #16]
 8010d58:	f7ff fd8c 	bl	8010874 <_Bfree>
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d66:	3301      	adds	r3, #1
 8010d68:	e7c1      	b.n	8010cee <__lshift+0x4a>
 8010d6a:	3904      	subs	r1, #4
 8010d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d70:	4298      	cmp	r0, r3
 8010d72:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d76:	d8f9      	bhi.n	8010d6c <__lshift+0xc8>
 8010d78:	e7ea      	b.n	8010d50 <__lshift+0xac>
 8010d7a:	bf00      	nop
 8010d7c:	08034348 	.word	0x08034348
 8010d80:	08034438 	.word	0x08034438

08010d84 <__mcmp>:
 8010d84:	4603      	mov	r3, r0
 8010d86:	690a      	ldr	r2, [r1, #16]
 8010d88:	6900      	ldr	r0, [r0, #16]
 8010d8a:	b530      	push	{r4, r5, lr}
 8010d8c:	1a80      	subs	r0, r0, r2
 8010d8e:	d10d      	bne.n	8010dac <__mcmp+0x28>
 8010d90:	3314      	adds	r3, #20
 8010d92:	3114      	adds	r1, #20
 8010d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010da4:	4295      	cmp	r5, r2
 8010da6:	d002      	beq.n	8010dae <__mcmp+0x2a>
 8010da8:	d304      	bcc.n	8010db4 <__mcmp+0x30>
 8010daa:	2001      	movs	r0, #1
 8010dac:	bd30      	pop	{r4, r5, pc}
 8010dae:	42a3      	cmp	r3, r4
 8010db0:	d3f4      	bcc.n	8010d9c <__mcmp+0x18>
 8010db2:	e7fb      	b.n	8010dac <__mcmp+0x28>
 8010db4:	f04f 30ff 	mov.w	r0, #4294967295
 8010db8:	e7f8      	b.n	8010dac <__mcmp+0x28>
	...

08010dbc <__mdiff>:
 8010dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	460d      	mov	r5, r1
 8010dc2:	4607      	mov	r7, r0
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	4614      	mov	r4, r2
 8010dca:	f7ff ffdb 	bl	8010d84 <__mcmp>
 8010dce:	1e06      	subs	r6, r0, #0
 8010dd0:	d111      	bne.n	8010df6 <__mdiff+0x3a>
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4638      	mov	r0, r7
 8010dd6:	f7ff fd0d 	bl	80107f4 <_Balloc>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	b928      	cbnz	r0, 8010dea <__mdiff+0x2e>
 8010dde:	f240 2132 	movw	r1, #562	; 0x232
 8010de2:	4b3a      	ldr	r3, [pc, #232]	; (8010ecc <__mdiff+0x110>)
 8010de4:	483a      	ldr	r0, [pc, #232]	; (8010ed0 <__mdiff+0x114>)
 8010de6:	f7fe f8ad 	bl	800ef44 <__assert_func>
 8010dea:	2301      	movs	r3, #1
 8010dec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010df0:	4610      	mov	r0, r2
 8010df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df6:	bfa4      	itt	ge
 8010df8:	4623      	movge	r3, r4
 8010dfa:	462c      	movge	r4, r5
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	6861      	ldr	r1, [r4, #4]
 8010e00:	bfa6      	itte	ge
 8010e02:	461d      	movge	r5, r3
 8010e04:	2600      	movge	r6, #0
 8010e06:	2601      	movlt	r6, #1
 8010e08:	f7ff fcf4 	bl	80107f4 <_Balloc>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	b918      	cbnz	r0, 8010e18 <__mdiff+0x5c>
 8010e10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010e14:	4b2d      	ldr	r3, [pc, #180]	; (8010ecc <__mdiff+0x110>)
 8010e16:	e7e5      	b.n	8010de4 <__mdiff+0x28>
 8010e18:	f102 0814 	add.w	r8, r2, #20
 8010e1c:	46c2      	mov	sl, r8
 8010e1e:	f04f 0c00 	mov.w	ip, #0
 8010e22:	6927      	ldr	r7, [r4, #16]
 8010e24:	60c6      	str	r6, [r0, #12]
 8010e26:	692e      	ldr	r6, [r5, #16]
 8010e28:	f104 0014 	add.w	r0, r4, #20
 8010e2c:	f105 0914 	add.w	r9, r5, #20
 8010e30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e38:	3410      	adds	r4, #16
 8010e3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010e3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e42:	fa1f f18b 	uxth.w	r1, fp
 8010e46:	448c      	add	ip, r1
 8010e48:	b299      	uxth	r1, r3
 8010e4a:	0c1b      	lsrs	r3, r3, #16
 8010e4c:	ebac 0101 	sub.w	r1, ip, r1
 8010e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010e58:	b289      	uxth	r1, r1
 8010e5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010e5e:	454e      	cmp	r6, r9
 8010e60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010e64:	f84a 3b04 	str.w	r3, [sl], #4
 8010e68:	d8e7      	bhi.n	8010e3a <__mdiff+0x7e>
 8010e6a:	1b73      	subs	r3, r6, r5
 8010e6c:	3b15      	subs	r3, #21
 8010e6e:	f023 0303 	bic.w	r3, r3, #3
 8010e72:	3515      	adds	r5, #21
 8010e74:	3304      	adds	r3, #4
 8010e76:	42ae      	cmp	r6, r5
 8010e78:	bf38      	it	cc
 8010e7a:	2304      	movcc	r3, #4
 8010e7c:	4418      	add	r0, r3
 8010e7e:	4443      	add	r3, r8
 8010e80:	461e      	mov	r6, r3
 8010e82:	4605      	mov	r5, r0
 8010e84:	4575      	cmp	r5, lr
 8010e86:	d30e      	bcc.n	8010ea6 <__mdiff+0xea>
 8010e88:	f10e 0103 	add.w	r1, lr, #3
 8010e8c:	1a09      	subs	r1, r1, r0
 8010e8e:	f021 0103 	bic.w	r1, r1, #3
 8010e92:	3803      	subs	r0, #3
 8010e94:	4586      	cmp	lr, r0
 8010e96:	bf38      	it	cc
 8010e98:	2100      	movcc	r1, #0
 8010e9a:	4419      	add	r1, r3
 8010e9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010ea0:	b18b      	cbz	r3, 8010ec6 <__mdiff+0x10a>
 8010ea2:	6117      	str	r7, [r2, #16]
 8010ea4:	e7a4      	b.n	8010df0 <__mdiff+0x34>
 8010ea6:	f855 8b04 	ldr.w	r8, [r5], #4
 8010eaa:	fa1f f188 	uxth.w	r1, r8
 8010eae:	4461      	add	r1, ip
 8010eb0:	140c      	asrs	r4, r1, #16
 8010eb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eb6:	b289      	uxth	r1, r1
 8010eb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010ebc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010ec0:	f846 1b04 	str.w	r1, [r6], #4
 8010ec4:	e7de      	b.n	8010e84 <__mdiff+0xc8>
 8010ec6:	3f01      	subs	r7, #1
 8010ec8:	e7e8      	b.n	8010e9c <__mdiff+0xe0>
 8010eca:	bf00      	nop
 8010ecc:	08034348 	.word	0x08034348
 8010ed0:	08034438 	.word	0x08034438

08010ed4 <__ulp>:
 8010ed4:	4b11      	ldr	r3, [pc, #68]	; (8010f1c <__ulp+0x48>)
 8010ed6:	400b      	ands	r3, r1
 8010ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	dd02      	ble.n	8010ee6 <__ulp+0x12>
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4770      	bx	lr
 8010ee6:	425b      	negs	r3, r3
 8010ee8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010eec:	f04f 0000 	mov.w	r0, #0
 8010ef0:	f04f 0100 	mov.w	r1, #0
 8010ef4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010ef8:	da04      	bge.n	8010f04 <__ulp+0x30>
 8010efa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010efe:	fa43 f102 	asr.w	r1, r3, r2
 8010f02:	4770      	bx	lr
 8010f04:	f1a2 0314 	sub.w	r3, r2, #20
 8010f08:	2b1e      	cmp	r3, #30
 8010f0a:	bfd6      	itet	le
 8010f0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010f10:	2301      	movgt	r3, #1
 8010f12:	fa22 f303 	lsrle.w	r3, r2, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop
 8010f1c:	7ff00000 	.word	0x7ff00000

08010f20 <__b2d>:
 8010f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	6907      	ldr	r7, [r0, #16]
 8010f26:	f100 0914 	add.w	r9, r0, #20
 8010f2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8010f2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010f32:	f1a7 0804 	sub.w	r8, r7, #4
 8010f36:	4630      	mov	r0, r6
 8010f38:	f7ff fd4e 	bl	80109d8 <__hi0bits>
 8010f3c:	f1c0 0320 	rsb	r3, r0, #32
 8010f40:	280a      	cmp	r0, #10
 8010f42:	600b      	str	r3, [r1, #0]
 8010f44:	491f      	ldr	r1, [pc, #124]	; (8010fc4 <__b2d+0xa4>)
 8010f46:	dc17      	bgt.n	8010f78 <__b2d+0x58>
 8010f48:	45c1      	cmp	r9, r8
 8010f4a:	bf28      	it	cs
 8010f4c:	2200      	movcs	r2, #0
 8010f4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010f52:	fa26 f30c 	lsr.w	r3, r6, ip
 8010f56:	bf38      	it	cc
 8010f58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010f5c:	ea43 0501 	orr.w	r5, r3, r1
 8010f60:	f100 0315 	add.w	r3, r0, #21
 8010f64:	fa06 f303 	lsl.w	r3, r6, r3
 8010f68:	fa22 f20c 	lsr.w	r2, r2, ip
 8010f6c:	ea43 0402 	orr.w	r4, r3, r2
 8010f70:	4620      	mov	r0, r4
 8010f72:	4629      	mov	r1, r5
 8010f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f78:	45c1      	cmp	r9, r8
 8010f7a:	bf2e      	itee	cs
 8010f7c:	2200      	movcs	r2, #0
 8010f7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010f82:	f1a7 0808 	subcc.w	r8, r7, #8
 8010f86:	f1b0 030b 	subs.w	r3, r0, #11
 8010f8a:	d016      	beq.n	8010fba <__b2d+0x9a>
 8010f8c:	f1c3 0720 	rsb	r7, r3, #32
 8010f90:	fa22 f107 	lsr.w	r1, r2, r7
 8010f94:	45c8      	cmp	r8, r9
 8010f96:	fa06 f603 	lsl.w	r6, r6, r3
 8010f9a:	ea46 0601 	orr.w	r6, r6, r1
 8010f9e:	bf94      	ite	ls
 8010fa0:	2100      	movls	r1, #0
 8010fa2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010fa6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8010faa:	fa02 f003 	lsl.w	r0, r2, r3
 8010fae:	40f9      	lsrs	r1, r7
 8010fb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010fb4:	ea40 0401 	orr.w	r4, r0, r1
 8010fb8:	e7da      	b.n	8010f70 <__b2d+0x50>
 8010fba:	4614      	mov	r4, r2
 8010fbc:	ea46 0501 	orr.w	r5, r6, r1
 8010fc0:	e7d6      	b.n	8010f70 <__b2d+0x50>
 8010fc2:	bf00      	nop
 8010fc4:	3ff00000 	.word	0x3ff00000

08010fc8 <__d2b>:
 8010fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010fcc:	2101      	movs	r1, #1
 8010fce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010fd2:	4690      	mov	r8, r2
 8010fd4:	461d      	mov	r5, r3
 8010fd6:	f7ff fc0d 	bl	80107f4 <_Balloc>
 8010fda:	4604      	mov	r4, r0
 8010fdc:	b930      	cbnz	r0, 8010fec <__d2b+0x24>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	f240 310a 	movw	r1, #778	; 0x30a
 8010fe4:	4b24      	ldr	r3, [pc, #144]	; (8011078 <__d2b+0xb0>)
 8010fe6:	4825      	ldr	r0, [pc, #148]	; (801107c <__d2b+0xb4>)
 8010fe8:	f7fd ffac 	bl	800ef44 <__assert_func>
 8010fec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010ff0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010ff4:	bb2d      	cbnz	r5, 8011042 <__d2b+0x7a>
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8010ffc:	d026      	beq.n	801104c <__d2b+0x84>
 8010ffe:	4668      	mov	r0, sp
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	f7ff fd09 	bl	8010a18 <__lo0bits>
 8011006:	9900      	ldr	r1, [sp, #0]
 8011008:	b1f0      	cbz	r0, 8011048 <__d2b+0x80>
 801100a:	9a01      	ldr	r2, [sp, #4]
 801100c:	f1c0 0320 	rsb	r3, r0, #32
 8011010:	fa02 f303 	lsl.w	r3, r2, r3
 8011014:	430b      	orrs	r3, r1
 8011016:	40c2      	lsrs	r2, r0
 8011018:	6163      	str	r3, [r4, #20]
 801101a:	9201      	str	r2, [sp, #4]
 801101c:	9b01      	ldr	r3, [sp, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	bf14      	ite	ne
 8011022:	2102      	movne	r1, #2
 8011024:	2101      	moveq	r1, #1
 8011026:	61a3      	str	r3, [r4, #24]
 8011028:	6121      	str	r1, [r4, #16]
 801102a:	b1c5      	cbz	r5, 801105e <__d2b+0x96>
 801102c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011030:	4405      	add	r5, r0
 8011032:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011036:	603d      	str	r5, [r7, #0]
 8011038:	6030      	str	r0, [r6, #0]
 801103a:	4620      	mov	r0, r4
 801103c:	b002      	add	sp, #8
 801103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011046:	e7d6      	b.n	8010ff6 <__d2b+0x2e>
 8011048:	6161      	str	r1, [r4, #20]
 801104a:	e7e7      	b.n	801101c <__d2b+0x54>
 801104c:	a801      	add	r0, sp, #4
 801104e:	f7ff fce3 	bl	8010a18 <__lo0bits>
 8011052:	2101      	movs	r1, #1
 8011054:	9b01      	ldr	r3, [sp, #4]
 8011056:	6121      	str	r1, [r4, #16]
 8011058:	6163      	str	r3, [r4, #20]
 801105a:	3020      	adds	r0, #32
 801105c:	e7e5      	b.n	801102a <__d2b+0x62>
 801105e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8011062:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011066:	6038      	str	r0, [r7, #0]
 8011068:	6918      	ldr	r0, [r3, #16]
 801106a:	f7ff fcb5 	bl	80109d8 <__hi0bits>
 801106e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8011072:	6031      	str	r1, [r6, #0]
 8011074:	e7e1      	b.n	801103a <__d2b+0x72>
 8011076:	bf00      	nop
 8011078:	08034348 	.word	0x08034348
 801107c:	08034438 	.word	0x08034438

08011080 <__ratio>:
 8011080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	4688      	mov	r8, r1
 8011086:	4669      	mov	r1, sp
 8011088:	4681      	mov	r9, r0
 801108a:	f7ff ff49 	bl	8010f20 <__b2d>
 801108e:	460f      	mov	r7, r1
 8011090:	4604      	mov	r4, r0
 8011092:	460d      	mov	r5, r1
 8011094:	4640      	mov	r0, r8
 8011096:	a901      	add	r1, sp, #4
 8011098:	f7ff ff42 	bl	8010f20 <__b2d>
 801109c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80110a4:	468b      	mov	fp, r1
 80110a6:	eba3 0c02 	sub.w	ip, r3, r2
 80110aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110ae:	1a9b      	subs	r3, r3, r2
 80110b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	bfd5      	itete	le
 80110b8:	460a      	movle	r2, r1
 80110ba:	462a      	movgt	r2, r5
 80110bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80110c4:	bfd8      	it	le
 80110c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80110ca:	465b      	mov	r3, fp
 80110cc:	4602      	mov	r2, r0
 80110ce:	4639      	mov	r1, r7
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ef fb97 	bl	8000804 <__aeabi_ddiv>
 80110d6:	b003      	add	sp, #12
 80110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110dc <__copybits>:
 80110dc:	3901      	subs	r1, #1
 80110de:	b570      	push	{r4, r5, r6, lr}
 80110e0:	1149      	asrs	r1, r1, #5
 80110e2:	6914      	ldr	r4, [r2, #16]
 80110e4:	3101      	adds	r1, #1
 80110e6:	f102 0314 	add.w	r3, r2, #20
 80110ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80110f2:	1f05      	subs	r5, r0, #4
 80110f4:	42a3      	cmp	r3, r4
 80110f6:	d30c      	bcc.n	8011112 <__copybits+0x36>
 80110f8:	1aa3      	subs	r3, r4, r2
 80110fa:	3b11      	subs	r3, #17
 80110fc:	f023 0303 	bic.w	r3, r3, #3
 8011100:	3211      	adds	r2, #17
 8011102:	42a2      	cmp	r2, r4
 8011104:	bf88      	it	hi
 8011106:	2300      	movhi	r3, #0
 8011108:	4418      	add	r0, r3
 801110a:	2300      	movs	r3, #0
 801110c:	4288      	cmp	r0, r1
 801110e:	d305      	bcc.n	801111c <__copybits+0x40>
 8011110:	bd70      	pop	{r4, r5, r6, pc}
 8011112:	f853 6b04 	ldr.w	r6, [r3], #4
 8011116:	f845 6f04 	str.w	r6, [r5, #4]!
 801111a:	e7eb      	b.n	80110f4 <__copybits+0x18>
 801111c:	f840 3b04 	str.w	r3, [r0], #4
 8011120:	e7f4      	b.n	801110c <__copybits+0x30>

08011122 <__any_on>:
 8011122:	f100 0214 	add.w	r2, r0, #20
 8011126:	6900      	ldr	r0, [r0, #16]
 8011128:	114b      	asrs	r3, r1, #5
 801112a:	4298      	cmp	r0, r3
 801112c:	b510      	push	{r4, lr}
 801112e:	db11      	blt.n	8011154 <__any_on+0x32>
 8011130:	dd0a      	ble.n	8011148 <__any_on+0x26>
 8011132:	f011 011f 	ands.w	r1, r1, #31
 8011136:	d007      	beq.n	8011148 <__any_on+0x26>
 8011138:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801113c:	fa24 f001 	lsr.w	r0, r4, r1
 8011140:	fa00 f101 	lsl.w	r1, r0, r1
 8011144:	428c      	cmp	r4, r1
 8011146:	d10b      	bne.n	8011160 <__any_on+0x3e>
 8011148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801114c:	4293      	cmp	r3, r2
 801114e:	d803      	bhi.n	8011158 <__any_on+0x36>
 8011150:	2000      	movs	r0, #0
 8011152:	bd10      	pop	{r4, pc}
 8011154:	4603      	mov	r3, r0
 8011156:	e7f7      	b.n	8011148 <__any_on+0x26>
 8011158:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801115c:	2900      	cmp	r1, #0
 801115e:	d0f5      	beq.n	801114c <__any_on+0x2a>
 8011160:	2001      	movs	r0, #1
 8011162:	e7f6      	b.n	8011152 <__any_on+0x30>

08011164 <_calloc_r>:
 8011164:	b570      	push	{r4, r5, r6, lr}
 8011166:	fba1 5402 	umull	r5, r4, r1, r2
 801116a:	b934      	cbnz	r4, 801117a <_calloc_r+0x16>
 801116c:	4629      	mov	r1, r5
 801116e:	f000 f875 	bl	801125c <_malloc_r>
 8011172:	4606      	mov	r6, r0
 8011174:	b928      	cbnz	r0, 8011182 <_calloc_r+0x1e>
 8011176:	4630      	mov	r0, r6
 8011178:	bd70      	pop	{r4, r5, r6, pc}
 801117a:	220c      	movs	r2, #12
 801117c:	2600      	movs	r6, #0
 801117e:	6002      	str	r2, [r0, #0]
 8011180:	e7f9      	b.n	8011176 <_calloc_r+0x12>
 8011182:	462a      	mov	r2, r5
 8011184:	4621      	mov	r1, r4
 8011186:	f7fb ffcf 	bl	800d128 <memset>
 801118a:	e7f4      	b.n	8011176 <_calloc_r+0x12>

0801118c <_free_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4605      	mov	r5, r0
 8011190:	2900      	cmp	r1, #0
 8011192:	d040      	beq.n	8011216 <_free_r+0x8a>
 8011194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011198:	1f0c      	subs	r4, r1, #4
 801119a:	2b00      	cmp	r3, #0
 801119c:	bfb8      	it	lt
 801119e:	18e4      	addlt	r4, r4, r3
 80111a0:	f000 fcaa 	bl	8011af8 <__malloc_lock>
 80111a4:	4a1c      	ldr	r2, [pc, #112]	; (8011218 <_free_r+0x8c>)
 80111a6:	6813      	ldr	r3, [r2, #0]
 80111a8:	b933      	cbnz	r3, 80111b8 <_free_r+0x2c>
 80111aa:	6063      	str	r3, [r4, #4]
 80111ac:	6014      	str	r4, [r2, #0]
 80111ae:	4628      	mov	r0, r5
 80111b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111b4:	f000 bca6 	b.w	8011b04 <__malloc_unlock>
 80111b8:	42a3      	cmp	r3, r4
 80111ba:	d908      	bls.n	80111ce <_free_r+0x42>
 80111bc:	6820      	ldr	r0, [r4, #0]
 80111be:	1821      	adds	r1, r4, r0
 80111c0:	428b      	cmp	r3, r1
 80111c2:	bf01      	itttt	eq
 80111c4:	6819      	ldreq	r1, [r3, #0]
 80111c6:	685b      	ldreq	r3, [r3, #4]
 80111c8:	1809      	addeq	r1, r1, r0
 80111ca:	6021      	streq	r1, [r4, #0]
 80111cc:	e7ed      	b.n	80111aa <_free_r+0x1e>
 80111ce:	461a      	mov	r2, r3
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	b10b      	cbz	r3, 80111d8 <_free_r+0x4c>
 80111d4:	42a3      	cmp	r3, r4
 80111d6:	d9fa      	bls.n	80111ce <_free_r+0x42>
 80111d8:	6811      	ldr	r1, [r2, #0]
 80111da:	1850      	adds	r0, r2, r1
 80111dc:	42a0      	cmp	r0, r4
 80111de:	d10b      	bne.n	80111f8 <_free_r+0x6c>
 80111e0:	6820      	ldr	r0, [r4, #0]
 80111e2:	4401      	add	r1, r0
 80111e4:	1850      	adds	r0, r2, r1
 80111e6:	4283      	cmp	r3, r0
 80111e8:	6011      	str	r1, [r2, #0]
 80111ea:	d1e0      	bne.n	80111ae <_free_r+0x22>
 80111ec:	6818      	ldr	r0, [r3, #0]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	4401      	add	r1, r0
 80111f2:	6011      	str	r1, [r2, #0]
 80111f4:	6053      	str	r3, [r2, #4]
 80111f6:	e7da      	b.n	80111ae <_free_r+0x22>
 80111f8:	d902      	bls.n	8011200 <_free_r+0x74>
 80111fa:	230c      	movs	r3, #12
 80111fc:	602b      	str	r3, [r5, #0]
 80111fe:	e7d6      	b.n	80111ae <_free_r+0x22>
 8011200:	6820      	ldr	r0, [r4, #0]
 8011202:	1821      	adds	r1, r4, r0
 8011204:	428b      	cmp	r3, r1
 8011206:	bf01      	itttt	eq
 8011208:	6819      	ldreq	r1, [r3, #0]
 801120a:	685b      	ldreq	r3, [r3, #4]
 801120c:	1809      	addeq	r1, r1, r0
 801120e:	6021      	streq	r1, [r4, #0]
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	6054      	str	r4, [r2, #4]
 8011214:	e7cb      	b.n	80111ae <_free_r+0x22>
 8011216:	bd38      	pop	{r3, r4, r5, pc}
 8011218:	200045d0 	.word	0x200045d0

0801121c <sbrk_aligned>:
 801121c:	b570      	push	{r4, r5, r6, lr}
 801121e:	4e0e      	ldr	r6, [pc, #56]	; (8011258 <sbrk_aligned+0x3c>)
 8011220:	460c      	mov	r4, r1
 8011222:	6831      	ldr	r1, [r6, #0]
 8011224:	4605      	mov	r5, r0
 8011226:	b911      	cbnz	r1, 801122e <sbrk_aligned+0x12>
 8011228:	f000 fb8e 	bl	8011948 <_sbrk_r>
 801122c:	6030      	str	r0, [r6, #0]
 801122e:	4621      	mov	r1, r4
 8011230:	4628      	mov	r0, r5
 8011232:	f000 fb89 	bl	8011948 <_sbrk_r>
 8011236:	1c43      	adds	r3, r0, #1
 8011238:	d00a      	beq.n	8011250 <sbrk_aligned+0x34>
 801123a:	1cc4      	adds	r4, r0, #3
 801123c:	f024 0403 	bic.w	r4, r4, #3
 8011240:	42a0      	cmp	r0, r4
 8011242:	d007      	beq.n	8011254 <sbrk_aligned+0x38>
 8011244:	1a21      	subs	r1, r4, r0
 8011246:	4628      	mov	r0, r5
 8011248:	f000 fb7e 	bl	8011948 <_sbrk_r>
 801124c:	3001      	adds	r0, #1
 801124e:	d101      	bne.n	8011254 <sbrk_aligned+0x38>
 8011250:	f04f 34ff 	mov.w	r4, #4294967295
 8011254:	4620      	mov	r0, r4
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	200045d4 	.word	0x200045d4

0801125c <_malloc_r>:
 801125c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011260:	1ccd      	adds	r5, r1, #3
 8011262:	f025 0503 	bic.w	r5, r5, #3
 8011266:	3508      	adds	r5, #8
 8011268:	2d0c      	cmp	r5, #12
 801126a:	bf38      	it	cc
 801126c:	250c      	movcc	r5, #12
 801126e:	2d00      	cmp	r5, #0
 8011270:	4607      	mov	r7, r0
 8011272:	db01      	blt.n	8011278 <_malloc_r+0x1c>
 8011274:	42a9      	cmp	r1, r5
 8011276:	d905      	bls.n	8011284 <_malloc_r+0x28>
 8011278:	230c      	movs	r3, #12
 801127a:	2600      	movs	r6, #0
 801127c:	603b      	str	r3, [r7, #0]
 801127e:	4630      	mov	r0, r6
 8011280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011284:	4e2e      	ldr	r6, [pc, #184]	; (8011340 <_malloc_r+0xe4>)
 8011286:	f000 fc37 	bl	8011af8 <__malloc_lock>
 801128a:	6833      	ldr	r3, [r6, #0]
 801128c:	461c      	mov	r4, r3
 801128e:	bb34      	cbnz	r4, 80112de <_malloc_r+0x82>
 8011290:	4629      	mov	r1, r5
 8011292:	4638      	mov	r0, r7
 8011294:	f7ff ffc2 	bl	801121c <sbrk_aligned>
 8011298:	1c43      	adds	r3, r0, #1
 801129a:	4604      	mov	r4, r0
 801129c:	d14d      	bne.n	801133a <_malloc_r+0xde>
 801129e:	6834      	ldr	r4, [r6, #0]
 80112a0:	4626      	mov	r6, r4
 80112a2:	2e00      	cmp	r6, #0
 80112a4:	d140      	bne.n	8011328 <_malloc_r+0xcc>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	4631      	mov	r1, r6
 80112aa:	4638      	mov	r0, r7
 80112ac:	eb04 0803 	add.w	r8, r4, r3
 80112b0:	f000 fb4a 	bl	8011948 <_sbrk_r>
 80112b4:	4580      	cmp	r8, r0
 80112b6:	d13a      	bne.n	801132e <_malloc_r+0xd2>
 80112b8:	6821      	ldr	r1, [r4, #0]
 80112ba:	3503      	adds	r5, #3
 80112bc:	1a6d      	subs	r5, r5, r1
 80112be:	f025 0503 	bic.w	r5, r5, #3
 80112c2:	3508      	adds	r5, #8
 80112c4:	2d0c      	cmp	r5, #12
 80112c6:	bf38      	it	cc
 80112c8:	250c      	movcc	r5, #12
 80112ca:	4638      	mov	r0, r7
 80112cc:	4629      	mov	r1, r5
 80112ce:	f7ff ffa5 	bl	801121c <sbrk_aligned>
 80112d2:	3001      	adds	r0, #1
 80112d4:	d02b      	beq.n	801132e <_malloc_r+0xd2>
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	442b      	add	r3, r5
 80112da:	6023      	str	r3, [r4, #0]
 80112dc:	e00e      	b.n	80112fc <_malloc_r+0xa0>
 80112de:	6822      	ldr	r2, [r4, #0]
 80112e0:	1b52      	subs	r2, r2, r5
 80112e2:	d41e      	bmi.n	8011322 <_malloc_r+0xc6>
 80112e4:	2a0b      	cmp	r2, #11
 80112e6:	d916      	bls.n	8011316 <_malloc_r+0xba>
 80112e8:	1961      	adds	r1, r4, r5
 80112ea:	42a3      	cmp	r3, r4
 80112ec:	6025      	str	r5, [r4, #0]
 80112ee:	bf18      	it	ne
 80112f0:	6059      	strne	r1, [r3, #4]
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	bf08      	it	eq
 80112f6:	6031      	streq	r1, [r6, #0]
 80112f8:	5162      	str	r2, [r4, r5]
 80112fa:	604b      	str	r3, [r1, #4]
 80112fc:	4638      	mov	r0, r7
 80112fe:	f104 060b 	add.w	r6, r4, #11
 8011302:	f000 fbff 	bl	8011b04 <__malloc_unlock>
 8011306:	f026 0607 	bic.w	r6, r6, #7
 801130a:	1d23      	adds	r3, r4, #4
 801130c:	1af2      	subs	r2, r6, r3
 801130e:	d0b6      	beq.n	801127e <_malloc_r+0x22>
 8011310:	1b9b      	subs	r3, r3, r6
 8011312:	50a3      	str	r3, [r4, r2]
 8011314:	e7b3      	b.n	801127e <_malloc_r+0x22>
 8011316:	6862      	ldr	r2, [r4, #4]
 8011318:	42a3      	cmp	r3, r4
 801131a:	bf0c      	ite	eq
 801131c:	6032      	streq	r2, [r6, #0]
 801131e:	605a      	strne	r2, [r3, #4]
 8011320:	e7ec      	b.n	80112fc <_malloc_r+0xa0>
 8011322:	4623      	mov	r3, r4
 8011324:	6864      	ldr	r4, [r4, #4]
 8011326:	e7b2      	b.n	801128e <_malloc_r+0x32>
 8011328:	4634      	mov	r4, r6
 801132a:	6876      	ldr	r6, [r6, #4]
 801132c:	e7b9      	b.n	80112a2 <_malloc_r+0x46>
 801132e:	230c      	movs	r3, #12
 8011330:	4638      	mov	r0, r7
 8011332:	603b      	str	r3, [r7, #0]
 8011334:	f000 fbe6 	bl	8011b04 <__malloc_unlock>
 8011338:	e7a1      	b.n	801127e <_malloc_r+0x22>
 801133a:	6025      	str	r5, [r4, #0]
 801133c:	e7de      	b.n	80112fc <_malloc_r+0xa0>
 801133e:	bf00      	nop
 8011340:	200045d0 	.word	0x200045d0

08011344 <__ssputs_r>:
 8011344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011348:	688e      	ldr	r6, [r1, #8]
 801134a:	4682      	mov	sl, r0
 801134c:	429e      	cmp	r6, r3
 801134e:	460c      	mov	r4, r1
 8011350:	4690      	mov	r8, r2
 8011352:	461f      	mov	r7, r3
 8011354:	d838      	bhi.n	80113c8 <__ssputs_r+0x84>
 8011356:	898a      	ldrh	r2, [r1, #12]
 8011358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801135c:	d032      	beq.n	80113c4 <__ssputs_r+0x80>
 801135e:	6825      	ldr	r5, [r4, #0]
 8011360:	6909      	ldr	r1, [r1, #16]
 8011362:	3301      	adds	r3, #1
 8011364:	eba5 0901 	sub.w	r9, r5, r1
 8011368:	6965      	ldr	r5, [r4, #20]
 801136a:	444b      	add	r3, r9
 801136c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011374:	106d      	asrs	r5, r5, #1
 8011376:	429d      	cmp	r5, r3
 8011378:	bf38      	it	cc
 801137a:	461d      	movcc	r5, r3
 801137c:	0553      	lsls	r3, r2, #21
 801137e:	d531      	bpl.n	80113e4 <__ssputs_r+0xa0>
 8011380:	4629      	mov	r1, r5
 8011382:	f7ff ff6b 	bl	801125c <_malloc_r>
 8011386:	4606      	mov	r6, r0
 8011388:	b950      	cbnz	r0, 80113a0 <__ssputs_r+0x5c>
 801138a:	230c      	movs	r3, #12
 801138c:	f04f 30ff 	mov.w	r0, #4294967295
 8011390:	f8ca 3000 	str.w	r3, [sl]
 8011394:	89a3      	ldrh	r3, [r4, #12]
 8011396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801139a:	81a3      	strh	r3, [r4, #12]
 801139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a0:	464a      	mov	r2, r9
 80113a2:	6921      	ldr	r1, [r4, #16]
 80113a4:	f7fb feb2 	bl	800d10c <memcpy>
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113b2:	81a3      	strh	r3, [r4, #12]
 80113b4:	6126      	str	r6, [r4, #16]
 80113b6:	444e      	add	r6, r9
 80113b8:	6026      	str	r6, [r4, #0]
 80113ba:	463e      	mov	r6, r7
 80113bc:	6165      	str	r5, [r4, #20]
 80113be:	eba5 0509 	sub.w	r5, r5, r9
 80113c2:	60a5      	str	r5, [r4, #8]
 80113c4:	42be      	cmp	r6, r7
 80113c6:	d900      	bls.n	80113ca <__ssputs_r+0x86>
 80113c8:	463e      	mov	r6, r7
 80113ca:	4632      	mov	r2, r6
 80113cc:	4641      	mov	r1, r8
 80113ce:	6820      	ldr	r0, [r4, #0]
 80113d0:	f000 fb78 	bl	8011ac4 <memmove>
 80113d4:	68a3      	ldr	r3, [r4, #8]
 80113d6:	2000      	movs	r0, #0
 80113d8:	1b9b      	subs	r3, r3, r6
 80113da:	60a3      	str	r3, [r4, #8]
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	4433      	add	r3, r6
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	e7db      	b.n	801139c <__ssputs_r+0x58>
 80113e4:	462a      	mov	r2, r5
 80113e6:	f000 fb93 	bl	8011b10 <_realloc_r>
 80113ea:	4606      	mov	r6, r0
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d1e1      	bne.n	80113b4 <__ssputs_r+0x70>
 80113f0:	4650      	mov	r0, sl
 80113f2:	6921      	ldr	r1, [r4, #16]
 80113f4:	f7ff feca 	bl	801118c <_free_r>
 80113f8:	e7c7      	b.n	801138a <__ssputs_r+0x46>
	...

080113fc <_svfiprintf_r>:
 80113fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011400:	4698      	mov	r8, r3
 8011402:	898b      	ldrh	r3, [r1, #12]
 8011404:	4607      	mov	r7, r0
 8011406:	061b      	lsls	r3, r3, #24
 8011408:	460d      	mov	r5, r1
 801140a:	4614      	mov	r4, r2
 801140c:	b09d      	sub	sp, #116	; 0x74
 801140e:	d50e      	bpl.n	801142e <_svfiprintf_r+0x32>
 8011410:	690b      	ldr	r3, [r1, #16]
 8011412:	b963      	cbnz	r3, 801142e <_svfiprintf_r+0x32>
 8011414:	2140      	movs	r1, #64	; 0x40
 8011416:	f7ff ff21 	bl	801125c <_malloc_r>
 801141a:	6028      	str	r0, [r5, #0]
 801141c:	6128      	str	r0, [r5, #16]
 801141e:	b920      	cbnz	r0, 801142a <_svfiprintf_r+0x2e>
 8011420:	230c      	movs	r3, #12
 8011422:	603b      	str	r3, [r7, #0]
 8011424:	f04f 30ff 	mov.w	r0, #4294967295
 8011428:	e0d1      	b.n	80115ce <_svfiprintf_r+0x1d2>
 801142a:	2340      	movs	r3, #64	; 0x40
 801142c:	616b      	str	r3, [r5, #20]
 801142e:	2300      	movs	r3, #0
 8011430:	9309      	str	r3, [sp, #36]	; 0x24
 8011432:	2320      	movs	r3, #32
 8011434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011438:	2330      	movs	r3, #48	; 0x30
 801143a:	f04f 0901 	mov.w	r9, #1
 801143e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80115e8 <_svfiprintf_r+0x1ec>
 8011446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801144a:	4623      	mov	r3, r4
 801144c:	469a      	mov	sl, r3
 801144e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011452:	b10a      	cbz	r2, 8011458 <_svfiprintf_r+0x5c>
 8011454:	2a25      	cmp	r2, #37	; 0x25
 8011456:	d1f9      	bne.n	801144c <_svfiprintf_r+0x50>
 8011458:	ebba 0b04 	subs.w	fp, sl, r4
 801145c:	d00b      	beq.n	8011476 <_svfiprintf_r+0x7a>
 801145e:	465b      	mov	r3, fp
 8011460:	4622      	mov	r2, r4
 8011462:	4629      	mov	r1, r5
 8011464:	4638      	mov	r0, r7
 8011466:	f7ff ff6d 	bl	8011344 <__ssputs_r>
 801146a:	3001      	adds	r0, #1
 801146c:	f000 80aa 	beq.w	80115c4 <_svfiprintf_r+0x1c8>
 8011470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011472:	445a      	add	r2, fp
 8011474:	9209      	str	r2, [sp, #36]	; 0x24
 8011476:	f89a 3000 	ldrb.w	r3, [sl]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 80a2 	beq.w	80115c4 <_svfiprintf_r+0x1c8>
 8011480:	2300      	movs	r3, #0
 8011482:	f04f 32ff 	mov.w	r2, #4294967295
 8011486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801148a:	f10a 0a01 	add.w	sl, sl, #1
 801148e:	9304      	str	r3, [sp, #16]
 8011490:	9307      	str	r3, [sp, #28]
 8011492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011496:	931a      	str	r3, [sp, #104]	; 0x68
 8011498:	4654      	mov	r4, sl
 801149a:	2205      	movs	r2, #5
 801149c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114a0:	4851      	ldr	r0, [pc, #324]	; (80115e8 <_svfiprintf_r+0x1ec>)
 80114a2:	f7ff f999 	bl	80107d8 <memchr>
 80114a6:	9a04      	ldr	r2, [sp, #16]
 80114a8:	b9d8      	cbnz	r0, 80114e2 <_svfiprintf_r+0xe6>
 80114aa:	06d0      	lsls	r0, r2, #27
 80114ac:	bf44      	itt	mi
 80114ae:	2320      	movmi	r3, #32
 80114b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114b4:	0711      	lsls	r1, r2, #28
 80114b6:	bf44      	itt	mi
 80114b8:	232b      	movmi	r3, #43	; 0x2b
 80114ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114be:	f89a 3000 	ldrb.w	r3, [sl]
 80114c2:	2b2a      	cmp	r3, #42	; 0x2a
 80114c4:	d015      	beq.n	80114f2 <_svfiprintf_r+0xf6>
 80114c6:	4654      	mov	r4, sl
 80114c8:	2000      	movs	r0, #0
 80114ca:	f04f 0c0a 	mov.w	ip, #10
 80114ce:	9a07      	ldr	r2, [sp, #28]
 80114d0:	4621      	mov	r1, r4
 80114d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114d6:	3b30      	subs	r3, #48	; 0x30
 80114d8:	2b09      	cmp	r3, #9
 80114da:	d94e      	bls.n	801157a <_svfiprintf_r+0x17e>
 80114dc:	b1b0      	cbz	r0, 801150c <_svfiprintf_r+0x110>
 80114de:	9207      	str	r2, [sp, #28]
 80114e0:	e014      	b.n	801150c <_svfiprintf_r+0x110>
 80114e2:	eba0 0308 	sub.w	r3, r0, r8
 80114e6:	fa09 f303 	lsl.w	r3, r9, r3
 80114ea:	4313      	orrs	r3, r2
 80114ec:	46a2      	mov	sl, r4
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	e7d2      	b.n	8011498 <_svfiprintf_r+0x9c>
 80114f2:	9b03      	ldr	r3, [sp, #12]
 80114f4:	1d19      	adds	r1, r3, #4
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	9103      	str	r1, [sp, #12]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	bfbb      	ittet	lt
 80114fe:	425b      	neglt	r3, r3
 8011500:	f042 0202 	orrlt.w	r2, r2, #2
 8011504:	9307      	strge	r3, [sp, #28]
 8011506:	9307      	strlt	r3, [sp, #28]
 8011508:	bfb8      	it	lt
 801150a:	9204      	strlt	r2, [sp, #16]
 801150c:	7823      	ldrb	r3, [r4, #0]
 801150e:	2b2e      	cmp	r3, #46	; 0x2e
 8011510:	d10c      	bne.n	801152c <_svfiprintf_r+0x130>
 8011512:	7863      	ldrb	r3, [r4, #1]
 8011514:	2b2a      	cmp	r3, #42	; 0x2a
 8011516:	d135      	bne.n	8011584 <_svfiprintf_r+0x188>
 8011518:	9b03      	ldr	r3, [sp, #12]
 801151a:	3402      	adds	r4, #2
 801151c:	1d1a      	adds	r2, r3, #4
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	9203      	str	r2, [sp, #12]
 8011522:	2b00      	cmp	r3, #0
 8011524:	bfb8      	it	lt
 8011526:	f04f 33ff 	movlt.w	r3, #4294967295
 801152a:	9305      	str	r3, [sp, #20]
 801152c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80115ec <_svfiprintf_r+0x1f0>
 8011530:	2203      	movs	r2, #3
 8011532:	4650      	mov	r0, sl
 8011534:	7821      	ldrb	r1, [r4, #0]
 8011536:	f7ff f94f 	bl	80107d8 <memchr>
 801153a:	b140      	cbz	r0, 801154e <_svfiprintf_r+0x152>
 801153c:	2340      	movs	r3, #64	; 0x40
 801153e:	eba0 000a 	sub.w	r0, r0, sl
 8011542:	fa03 f000 	lsl.w	r0, r3, r0
 8011546:	9b04      	ldr	r3, [sp, #16]
 8011548:	3401      	adds	r4, #1
 801154a:	4303      	orrs	r3, r0
 801154c:	9304      	str	r3, [sp, #16]
 801154e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011552:	2206      	movs	r2, #6
 8011554:	4826      	ldr	r0, [pc, #152]	; (80115f0 <_svfiprintf_r+0x1f4>)
 8011556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801155a:	f7ff f93d 	bl	80107d8 <memchr>
 801155e:	2800      	cmp	r0, #0
 8011560:	d038      	beq.n	80115d4 <_svfiprintf_r+0x1d8>
 8011562:	4b24      	ldr	r3, [pc, #144]	; (80115f4 <_svfiprintf_r+0x1f8>)
 8011564:	bb1b      	cbnz	r3, 80115ae <_svfiprintf_r+0x1b2>
 8011566:	9b03      	ldr	r3, [sp, #12]
 8011568:	3307      	adds	r3, #7
 801156a:	f023 0307 	bic.w	r3, r3, #7
 801156e:	3308      	adds	r3, #8
 8011570:	9303      	str	r3, [sp, #12]
 8011572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011574:	4433      	add	r3, r6
 8011576:	9309      	str	r3, [sp, #36]	; 0x24
 8011578:	e767      	b.n	801144a <_svfiprintf_r+0x4e>
 801157a:	460c      	mov	r4, r1
 801157c:	2001      	movs	r0, #1
 801157e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011582:	e7a5      	b.n	80114d0 <_svfiprintf_r+0xd4>
 8011584:	2300      	movs	r3, #0
 8011586:	f04f 0c0a 	mov.w	ip, #10
 801158a:	4619      	mov	r1, r3
 801158c:	3401      	adds	r4, #1
 801158e:	9305      	str	r3, [sp, #20]
 8011590:	4620      	mov	r0, r4
 8011592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011596:	3a30      	subs	r2, #48	; 0x30
 8011598:	2a09      	cmp	r2, #9
 801159a:	d903      	bls.n	80115a4 <_svfiprintf_r+0x1a8>
 801159c:	2b00      	cmp	r3, #0
 801159e:	d0c5      	beq.n	801152c <_svfiprintf_r+0x130>
 80115a0:	9105      	str	r1, [sp, #20]
 80115a2:	e7c3      	b.n	801152c <_svfiprintf_r+0x130>
 80115a4:	4604      	mov	r4, r0
 80115a6:	2301      	movs	r3, #1
 80115a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80115ac:	e7f0      	b.n	8011590 <_svfiprintf_r+0x194>
 80115ae:	ab03      	add	r3, sp, #12
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	462a      	mov	r2, r5
 80115b4:	4638      	mov	r0, r7
 80115b6:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <_svfiprintf_r+0x1fc>)
 80115b8:	a904      	add	r1, sp, #16
 80115ba:	f7fb fe5b 	bl	800d274 <_printf_float>
 80115be:	1c42      	adds	r2, r0, #1
 80115c0:	4606      	mov	r6, r0
 80115c2:	d1d6      	bne.n	8011572 <_svfiprintf_r+0x176>
 80115c4:	89ab      	ldrh	r3, [r5, #12]
 80115c6:	065b      	lsls	r3, r3, #25
 80115c8:	f53f af2c 	bmi.w	8011424 <_svfiprintf_r+0x28>
 80115cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115ce:	b01d      	add	sp, #116	; 0x74
 80115d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d4:	ab03      	add	r3, sp, #12
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	462a      	mov	r2, r5
 80115da:	4638      	mov	r0, r7
 80115dc:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <_svfiprintf_r+0x1fc>)
 80115de:	a904      	add	r1, sp, #16
 80115e0:	f7fc f8e4 	bl	800d7ac <_printf_i>
 80115e4:	e7eb      	b.n	80115be <_svfiprintf_r+0x1c2>
 80115e6:	bf00      	nop
 80115e8:	08034594 	.word	0x08034594
 80115ec:	0803459a 	.word	0x0803459a
 80115f0:	0803459e 	.word	0x0803459e
 80115f4:	0800d275 	.word	0x0800d275
 80115f8:	08011345 	.word	0x08011345

080115fc <__sfputc_r>:
 80115fc:	6893      	ldr	r3, [r2, #8]
 80115fe:	b410      	push	{r4}
 8011600:	3b01      	subs	r3, #1
 8011602:	2b00      	cmp	r3, #0
 8011604:	6093      	str	r3, [r2, #8]
 8011606:	da07      	bge.n	8011618 <__sfputc_r+0x1c>
 8011608:	6994      	ldr	r4, [r2, #24]
 801160a:	42a3      	cmp	r3, r4
 801160c:	db01      	blt.n	8011612 <__sfputc_r+0x16>
 801160e:	290a      	cmp	r1, #10
 8011610:	d102      	bne.n	8011618 <__sfputc_r+0x1c>
 8011612:	bc10      	pop	{r4}
 8011614:	f7fd bbd6 	b.w	800edc4 <__swbuf_r>
 8011618:	6813      	ldr	r3, [r2, #0]
 801161a:	1c58      	adds	r0, r3, #1
 801161c:	6010      	str	r0, [r2, #0]
 801161e:	7019      	strb	r1, [r3, #0]
 8011620:	4608      	mov	r0, r1
 8011622:	bc10      	pop	{r4}
 8011624:	4770      	bx	lr

08011626 <__sfputs_r>:
 8011626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011628:	4606      	mov	r6, r0
 801162a:	460f      	mov	r7, r1
 801162c:	4614      	mov	r4, r2
 801162e:	18d5      	adds	r5, r2, r3
 8011630:	42ac      	cmp	r4, r5
 8011632:	d101      	bne.n	8011638 <__sfputs_r+0x12>
 8011634:	2000      	movs	r0, #0
 8011636:	e007      	b.n	8011648 <__sfputs_r+0x22>
 8011638:	463a      	mov	r2, r7
 801163a:	4630      	mov	r0, r6
 801163c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011640:	f7ff ffdc 	bl	80115fc <__sfputc_r>
 8011644:	1c43      	adds	r3, r0, #1
 8011646:	d1f3      	bne.n	8011630 <__sfputs_r+0xa>
 8011648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801164c <_vfiprintf_r>:
 801164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	460d      	mov	r5, r1
 8011652:	4614      	mov	r4, r2
 8011654:	4698      	mov	r8, r3
 8011656:	4606      	mov	r6, r0
 8011658:	b09d      	sub	sp, #116	; 0x74
 801165a:	b118      	cbz	r0, 8011664 <_vfiprintf_r+0x18>
 801165c:	6983      	ldr	r3, [r0, #24]
 801165e:	b90b      	cbnz	r3, 8011664 <_vfiprintf_r+0x18>
 8011660:	f7fe fc1e 	bl	800fea0 <__sinit>
 8011664:	4b89      	ldr	r3, [pc, #548]	; (801188c <_vfiprintf_r+0x240>)
 8011666:	429d      	cmp	r5, r3
 8011668:	d11b      	bne.n	80116a2 <_vfiprintf_r+0x56>
 801166a:	6875      	ldr	r5, [r6, #4]
 801166c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801166e:	07d9      	lsls	r1, r3, #31
 8011670:	d405      	bmi.n	801167e <_vfiprintf_r+0x32>
 8011672:	89ab      	ldrh	r3, [r5, #12]
 8011674:	059a      	lsls	r2, r3, #22
 8011676:	d402      	bmi.n	801167e <_vfiprintf_r+0x32>
 8011678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801167a:	f7ff f82c 	bl	80106d6 <__retarget_lock_acquire_recursive>
 801167e:	89ab      	ldrh	r3, [r5, #12]
 8011680:	071b      	lsls	r3, r3, #28
 8011682:	d501      	bpl.n	8011688 <_vfiprintf_r+0x3c>
 8011684:	692b      	ldr	r3, [r5, #16]
 8011686:	b9eb      	cbnz	r3, 80116c4 <_vfiprintf_r+0x78>
 8011688:	4629      	mov	r1, r5
 801168a:	4630      	mov	r0, r6
 801168c:	f7fd fbec 	bl	800ee68 <__swsetup_r>
 8011690:	b1c0      	cbz	r0, 80116c4 <_vfiprintf_r+0x78>
 8011692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011694:	07dc      	lsls	r4, r3, #31
 8011696:	d50e      	bpl.n	80116b6 <_vfiprintf_r+0x6a>
 8011698:	f04f 30ff 	mov.w	r0, #4294967295
 801169c:	b01d      	add	sp, #116	; 0x74
 801169e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a2:	4b7b      	ldr	r3, [pc, #492]	; (8011890 <_vfiprintf_r+0x244>)
 80116a4:	429d      	cmp	r5, r3
 80116a6:	d101      	bne.n	80116ac <_vfiprintf_r+0x60>
 80116a8:	68b5      	ldr	r5, [r6, #8]
 80116aa:	e7df      	b.n	801166c <_vfiprintf_r+0x20>
 80116ac:	4b79      	ldr	r3, [pc, #484]	; (8011894 <_vfiprintf_r+0x248>)
 80116ae:	429d      	cmp	r5, r3
 80116b0:	bf08      	it	eq
 80116b2:	68f5      	ldreq	r5, [r6, #12]
 80116b4:	e7da      	b.n	801166c <_vfiprintf_r+0x20>
 80116b6:	89ab      	ldrh	r3, [r5, #12]
 80116b8:	0598      	lsls	r0, r3, #22
 80116ba:	d4ed      	bmi.n	8011698 <_vfiprintf_r+0x4c>
 80116bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116be:	f7ff f80b 	bl	80106d8 <__retarget_lock_release_recursive>
 80116c2:	e7e9      	b.n	8011698 <_vfiprintf_r+0x4c>
 80116c4:	2300      	movs	r3, #0
 80116c6:	9309      	str	r3, [sp, #36]	; 0x24
 80116c8:	2320      	movs	r3, #32
 80116ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116ce:	2330      	movs	r3, #48	; 0x30
 80116d0:	f04f 0901 	mov.w	r9, #1
 80116d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80116d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011898 <_vfiprintf_r+0x24c>
 80116dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116e0:	4623      	mov	r3, r4
 80116e2:	469a      	mov	sl, r3
 80116e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116e8:	b10a      	cbz	r2, 80116ee <_vfiprintf_r+0xa2>
 80116ea:	2a25      	cmp	r2, #37	; 0x25
 80116ec:	d1f9      	bne.n	80116e2 <_vfiprintf_r+0x96>
 80116ee:	ebba 0b04 	subs.w	fp, sl, r4
 80116f2:	d00b      	beq.n	801170c <_vfiprintf_r+0xc0>
 80116f4:	465b      	mov	r3, fp
 80116f6:	4622      	mov	r2, r4
 80116f8:	4629      	mov	r1, r5
 80116fa:	4630      	mov	r0, r6
 80116fc:	f7ff ff93 	bl	8011626 <__sfputs_r>
 8011700:	3001      	adds	r0, #1
 8011702:	f000 80aa 	beq.w	801185a <_vfiprintf_r+0x20e>
 8011706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011708:	445a      	add	r2, fp
 801170a:	9209      	str	r2, [sp, #36]	; 0x24
 801170c:	f89a 3000 	ldrb.w	r3, [sl]
 8011710:	2b00      	cmp	r3, #0
 8011712:	f000 80a2 	beq.w	801185a <_vfiprintf_r+0x20e>
 8011716:	2300      	movs	r3, #0
 8011718:	f04f 32ff 	mov.w	r2, #4294967295
 801171c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011720:	f10a 0a01 	add.w	sl, sl, #1
 8011724:	9304      	str	r3, [sp, #16]
 8011726:	9307      	str	r3, [sp, #28]
 8011728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801172c:	931a      	str	r3, [sp, #104]	; 0x68
 801172e:	4654      	mov	r4, sl
 8011730:	2205      	movs	r2, #5
 8011732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011736:	4858      	ldr	r0, [pc, #352]	; (8011898 <_vfiprintf_r+0x24c>)
 8011738:	f7ff f84e 	bl	80107d8 <memchr>
 801173c:	9a04      	ldr	r2, [sp, #16]
 801173e:	b9d8      	cbnz	r0, 8011778 <_vfiprintf_r+0x12c>
 8011740:	06d1      	lsls	r1, r2, #27
 8011742:	bf44      	itt	mi
 8011744:	2320      	movmi	r3, #32
 8011746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801174a:	0713      	lsls	r3, r2, #28
 801174c:	bf44      	itt	mi
 801174e:	232b      	movmi	r3, #43	; 0x2b
 8011750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011754:	f89a 3000 	ldrb.w	r3, [sl]
 8011758:	2b2a      	cmp	r3, #42	; 0x2a
 801175a:	d015      	beq.n	8011788 <_vfiprintf_r+0x13c>
 801175c:	4654      	mov	r4, sl
 801175e:	2000      	movs	r0, #0
 8011760:	f04f 0c0a 	mov.w	ip, #10
 8011764:	9a07      	ldr	r2, [sp, #28]
 8011766:	4621      	mov	r1, r4
 8011768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801176c:	3b30      	subs	r3, #48	; 0x30
 801176e:	2b09      	cmp	r3, #9
 8011770:	d94e      	bls.n	8011810 <_vfiprintf_r+0x1c4>
 8011772:	b1b0      	cbz	r0, 80117a2 <_vfiprintf_r+0x156>
 8011774:	9207      	str	r2, [sp, #28]
 8011776:	e014      	b.n	80117a2 <_vfiprintf_r+0x156>
 8011778:	eba0 0308 	sub.w	r3, r0, r8
 801177c:	fa09 f303 	lsl.w	r3, r9, r3
 8011780:	4313      	orrs	r3, r2
 8011782:	46a2      	mov	sl, r4
 8011784:	9304      	str	r3, [sp, #16]
 8011786:	e7d2      	b.n	801172e <_vfiprintf_r+0xe2>
 8011788:	9b03      	ldr	r3, [sp, #12]
 801178a:	1d19      	adds	r1, r3, #4
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	9103      	str	r1, [sp, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	bfbb      	ittet	lt
 8011794:	425b      	neglt	r3, r3
 8011796:	f042 0202 	orrlt.w	r2, r2, #2
 801179a:	9307      	strge	r3, [sp, #28]
 801179c:	9307      	strlt	r3, [sp, #28]
 801179e:	bfb8      	it	lt
 80117a0:	9204      	strlt	r2, [sp, #16]
 80117a2:	7823      	ldrb	r3, [r4, #0]
 80117a4:	2b2e      	cmp	r3, #46	; 0x2e
 80117a6:	d10c      	bne.n	80117c2 <_vfiprintf_r+0x176>
 80117a8:	7863      	ldrb	r3, [r4, #1]
 80117aa:	2b2a      	cmp	r3, #42	; 0x2a
 80117ac:	d135      	bne.n	801181a <_vfiprintf_r+0x1ce>
 80117ae:	9b03      	ldr	r3, [sp, #12]
 80117b0:	3402      	adds	r4, #2
 80117b2:	1d1a      	adds	r2, r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	9203      	str	r2, [sp, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfb8      	it	lt
 80117bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80117c0:	9305      	str	r3, [sp, #20]
 80117c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801189c <_vfiprintf_r+0x250>
 80117c6:	2203      	movs	r2, #3
 80117c8:	4650      	mov	r0, sl
 80117ca:	7821      	ldrb	r1, [r4, #0]
 80117cc:	f7ff f804 	bl	80107d8 <memchr>
 80117d0:	b140      	cbz	r0, 80117e4 <_vfiprintf_r+0x198>
 80117d2:	2340      	movs	r3, #64	; 0x40
 80117d4:	eba0 000a 	sub.w	r0, r0, sl
 80117d8:	fa03 f000 	lsl.w	r0, r3, r0
 80117dc:	9b04      	ldr	r3, [sp, #16]
 80117de:	3401      	adds	r4, #1
 80117e0:	4303      	orrs	r3, r0
 80117e2:	9304      	str	r3, [sp, #16]
 80117e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117e8:	2206      	movs	r2, #6
 80117ea:	482d      	ldr	r0, [pc, #180]	; (80118a0 <_vfiprintf_r+0x254>)
 80117ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117f0:	f7fe fff2 	bl	80107d8 <memchr>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d03f      	beq.n	8011878 <_vfiprintf_r+0x22c>
 80117f8:	4b2a      	ldr	r3, [pc, #168]	; (80118a4 <_vfiprintf_r+0x258>)
 80117fa:	bb1b      	cbnz	r3, 8011844 <_vfiprintf_r+0x1f8>
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	3307      	adds	r3, #7
 8011800:	f023 0307 	bic.w	r3, r3, #7
 8011804:	3308      	adds	r3, #8
 8011806:	9303      	str	r3, [sp, #12]
 8011808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801180a:	443b      	add	r3, r7
 801180c:	9309      	str	r3, [sp, #36]	; 0x24
 801180e:	e767      	b.n	80116e0 <_vfiprintf_r+0x94>
 8011810:	460c      	mov	r4, r1
 8011812:	2001      	movs	r0, #1
 8011814:	fb0c 3202 	mla	r2, ip, r2, r3
 8011818:	e7a5      	b.n	8011766 <_vfiprintf_r+0x11a>
 801181a:	2300      	movs	r3, #0
 801181c:	f04f 0c0a 	mov.w	ip, #10
 8011820:	4619      	mov	r1, r3
 8011822:	3401      	adds	r4, #1
 8011824:	9305      	str	r3, [sp, #20]
 8011826:	4620      	mov	r0, r4
 8011828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801182c:	3a30      	subs	r2, #48	; 0x30
 801182e:	2a09      	cmp	r2, #9
 8011830:	d903      	bls.n	801183a <_vfiprintf_r+0x1ee>
 8011832:	2b00      	cmp	r3, #0
 8011834:	d0c5      	beq.n	80117c2 <_vfiprintf_r+0x176>
 8011836:	9105      	str	r1, [sp, #20]
 8011838:	e7c3      	b.n	80117c2 <_vfiprintf_r+0x176>
 801183a:	4604      	mov	r4, r0
 801183c:	2301      	movs	r3, #1
 801183e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011842:	e7f0      	b.n	8011826 <_vfiprintf_r+0x1da>
 8011844:	ab03      	add	r3, sp, #12
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	462a      	mov	r2, r5
 801184a:	4630      	mov	r0, r6
 801184c:	4b16      	ldr	r3, [pc, #88]	; (80118a8 <_vfiprintf_r+0x25c>)
 801184e:	a904      	add	r1, sp, #16
 8011850:	f7fb fd10 	bl	800d274 <_printf_float>
 8011854:	4607      	mov	r7, r0
 8011856:	1c78      	adds	r0, r7, #1
 8011858:	d1d6      	bne.n	8011808 <_vfiprintf_r+0x1bc>
 801185a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801185c:	07d9      	lsls	r1, r3, #31
 801185e:	d405      	bmi.n	801186c <_vfiprintf_r+0x220>
 8011860:	89ab      	ldrh	r3, [r5, #12]
 8011862:	059a      	lsls	r2, r3, #22
 8011864:	d402      	bmi.n	801186c <_vfiprintf_r+0x220>
 8011866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011868:	f7fe ff36 	bl	80106d8 <__retarget_lock_release_recursive>
 801186c:	89ab      	ldrh	r3, [r5, #12]
 801186e:	065b      	lsls	r3, r3, #25
 8011870:	f53f af12 	bmi.w	8011698 <_vfiprintf_r+0x4c>
 8011874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011876:	e711      	b.n	801169c <_vfiprintf_r+0x50>
 8011878:	ab03      	add	r3, sp, #12
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	462a      	mov	r2, r5
 801187e:	4630      	mov	r0, r6
 8011880:	4b09      	ldr	r3, [pc, #36]	; (80118a8 <_vfiprintf_r+0x25c>)
 8011882:	a904      	add	r1, sp, #16
 8011884:	f7fb ff92 	bl	800d7ac <_printf_i>
 8011888:	e7e4      	b.n	8011854 <_vfiprintf_r+0x208>
 801188a:	bf00      	nop
 801188c:	0803437c 	.word	0x0803437c
 8011890:	0803439c 	.word	0x0803439c
 8011894:	0803435c 	.word	0x0803435c
 8011898:	08034594 	.word	0x08034594
 801189c:	0803459a 	.word	0x0803459a
 80118a0:	0803459e 	.word	0x0803459e
 80118a4:	0800d275 	.word	0x0800d275
 80118a8:	08011627 	.word	0x08011627

080118ac <_putc_r>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	460d      	mov	r5, r1
 80118b0:	4614      	mov	r4, r2
 80118b2:	4606      	mov	r6, r0
 80118b4:	b118      	cbz	r0, 80118be <_putc_r+0x12>
 80118b6:	6983      	ldr	r3, [r0, #24]
 80118b8:	b90b      	cbnz	r3, 80118be <_putc_r+0x12>
 80118ba:	f7fe faf1 	bl	800fea0 <__sinit>
 80118be:	4b1c      	ldr	r3, [pc, #112]	; (8011930 <_putc_r+0x84>)
 80118c0:	429c      	cmp	r4, r3
 80118c2:	d124      	bne.n	801190e <_putc_r+0x62>
 80118c4:	6874      	ldr	r4, [r6, #4]
 80118c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118c8:	07d8      	lsls	r0, r3, #31
 80118ca:	d405      	bmi.n	80118d8 <_putc_r+0x2c>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	0599      	lsls	r1, r3, #22
 80118d0:	d402      	bmi.n	80118d8 <_putc_r+0x2c>
 80118d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118d4:	f7fe feff 	bl	80106d6 <__retarget_lock_acquire_recursive>
 80118d8:	68a3      	ldr	r3, [r4, #8]
 80118da:	3b01      	subs	r3, #1
 80118dc:	2b00      	cmp	r3, #0
 80118de:	60a3      	str	r3, [r4, #8]
 80118e0:	da05      	bge.n	80118ee <_putc_r+0x42>
 80118e2:	69a2      	ldr	r2, [r4, #24]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	db1c      	blt.n	8011922 <_putc_r+0x76>
 80118e8:	b2eb      	uxtb	r3, r5
 80118ea:	2b0a      	cmp	r3, #10
 80118ec:	d019      	beq.n	8011922 <_putc_r+0x76>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	1c5a      	adds	r2, r3, #1
 80118f2:	6022      	str	r2, [r4, #0]
 80118f4:	701d      	strb	r5, [r3, #0]
 80118f6:	b2ed      	uxtb	r5, r5
 80118f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118fa:	07da      	lsls	r2, r3, #31
 80118fc:	d405      	bmi.n	801190a <_putc_r+0x5e>
 80118fe:	89a3      	ldrh	r3, [r4, #12]
 8011900:	059b      	lsls	r3, r3, #22
 8011902:	d402      	bmi.n	801190a <_putc_r+0x5e>
 8011904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011906:	f7fe fee7 	bl	80106d8 <__retarget_lock_release_recursive>
 801190a:	4628      	mov	r0, r5
 801190c:	bd70      	pop	{r4, r5, r6, pc}
 801190e:	4b09      	ldr	r3, [pc, #36]	; (8011934 <_putc_r+0x88>)
 8011910:	429c      	cmp	r4, r3
 8011912:	d101      	bne.n	8011918 <_putc_r+0x6c>
 8011914:	68b4      	ldr	r4, [r6, #8]
 8011916:	e7d6      	b.n	80118c6 <_putc_r+0x1a>
 8011918:	4b07      	ldr	r3, [pc, #28]	; (8011938 <_putc_r+0x8c>)
 801191a:	429c      	cmp	r4, r3
 801191c:	bf08      	it	eq
 801191e:	68f4      	ldreq	r4, [r6, #12]
 8011920:	e7d1      	b.n	80118c6 <_putc_r+0x1a>
 8011922:	4629      	mov	r1, r5
 8011924:	4622      	mov	r2, r4
 8011926:	4630      	mov	r0, r6
 8011928:	f7fd fa4c 	bl	800edc4 <__swbuf_r>
 801192c:	4605      	mov	r5, r0
 801192e:	e7e3      	b.n	80118f8 <_putc_r+0x4c>
 8011930:	0803437c 	.word	0x0803437c
 8011934:	0803439c 	.word	0x0803439c
 8011938:	0803435c 	.word	0x0803435c

0801193c <nan>:
 801193c:	2000      	movs	r0, #0
 801193e:	4901      	ldr	r1, [pc, #4]	; (8011944 <nan+0x8>)
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	7ff80000 	.word	0x7ff80000

08011948 <_sbrk_r>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	2300      	movs	r3, #0
 801194c:	4d05      	ldr	r5, [pc, #20]	; (8011964 <_sbrk_r+0x1c>)
 801194e:	4604      	mov	r4, r0
 8011950:	4608      	mov	r0, r1
 8011952:	602b      	str	r3, [r5, #0]
 8011954:	f7f3 f85c 	bl	8004a10 <_sbrk>
 8011958:	1c43      	adds	r3, r0, #1
 801195a:	d102      	bne.n	8011962 <_sbrk_r+0x1a>
 801195c:	682b      	ldr	r3, [r5, #0]
 801195e:	b103      	cbz	r3, 8011962 <_sbrk_r+0x1a>
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	200045d8 	.word	0x200045d8

08011968 <__sread>:
 8011968:	b510      	push	{r4, lr}
 801196a:	460c      	mov	r4, r1
 801196c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011970:	f000 f8fe 	bl	8011b70 <_read_r>
 8011974:	2800      	cmp	r0, #0
 8011976:	bfab      	itete	ge
 8011978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801197a:	89a3      	ldrhlt	r3, [r4, #12]
 801197c:	181b      	addge	r3, r3, r0
 801197e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011982:	bfac      	ite	ge
 8011984:	6563      	strge	r3, [r4, #84]	; 0x54
 8011986:	81a3      	strhlt	r3, [r4, #12]
 8011988:	bd10      	pop	{r4, pc}

0801198a <__swrite>:
 801198a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801198e:	461f      	mov	r7, r3
 8011990:	898b      	ldrh	r3, [r1, #12]
 8011992:	4605      	mov	r5, r0
 8011994:	05db      	lsls	r3, r3, #23
 8011996:	460c      	mov	r4, r1
 8011998:	4616      	mov	r6, r2
 801199a:	d505      	bpl.n	80119a8 <__swrite+0x1e>
 801199c:	2302      	movs	r3, #2
 801199e:	2200      	movs	r2, #0
 80119a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119a4:	f000 f87c 	bl	8011aa0 <_lseek_r>
 80119a8:	89a3      	ldrh	r3, [r4, #12]
 80119aa:	4632      	mov	r2, r6
 80119ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119b0:	81a3      	strh	r3, [r4, #12]
 80119b2:	4628      	mov	r0, r5
 80119b4:	463b      	mov	r3, r7
 80119b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119be:	f000 b823 	b.w	8011a08 <_write_r>

080119c2 <__sseek>:
 80119c2:	b510      	push	{r4, lr}
 80119c4:	460c      	mov	r4, r1
 80119c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ca:	f000 f869 	bl	8011aa0 <_lseek_r>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	bf15      	itete	ne
 80119d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119de:	81a3      	strheq	r3, [r4, #12]
 80119e0:	bf18      	it	ne
 80119e2:	81a3      	strhne	r3, [r4, #12]
 80119e4:	bd10      	pop	{r4, pc}

080119e6 <__sclose>:
 80119e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ea:	f000 b827 	b.w	8011a3c <_close_r>

080119ee <__ascii_wctomb>:
 80119ee:	4603      	mov	r3, r0
 80119f0:	4608      	mov	r0, r1
 80119f2:	b141      	cbz	r1, 8011a06 <__ascii_wctomb+0x18>
 80119f4:	2aff      	cmp	r2, #255	; 0xff
 80119f6:	d904      	bls.n	8011a02 <__ascii_wctomb+0x14>
 80119f8:	228a      	movs	r2, #138	; 0x8a
 80119fa:	f04f 30ff 	mov.w	r0, #4294967295
 80119fe:	601a      	str	r2, [r3, #0]
 8011a00:	4770      	bx	lr
 8011a02:	2001      	movs	r0, #1
 8011a04:	700a      	strb	r2, [r1, #0]
 8011a06:	4770      	bx	lr

08011a08 <_write_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	4608      	mov	r0, r1
 8011a0e:	4611      	mov	r1, r2
 8011a10:	2200      	movs	r2, #0
 8011a12:	4d05      	ldr	r5, [pc, #20]	; (8011a28 <_write_r+0x20>)
 8011a14:	602a      	str	r2, [r5, #0]
 8011a16:	461a      	mov	r2, r3
 8011a18:	f7f2 ffad 	bl	8004976 <_write>
 8011a1c:	1c43      	adds	r3, r0, #1
 8011a1e:	d102      	bne.n	8011a26 <_write_r+0x1e>
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	b103      	cbz	r3, 8011a26 <_write_r+0x1e>
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	bd38      	pop	{r3, r4, r5, pc}
 8011a28:	200045d8 	.word	0x200045d8

08011a2c <abort>:
 8011a2c:	2006      	movs	r0, #6
 8011a2e:	b508      	push	{r3, lr}
 8011a30:	f000 f8d8 	bl	8011be4 <raise>
 8011a34:	2001      	movs	r0, #1
 8011a36:	f7f2 ff77 	bl	8004928 <_exit>
	...

08011a3c <_close_r>:
 8011a3c:	b538      	push	{r3, r4, r5, lr}
 8011a3e:	2300      	movs	r3, #0
 8011a40:	4d05      	ldr	r5, [pc, #20]	; (8011a58 <_close_r+0x1c>)
 8011a42:	4604      	mov	r4, r0
 8011a44:	4608      	mov	r0, r1
 8011a46:	602b      	str	r3, [r5, #0]
 8011a48:	f7f2 ffb1 	bl	80049ae <_close>
 8011a4c:	1c43      	adds	r3, r0, #1
 8011a4e:	d102      	bne.n	8011a56 <_close_r+0x1a>
 8011a50:	682b      	ldr	r3, [r5, #0]
 8011a52:	b103      	cbz	r3, 8011a56 <_close_r+0x1a>
 8011a54:	6023      	str	r3, [r4, #0]
 8011a56:	bd38      	pop	{r3, r4, r5, pc}
 8011a58:	200045d8 	.word	0x200045d8

08011a5c <_fstat_r>:
 8011a5c:	b538      	push	{r3, r4, r5, lr}
 8011a5e:	2300      	movs	r3, #0
 8011a60:	4d06      	ldr	r5, [pc, #24]	; (8011a7c <_fstat_r+0x20>)
 8011a62:	4604      	mov	r4, r0
 8011a64:	4608      	mov	r0, r1
 8011a66:	4611      	mov	r1, r2
 8011a68:	602b      	str	r3, [r5, #0]
 8011a6a:	f7f2 ffab 	bl	80049c4 <_fstat>
 8011a6e:	1c43      	adds	r3, r0, #1
 8011a70:	d102      	bne.n	8011a78 <_fstat_r+0x1c>
 8011a72:	682b      	ldr	r3, [r5, #0]
 8011a74:	b103      	cbz	r3, 8011a78 <_fstat_r+0x1c>
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	bd38      	pop	{r3, r4, r5, pc}
 8011a7a:	bf00      	nop
 8011a7c:	200045d8 	.word	0x200045d8

08011a80 <_isatty_r>:
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	2300      	movs	r3, #0
 8011a84:	4d05      	ldr	r5, [pc, #20]	; (8011a9c <_isatty_r+0x1c>)
 8011a86:	4604      	mov	r4, r0
 8011a88:	4608      	mov	r0, r1
 8011a8a:	602b      	str	r3, [r5, #0]
 8011a8c:	f7f2 ffa9 	bl	80049e2 <_isatty>
 8011a90:	1c43      	adds	r3, r0, #1
 8011a92:	d102      	bne.n	8011a9a <_isatty_r+0x1a>
 8011a94:	682b      	ldr	r3, [r5, #0]
 8011a96:	b103      	cbz	r3, 8011a9a <_isatty_r+0x1a>
 8011a98:	6023      	str	r3, [r4, #0]
 8011a9a:	bd38      	pop	{r3, r4, r5, pc}
 8011a9c:	200045d8 	.word	0x200045d8

08011aa0 <_lseek_r>:
 8011aa0:	b538      	push	{r3, r4, r5, lr}
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	4d05      	ldr	r5, [pc, #20]	; (8011ac0 <_lseek_r+0x20>)
 8011aac:	602a      	str	r2, [r5, #0]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	f7f2 ffa1 	bl	80049f6 <_lseek>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_lseek_r+0x1e>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_lseek_r+0x1e>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	200045d8 	.word	0x200045d8

08011ac4 <memmove>:
 8011ac4:	4288      	cmp	r0, r1
 8011ac6:	b510      	push	{r4, lr}
 8011ac8:	eb01 0402 	add.w	r4, r1, r2
 8011acc:	d902      	bls.n	8011ad4 <memmove+0x10>
 8011ace:	4284      	cmp	r4, r0
 8011ad0:	4623      	mov	r3, r4
 8011ad2:	d807      	bhi.n	8011ae4 <memmove+0x20>
 8011ad4:	1e43      	subs	r3, r0, #1
 8011ad6:	42a1      	cmp	r1, r4
 8011ad8:	d008      	beq.n	8011aec <memmove+0x28>
 8011ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ae2:	e7f8      	b.n	8011ad6 <memmove+0x12>
 8011ae4:	4601      	mov	r1, r0
 8011ae6:	4402      	add	r2, r0
 8011ae8:	428a      	cmp	r2, r1
 8011aea:	d100      	bne.n	8011aee <memmove+0x2a>
 8011aec:	bd10      	pop	{r4, pc}
 8011aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011af6:	e7f7      	b.n	8011ae8 <memmove+0x24>

08011af8 <__malloc_lock>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__malloc_lock+0x8>)
 8011afa:	f7fe bdec 	b.w	80106d6 <__retarget_lock_acquire_recursive>
 8011afe:	bf00      	nop
 8011b00:	200045cc 	.word	0x200045cc

08011b04 <__malloc_unlock>:
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <__malloc_unlock+0x8>)
 8011b06:	f7fe bde7 	b.w	80106d8 <__retarget_lock_release_recursive>
 8011b0a:	bf00      	nop
 8011b0c:	200045cc 	.word	0x200045cc

08011b10 <_realloc_r>:
 8011b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b14:	4680      	mov	r8, r0
 8011b16:	4614      	mov	r4, r2
 8011b18:	460e      	mov	r6, r1
 8011b1a:	b921      	cbnz	r1, 8011b26 <_realloc_r+0x16>
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b22:	f7ff bb9b 	b.w	801125c <_malloc_r>
 8011b26:	b92a      	cbnz	r2, 8011b34 <_realloc_r+0x24>
 8011b28:	f7ff fb30 	bl	801118c <_free_r>
 8011b2c:	4625      	mov	r5, r4
 8011b2e:	4628      	mov	r0, r5
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	f000 f872 	bl	8011c1c <_malloc_usable_size_r>
 8011b38:	4284      	cmp	r4, r0
 8011b3a:	4607      	mov	r7, r0
 8011b3c:	d802      	bhi.n	8011b44 <_realloc_r+0x34>
 8011b3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b42:	d812      	bhi.n	8011b6a <_realloc_r+0x5a>
 8011b44:	4621      	mov	r1, r4
 8011b46:	4640      	mov	r0, r8
 8011b48:	f7ff fb88 	bl	801125c <_malloc_r>
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d0ed      	beq.n	8011b2e <_realloc_r+0x1e>
 8011b52:	42bc      	cmp	r4, r7
 8011b54:	4622      	mov	r2, r4
 8011b56:	4631      	mov	r1, r6
 8011b58:	bf28      	it	cs
 8011b5a:	463a      	movcs	r2, r7
 8011b5c:	f7fb fad6 	bl	800d10c <memcpy>
 8011b60:	4631      	mov	r1, r6
 8011b62:	4640      	mov	r0, r8
 8011b64:	f7ff fb12 	bl	801118c <_free_r>
 8011b68:	e7e1      	b.n	8011b2e <_realloc_r+0x1e>
 8011b6a:	4635      	mov	r5, r6
 8011b6c:	e7df      	b.n	8011b2e <_realloc_r+0x1e>
	...

08011b70 <_read_r>:
 8011b70:	b538      	push	{r3, r4, r5, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	4608      	mov	r0, r1
 8011b76:	4611      	mov	r1, r2
 8011b78:	2200      	movs	r2, #0
 8011b7a:	4d05      	ldr	r5, [pc, #20]	; (8011b90 <_read_r+0x20>)
 8011b7c:	602a      	str	r2, [r5, #0]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	f7f2 fedc 	bl	800493c <_read>
 8011b84:	1c43      	adds	r3, r0, #1
 8011b86:	d102      	bne.n	8011b8e <_read_r+0x1e>
 8011b88:	682b      	ldr	r3, [r5, #0]
 8011b8a:	b103      	cbz	r3, 8011b8e <_read_r+0x1e>
 8011b8c:	6023      	str	r3, [r4, #0]
 8011b8e:	bd38      	pop	{r3, r4, r5, pc}
 8011b90:	200045d8 	.word	0x200045d8

08011b94 <_raise_r>:
 8011b94:	291f      	cmp	r1, #31
 8011b96:	b538      	push	{r3, r4, r5, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	d904      	bls.n	8011ba8 <_raise_r+0x14>
 8011b9e:	2316      	movs	r3, #22
 8011ba0:	6003      	str	r3, [r0, #0]
 8011ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011baa:	b112      	cbz	r2, 8011bb2 <_raise_r+0x1e>
 8011bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bb0:	b94b      	cbnz	r3, 8011bc6 <_raise_r+0x32>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 f830 	bl	8011c18 <_getpid_r>
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4601      	mov	r1, r0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc2:	f000 b817 	b.w	8011bf4 <_kill_r>
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d00a      	beq.n	8011be0 <_raise_r+0x4c>
 8011bca:	1c59      	adds	r1, r3, #1
 8011bcc:	d103      	bne.n	8011bd6 <_raise_r+0x42>
 8011bce:	2316      	movs	r3, #22
 8011bd0:	6003      	str	r3, [r0, #0]
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	e7e7      	b.n	8011ba6 <_raise_r+0x12>
 8011bd6:	2400      	movs	r4, #0
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bde:	4798      	blx	r3
 8011be0:	2000      	movs	r0, #0
 8011be2:	e7e0      	b.n	8011ba6 <_raise_r+0x12>

08011be4 <raise>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	; (8011bf0 <raise+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f7ff bfd3 	b.w	8011b94 <_raise_r>
 8011bee:	bf00      	nop
 8011bf0:	20000054 	.word	0x20000054

08011bf4 <_kill_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	4d06      	ldr	r5, [pc, #24]	; (8011c14 <_kill_r+0x20>)
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	4611      	mov	r1, r2
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	f7f2 fe81 	bl	8004908 <_kill>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d102      	bne.n	8011c10 <_kill_r+0x1c>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	b103      	cbz	r3, 8011c10 <_kill_r+0x1c>
 8011c0e:	6023      	str	r3, [r4, #0]
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop
 8011c14:	200045d8 	.word	0x200045d8

08011c18 <_getpid_r>:
 8011c18:	f7f2 be6f 	b.w	80048fa <_getpid>

08011c1c <_malloc_usable_size_r>:
 8011c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c20:	1f18      	subs	r0, r3, #4
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	bfbc      	itt	lt
 8011c26:	580b      	ldrlt	r3, [r1, r0]
 8011c28:	18c0      	addlt	r0, r0, r3
 8011c2a:	4770      	bx	lr

08011c2c <_init>:
 8011c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2e:	bf00      	nop
 8011c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c32:	bc08      	pop	{r3}
 8011c34:	469e      	mov	lr, r3
 8011c36:	4770      	bx	lr

08011c38 <_fini>:
 8011c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3a:	bf00      	nop
 8011c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c3e:	bc08      	pop	{r3}
 8011c40:	469e      	mov	lr, r3
 8011c42:	4770      	bx	lr
